var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

var require_queue_setconsumer_inflight = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/queue.setconsumer.inflight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueueSetConsumerHandlerClient = void 0;
    var QueueSetConsumerHandlerClient = class {
      constructor({ handler }) {
        this.handler = handler;
      }
      async handle(event) {
        for (const record of event.Records ?? []) {
          await this.handler.handle(record.body);
        }
      }
    };
    exports2.QueueSetConsumerHandlerClient = QueueSetConsumerHandlerClient;
  }
});

var require_inflight_Closure1_1 = __commonJS({
  "target/main.tfaws.762528.tmp/.wing/inflight.$Closure1-1.js"(exports2, module2) {
    module2.exports = function({ $bucket, $counter }) {
      class $Closure1 {
        constructor({}) {
          const $obj = (...args) => this.handle(...args);
          Object.setPrototypeOf($obj, this);
          return $obj;
        }
        async handle(message) {
          const index = await $counter.inc();
          await $bucket.put(String.raw({ raw: ["wing-", ".txt"] }, index), String.raw({ raw: ["Hello, ", ""] }, message));
          {
            console.log(String.raw({ raw: ["file wing-", ".txt created"] }, index));
          }
          ;
        }
      }
      return $Closure1;
    };
  }
});

var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

var require_abort = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/abort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_auth = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/auth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports2.HttpAuthLocation || (exports2.HttpAuthLocation = {}));
  }
});

var require_blob_payload_input_types = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/blob/blob-payload-input-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_client = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_command = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_config = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_manager = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/manager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pool = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_connection = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_manager(), exports2);
    tslib_1.__exportStar(require_pool(), exports2);
  }
});

var require_crypto = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_encode = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/encode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoint = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports2.EndpointURLScheme || (exports2.EndpointURLScheme = {}));
  }
});

var require_EndpointRuleObject = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/EndpointRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ErrorRuleObject = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/ErrorRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RuleSetObject = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/RuleSetObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shared = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TreeRuleObject = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/TreeRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoints = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointRuleObject(), exports2);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports2);
    tslib_1.__exportStar(require_RuleSetObject(), exports2);
    tslib_1.__exportStar(require_shared(), exports2);
    tslib_1.__exportStar(require_TreeRuleObject(), exports2);
  }
});

var require_eventStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/eventStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveChecksumRuntimeConfig = exports2.getChecksumConfiguration = exports2.AlgorithmId = void 0;
    var AlgorithmId;
    (function(AlgorithmId2) {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
    })(AlgorithmId = exports2.AlgorithmId || (exports2.AlgorithmId = {}));
    var getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => AlgorithmId.SHA256,
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => AlgorithmId.MD5,
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    exports2.getChecksumConfiguration = getChecksumConfiguration;
    var resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
    exports2.resolveChecksumRuntimeConfig = resolveChecksumRuntimeConfig;
  }
});

var require_defaultClientConfiguration = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/defaultClientConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultRuntimeConfig = exports2.getDefaultClientConfiguration = void 0;
    var checksum_1 = require_checksum2();
    var getDefaultClientConfiguration = (runtimeConfig) => {
      return {
        ...(0, checksum_1.getChecksumConfiguration)(runtimeConfig)
      };
    };
    exports2.getDefaultClientConfiguration = getDefaultClientConfiguration;
    var resolveDefaultRuntimeConfig = (config) => {
      return {
        ...(0, checksum_1.resolveChecksumRuntimeConfig)(config)
      };
    };
    exports2.resolveDefaultRuntimeConfig = resolveDefaultRuntimeConfig;
  }
});

var require_defaultExtensionConfiguration = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/defaultExtensionConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_extensions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlgorithmId = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultClientConfiguration(), exports2);
    tslib_1.__exportStar(require_defaultExtensionConfiguration(), exports2);
    var checksum_1 = require_checksum2();
    Object.defineProperty(exports2, "AlgorithmId", { enumerable: true, get: function() {
      return checksum_1.AlgorithmId;
    } });
  }
});

var require_http = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports2.FieldPosition || (exports2.FieldPosition = {}));
  }
});

var require_awsCredentialIdentity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/identity/awsCredentialIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/identity/identity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/identity/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsCredentialIdentity(), exports2);
    tslib_1.__exportStar(require_identity(), exports2);
  }
});

var require_logger = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_middleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pagination = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/pagination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_profile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/profile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_response = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_retry = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_serde = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/serde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shapes = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/shapes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_signature = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_stream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_streaming_blob_common_types = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-common-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_streaming_blob_payload_input_types = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-input-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_streaming_blob_payload_output_types = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-output-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_transfer = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/transfer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestHandlerProtocol = void 0;
    var RequestHandlerProtocol;
    (function(RequestHandlerProtocol2) {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol = exports2.RequestHandlerProtocol || (exports2.RequestHandlerProtocol = {}));
  }
});

var require_client_payload_blob_type_narrow = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/transform/client-payload-blob-type-narrow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_type_transform = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/transform/type-transform.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_uri = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_util = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_waiter = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports2);
    tslib_1.__exportStar(require_auth(), exports2);
    tslib_1.__exportStar(require_blob_payload_input_types(), exports2);
    tslib_1.__exportStar(require_checksum(), exports2);
    tslib_1.__exportStar(require_client(), exports2);
    tslib_1.__exportStar(require_command(), exports2);
    tslib_1.__exportStar(require_connection(), exports2);
    tslib_1.__exportStar(require_crypto(), exports2);
    tslib_1.__exportStar(require_encode(), exports2);
    tslib_1.__exportStar(require_endpoint(), exports2);
    tslib_1.__exportStar(require_endpoints(), exports2);
    tslib_1.__exportStar(require_eventStream(), exports2);
    tslib_1.__exportStar(require_extensions(), exports2);
    tslib_1.__exportStar(require_http(), exports2);
    tslib_1.__exportStar(require_identity2(), exports2);
    tslib_1.__exportStar(require_logger(), exports2);
    tslib_1.__exportStar(require_middleware(), exports2);
    tslib_1.__exportStar(require_pagination(), exports2);
    tslib_1.__exportStar(require_profile(), exports2);
    tslib_1.__exportStar(require_response(), exports2);
    tslib_1.__exportStar(require_retry(), exports2);
    tslib_1.__exportStar(require_serde(), exports2);
    tslib_1.__exportStar(require_shapes(), exports2);
    tslib_1.__exportStar(require_signature(), exports2);
    tslib_1.__exportStar(require_stream(), exports2);
    tslib_1.__exportStar(require_streaming_blob_common_types(), exports2);
    tslib_1.__exportStar(require_streaming_blob_payload_input_types(), exports2);
    tslib_1.__exportStar(require_streaming_blob_payload_output_types(), exports2);
    tslib_1.__exportStar(require_transfer(), exports2);
    tslib_1.__exportStar(require_client_payload_blob_type_narrow(), exports2);
    tslib_1.__exportStar(require_type_transform(), exports2);
    tslib_1.__exportStar(require_uri(), exports2);
    tslib_1.__exportStar(require_util(), exports2);
    tslib_1.__exportStar(require_waiter(), exports2);
  }
});

var require_Field = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/Field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Field = void 0;
    var types_1 = require_dist_cjs();
    var Field = class {
      constructor({ name, kind = types_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports2.Field = Field;
  }
});

var require_Fields = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/Fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports2.Fields = Fields;
  }
});

var require_httpHandler = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/httpHandler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_httpRequest = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpRequest = void 0;
    var HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports2.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

var require_httpResponse = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/httpResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports2.HttpResponse = HttpResponse;
  }
});

var require_isValidHostname = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/isValidHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports2.isValidHostname = isValidHostname;
  }
});

var require_types = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports2);
    tslib_1.__exportStar(require_Fields(), exports2);
    tslib_1.__exportStar(require_httpHandler(), exports2);
    tslib_1.__exportStar(require_httpRequest(), exports2);
    tslib_1.__exportStar(require_httpResponse(), exports2);
    tslib_1.__exportStar(require_isValidHostname(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
  }
});

var require_dist_cjs3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-expect-continue/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAddExpectContinuePlugin = exports2.addExpectContinueMiddlewareOptions = exports2.addExpectContinueMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    function addExpectContinueMiddleware(options) {
      return (next) => async (args) => {
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
          request.headers = {
            ...request.headers,
            Expect: "100-continue"
          };
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.addExpectContinueMiddleware = addExpectContinueMiddleware;
    exports2.addExpectContinueMiddlewareOptions = {
      step: "build",
      tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
      name: "addExpectContinueMiddleware",
      override: true
    };
    var getAddExpectContinuePlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), exports2.addExpectContinueMiddlewareOptions);
      }
    });
    exports2.getAddExpectContinuePlugin = getAddExpectContinuePlugin;
  }
});

var require_dist_cjs4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports2.hostHeaderMiddleware = hostHeaderMiddleware;
    exports2.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.hostHeaderMiddleware)(options), exports2.hostHeaderMiddlewareOptions);
      }
    });
    exports2.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

var require_loggerMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    };
    exports2.loggerMiddleware = loggerMiddleware;
    exports2.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.loggerMiddleware)(), exports2.loggerMiddlewareOptions);
      }
    });
    exports2.getLoggerPlugin = getLoggerPlugin;
  }
});

var require_dist_cjs5 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports2);
  }
});

var require_dist_cjs6 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRecursionDetectionPlugin = exports2.addRecursionDetectionMiddlewareOptions = exports2.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports2.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.recursionDetectionMiddleware)(options), exports2.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports2.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

var require_check_content_length_header = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/check-content-length-header.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCheckContentLengthHeaderPlugin = exports2.checkContentLengthHeaderMiddlewareOptions = exports2.checkContentLengthHeader = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function checkContentLengthHeader() {
      return (next, context) => async (args) => {
        var _a;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          if (!request.headers[CONTENT_LENGTH_HEADER]) {
            const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
            if (typeof ((_a = context === null || context === void 0 ? void 0 : context.logger) === null || _a === void 0 ? void 0 : _a.warn) === "function") {
              context.logger.warn(message);
            } else {
              console.warn(message);
            }
          }
        }
        return next({ ...args });
      };
    }
    exports2.checkContentLengthHeader = checkContentLengthHeader;
    exports2.checkContentLengthHeaderMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["CHECK_CONTENT_LENGTH_HEADER"],
      name: "getCheckContentLengthHeaderPlugin",
      override: true
    };
    var getCheckContentLengthHeaderPlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(checkContentLengthHeader(), exports2.checkContentLengthHeaderMiddlewareOptions);
      }
    });
    exports2.getCheckContentLengthHeaderPlugin = getCheckContentLengthHeaderPlugin;
  }
});

var require_s3Configuration = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/s3Configuration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveS3Config = void 0;
    var resolveS3Config = (input) => {
      var _a, _b, _c;
      return {
        ...input,
        forcePathStyle: (_a = input.forcePathStyle) !== null && _a !== void 0 ? _a : false,
        useAccelerateEndpoint: (_b = input.useAccelerateEndpoint) !== null && _b !== void 0 ? _b : false,
        disableMultiregionAccessPoints: (_c = input.disableMultiregionAccessPoints) !== null && _c !== void 0 ? _c : false
      };
    };
    exports2.resolveS3Config = resolveS3Config;
  }
});

var require_throw_200_exceptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/throw-200-exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getThrow200ExceptionsPlugin = exports2.throw200ExceptionsMiddlewareOptions = exports2.throw200ExceptionsMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var throw200ExceptionsMiddleware = (config) => (next) => async (args) => {
      const result = await next(args);
      const { response } = result;
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return result;
      const { statusCode, body } = response;
      if (statusCode < 200 || statusCode >= 300)
        return result;
      const bodyBytes = await collectBody(body, config);
      const bodyString = await collectBodyString(bodyBytes, config);
      if (bodyBytes.length === 0) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
      }
      if (bodyString && bodyString.match("<Error>")) {
        response.statusCode = 400;
      }
      response.body = bodyBytes;
      return result;
    };
    exports2.throw200ExceptionsMiddleware = throw200ExceptionsMiddleware;
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    exports2.throw200ExceptionsMiddlewareOptions = {
      relation: "after",
      toMiddleware: "deserializerMiddleware",
      tags: ["THROW_200_EXCEPTIONS", "S3"],
      name: "throw200ExceptionsMiddleware",
      override: true
    };
    var getThrow200ExceptionsPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.throw200ExceptionsMiddleware)(config), exports2.throw200ExceptionsMiddlewareOptions);
      }
    });
    exports2.getThrow200ExceptionsPlugin = getThrow200ExceptionsPlugin;
  }
});

var require_dist_cjs7 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.build = exports2.parse = exports2.validate = void 0;
    var validate2 = (str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
    exports2.validate = validate2;
    var parse2 = (arn) => {
      const segments = arn.split(":");
      if (segments.length < 6 || segments[0] !== "arn")
        throw new Error("Malformed ARN");
      const [, partition, service, region, accountId, ...resource] = segments;
      return {
        partition,
        service,
        region,
        accountId,
        resource: resource.join(":")
      };
    };
    exports2.parse = parse2;
    var build = (arnObject) => {
      const { partition = "aws", service, region, accountId, resource } = arnObject;
      if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
        throw new Error("Input ARN object is invalid");
      }
      return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
    };
    exports2.build = build;
  }
});

var require_validate_bucket_name = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/validate-bucket-name.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidateBucketNamePlugin = exports2.validateBucketNameMiddlewareOptions = exports2.validateBucketNameMiddleware = void 0;
    var util_arn_parser_1 = require_dist_cjs7();
    function validateBucketNameMiddleware() {
      return (next) => async (args) => {
        const { input: { Bucket } } = args;
        if (typeof Bucket === "string" && !(0, util_arn_parser_1.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
          const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
          err.name = "InvalidBucketName";
          throw err;
        }
        return next({ ...args });
      };
    }
    exports2.validateBucketNameMiddleware = validateBucketNameMiddleware;
    exports2.validateBucketNameMiddlewareOptions = {
      step: "initialize",
      tags: ["VALIDATE_BUCKET_NAME"],
      name: "validateBucketNameMiddleware",
      override: true
    };
    var getValidateBucketNamePlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(validateBucketNameMiddleware(), exports2.validateBucketNameMiddlewareOptions);
      }
    });
    exports2.getValidateBucketNamePlugin = getValidateBucketNamePlugin;
  }
});

var require_dist_cjs8 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_check_content_length_header(), exports2);
    tslib_1.__exportStar(require_s3Configuration(), exports2);
    tslib_1.__exportStar(require_throw_200_exceptions(), exports2);
    tslib_1.__exportStar(require_validate_bucket_name(), exports2);
  }
});

var require_ProviderError = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/ProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProviderError = void 0;
    var ProviderError = class _ProviderError extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, _ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports2.ProviderError = ProviderError;
  }
});

var require_CredentialsProviderError = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/CredentialsProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class _CredentialsProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
    exports2.CredentialsProviderError = CredentialsProviderError;
  }
});

var require_TokenProviderError = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/TokenProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class _TokenProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
    exports2.TokenProviderError = TokenProviderError;
  }
});

var require_chain = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/chain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    var chain = (...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError_1.ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    };
    exports2.chain = chain;
  }
});

var require_fromStatic = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports2.fromStatic = fromStatic;
  }
});

var require_memoize = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/memoize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports2.memoize = memoize;
  }
});

var require_dist_cjs9 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports2);
    tslib_1.__exportStar(require_ProviderError(), exports2);
    tslib_1.__exportStar(require_TokenProviderError(), exports2);
    tslib_1.__exportStar(require_chain(), exports2);
    tslib_1.__exportStar(require_fromStatic(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
  }
});

var require_pureJs = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var fromUtf8 = (input) => {
      const bytes = [];
      for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => {
      let decoded = "";
      for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i], input[++i], input[++i]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
    exports2.toUtf8 = toUtf8;
  }
});

var require_whatwgEncodingApi = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    function fromUtf8(input) {
      return new TextEncoder().encode(input);
    }
    exports2.fromUtf8 = fromUtf8;
    function toUtf8(input) {
      return new TextDecoder("utf-8").decode(input);
    }
    exports2.toUtf8 = toUtf8;
  }
});

var require_dist_cjs10 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var pureJs_1 = require_pureJs();
    var whatwgEncodingApi_1 = require_whatwgEncodingApi();
    var fromUtf8 = (input) => typeof TextEncoder === "function" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => typeof TextDecoder === "function" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);
    exports2.toUtf8 = toUtf8;
  }
});

var require_convertToBuffer = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertToBuffer = void 0;
    var util_utf8_browser_1 = require_dist_cjs10();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports2.convertToBuffer = convertToBuffer;
  }
});

var require_isEmptyData = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports2.isEmptyData = isEmptyData;
  }
});

var require_numToUint8 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/numToUint8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports2.numToUint8 = numToUint8;
  }
});

var require_uint32ArrayFrom = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports2.uint32ArrayFrom = uint32ArrayFrom;
  }
});

var require_build = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = exports2.numToUint8 = exports2.isEmptyData = exports2.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports2, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports2, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports2, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports2, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

var require_aws_crc32 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    var index_1 = require_build2();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports2.AwsCrc32 = AwsCrc32;
  }
});

var require_build2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = exports2.Crc32 = exports2.crc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports2.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports2.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports2, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

var require_dist_cjs11 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toHex = exports2.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports2.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports2.toHex = toHex;
  }
});

var require_Int64 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/Int64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Int64 = void 0;
    var util_hex_encoding_1 = require_dist_cjs11();
    var Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, util_hex_encoding_1.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    exports2.Int64 = Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
  }
});

var require_HeaderMarshaller = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/HeaderMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeaderMarshaller = void 0;
    var util_hex_encoding_1 = require_dist_cjs11();
    var Int64_1 = require_Int64();
    var HeaderMarshaller = class {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, util_hex_encoding_1.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(0, 4))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(4, 6))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(6, 8))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(8, 10))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    exports2.HeaderMarshaller = HeaderMarshaller;
    var HEADER_VALUE_TYPE;
    (function(HEADER_VALUE_TYPE2) {
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

var require_splitMessage = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/splitMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitMessage = void 0;
    var crc32_1 = require_build2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
      }
      checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
      };
    }
    exports2.splitMessage = splitMessage;
  }
});

var require_EventStreamCodec = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/EventStreamCodec.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamCodec = void 0;
    var crc32_1 = require_build2();
    var HeaderMarshaller_1 = require_HeaderMarshaller();
    var splitMessage_1 = require_splitMessage();
    var EventStreamCodec = class {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    exports2.EventStreamCodec = EventStreamCodec;
  }
});

var require_Message = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/Message.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_MessageDecoderStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/MessageDecoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessageDecoderStream = void 0;
    var MessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
    exports2.MessageDecoderStream = MessageDecoderStream;
  }
});

var require_MessageEncoderStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/MessageEncoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessageEncoderStream = void 0;
    var MessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
    exports2.MessageEncoderStream = MessageEncoderStream;
  }
});

var require_SmithyMessageDecoderStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageDecoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SmithyMessageDecoderStream = void 0;
    var SmithyMessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
    exports2.SmithyMessageDecoderStream = SmithyMessageDecoderStream;
  }
});

var require_SmithyMessageEncoderStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageEncoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SmithyMessageEncoderStream = void 0;
    var SmithyMessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
    exports2.SmithyMessageEncoderStream = SmithyMessageEncoderStream;
  }
});

var require_dist_cjs12 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamCodec(), exports2);
    tslib_1.__exportStar(require_HeaderMarshaller(), exports2);
    tslib_1.__exportStar(require_Int64(), exports2);
    tslib_1.__exportStar(require_Message(), exports2);
    tslib_1.__exportStar(require_MessageDecoderStream(), exports2);
    tslib_1.__exportStar(require_MessageEncoderStream(), exports2);
    tslib_1.__exportStar(require_SmithyMessageDecoderStream(), exports2);
    tslib_1.__exportStar(require_SmithyMessageEncoderStream(), exports2);
  }
});

var require_normalizeProvider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-middleware/dist-cjs/normalizeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports2.normalizeProvider = normalizeProvider;
  }
});

var require_dist_cjs13 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports2);
  }
});

var require_dist_cjs14 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports2.isArrayBuffer = isArrayBuffer;
  }
});

var require_dist_cjs15 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromString = exports2.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs14();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports2.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports2.fromString = fromString;
  }
});

var require_fromUtf8 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/fromUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs15();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
  }
});

var require_toUint8Array = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/toUint8Array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports2.toUint8Array = toUint8Array;
  }
});

var require_toUtf8 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/toUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs15();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

var require_dist_cjs16 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports2);
    tslib_1.__exportStar(require_toUint8Array(), exports2);
    tslib_1.__exportStar(require_toUtf8(), exports2);
  }
});

var require_constants = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER_V4A = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.REGION_SET_PARAM = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
    exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports2.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports2.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports2.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports2.AUTH_HEADER = "authorization";
    exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports2.DATE_HEADER = "date";
    exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
    exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports2.SHA256_HEADER = "x-amz-content-sha256";
    exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
    exports2.HOST_HEADER = "host";
    exports2.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports2.PROXY_HEADER_PATTERN = /^proxy-/;
    exports2.SEC_HEADER_PATTERN = /^sec-/;
    exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports2.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports2.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports2.MAX_CACHE_SIZE = 50;
    exports2.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

var require_credentialDerivation = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/credentialDerivation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs16();
    var constants_1 = require_constants();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports2.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports2.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports2.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

var require_getCanonicalHeaders = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalHeaders = void 0;
    var constants_1 = require_constants();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports2.getCanonicalHeaders = getCanonicalHeaders;
  }
});

var require_escape_uri = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports2.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

var require_escape_uri_path = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports2.escapeUriPath = escapeUriPath;
  }
});

var require_dist_cjs17 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports2);
    tslib_1.__exportStar(require_escape_uri_path(), exports2);
  }
});

var require_getCanonicalQuery = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/getCanonicalQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs17();
    var constants_1 = require_constants();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).sort().join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports2.getCanonicalQuery = getCanonicalQuery;
  }
});

var require_getPayloadHash = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/getPayloadHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs14();
    var util_hex_encoding_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs16();
    var constants_1 = require_constants();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports2.getPayloadHash = getPayloadHash;
  }
});

var require_headerUtil = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/headerUtil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deleteHeader = exports2.getHeaderValue = exports2.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports2.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports2.deleteHeader = deleteHeader;
  }
});

var require_cloneRequest = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/cloneRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneQuery = exports2.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports2.cloneQuery)(query) : void 0
    });
    exports2.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports2.cloneQuery = cloneQuery;
  }
});

var require_moveHeadersToQuery = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports2.moveHeadersToQuery = moveHeadersToQuery;
  }
});

var require_prepareRequest = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/prepareRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports2.prepareRequest = prepareRequest;
  }
});

var require_utilDate = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/utilDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDate = exports2.iso8601 = void 0;
    var iso8601 = (time) => (0, exports2.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports2.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports2.toDate = toDate;
  }
});

var require_SignatureV4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/SignatureV4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4 = void 0;
    var eventstream_codec_1 = require_dist_cjs12();
    var util_hex_encoding_1 = require_dist_cjs11();
    var util_middleware_1 = require_dist_cjs13();
    var util_utf8_1 = require_dist_cjs16();
    var constants_1 = require_constants();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerMarshaller = new eventstream_codec_1.HeaderMarshaller(util_utf8_1.toUtf8, util_utf8_1.fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerMarshaller.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports2.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

var require_dist_cjs18 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = exports2.moveHeadersToQuery = exports2.getPayloadHash = exports2.getCanonicalQuery = exports2.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports2);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports2, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports2, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports2, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports2, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports2, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports2);
  }
});

var require_awsAuthConfiguration = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSigV4AuthConfig = exports2.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs9();
    var signature_v4_1 = require_dist_cjs18();
    var util_middleware_1 = require_dist_cjs13();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

var require_getSkewCorrectedDate = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports2.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

var require_isClockSkewed = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports2.isClockSkewed = isClockSkewed;
  }
});

var require_getUpdatedSystemClockOffset = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports2.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

var require_awsAuthMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports2.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports2.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.awsAuthMiddleware)(options), exports2.awsAuthMiddlewareOptions);
      }
    });
    exports2.getAwsAuthPlugin = getAwsAuthPlugin;
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin;
  }
});

var require_dist_cjs19 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsAuthConfiguration(), exports2);
    tslib_1.__exportStar(require_awsAuthMiddleware(), exports2);
  }
});

var require_configurations = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports2.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

var require_partitions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports2, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {}
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
  }
});

var require_partition = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPrefix = exports2.useDefaultPartitionInfo = exports2.setPartitionInfo = exports2.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var selectedPartitionsInfo = partitions_json_1.default;
    var selectedUserAgentPrefix = "";
    var partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports2.partition = partition;
    var setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    exports2.setPartitionInfo = setPartitionInfo;
    var useDefaultPartitionInfo = () => {
      (0, exports2.setPartitionInfo)(partitions_json_1.default, "");
    };
    exports2.useDefaultPartitionInfo = useDefaultPartitionInfo;
    var getUserAgentPrefix = () => selectedUserAgentPrefix;
    exports2.getUserAgentPrefix = getUserAgentPrefix;
  }
});

var require_isIpAddress = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports2.isIpAddress = isIpAddress;
  }
});

var require_debugId = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.debugId = void 0;
    exports2.debugId = "endpoints";
  }
});

var require_toDebugString = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports2.toDebugString = toDebugString;
  }
});

var require_debug = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports2);
    tslib_1.__exportStar(require_toDebugString(), exports2);
  }
});

var require_EndpointError = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports2.EndpointError = EndpointError;
  }
});

var require_EndpointRuleObject2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ErrorRuleObject2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RuleSetObject2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TreeRuleObject2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shared2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_types2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports2);
    tslib_1.__exportStar(require_EndpointRuleObject2(), exports2);
    tslib_1.__exportStar(require_ErrorRuleObject2(), exports2);
    tslib_1.__exportStar(require_RuleSetObject2(), exports2);
    tslib_1.__exportStar(require_TreeRuleObject2(), exports2);
    tslib_1.__exportStar(require_shared2(), exports2);
  }
});

var require_isValidHostLabel = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports2.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports2.isValidHostLabel = isValidHostLabel;
  }
});

var require_isVirtualHostableS3Bucket = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports2.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports2.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

var require_parseArn = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports2.parseArn = parseArn;
  }
});

var require_aws = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports2);
    tslib_1.__exportStar(require_parseArn(), exports2);
    tslib_1.__exportStar(require_partition(), exports2);
  }
});

var require_booleanEquals = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports2.booleanEquals = booleanEquals;
  }
});

var require_getAttrPathList = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttrPathList = void 0;
    var types_1 = require_types2();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports2.getAttrPathList = getAttrPathList;
  }
});

var require_getAttr = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttr = void 0;
    var types_1 = require_types2();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports2.getAttr = getAttr;
  }
});

var require_isSet = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSet = void 0;
    var isSet = (value) => value != null;
    exports2.isSet = isSet;
  }
});

var require_not = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.not = void 0;
    var not = (value) => !value;
    exports2.not = not;
  }
});

var require_abort2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_auth2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpAuthLocation = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "HttpAuthLocation", { enumerable: true, get: function() {
      return types_1.HttpAuthLocation;
    } });
  }
});

var require_blob_types = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/blob/blob-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_client2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_command2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_connection2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/connection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_credentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_crypto2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dns = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports2.HostAddressType || (exports2.HostAddressType = {}));
  }
});

var require_encode2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/encode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoint2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointURLScheme = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "EndpointURLScheme", { enumerable: true, get: function() {
      return types_1.EndpointURLScheme;
    } });
  }
});

var require_eventStream2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_http2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_AnonymousIdentity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_AwsCredentialIdentity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_Identity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_LoginIdentity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TokenIdentity = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports2);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports2);
    tslib_1.__exportStar(require_Identity(), exports2);
    tslib_1.__exportStar(require_LoginIdentity(), exports2);
    tslib_1.__exportStar(require_TokenIdentity(), exports2);
  }
});

var require_logger2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_middleware2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pagination2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_profile2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_request = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_response2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_retry2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_serde2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shapes2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_signature2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_stream2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_token = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/token.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_transfer2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestHandlerProtocol = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "RequestHandlerProtocol", { enumerable: true, get: function() {
      return types_1.RequestHandlerProtocol;
    } });
  }
});

var require_uri2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_util2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_waiter2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs20 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort2(), exports2);
    tslib_1.__exportStar(require_auth2(), exports2);
    tslib_1.__exportStar(require_blob_types(), exports2);
    tslib_1.__exportStar(require_checksum3(), exports2);
    tslib_1.__exportStar(require_client2(), exports2);
    tslib_1.__exportStar(require_command2(), exports2);
    tslib_1.__exportStar(require_connection2(), exports2);
    tslib_1.__exportStar(require_credentials(), exports2);
    tslib_1.__exportStar(require_crypto2(), exports2);
    tslib_1.__exportStar(require_dns(), exports2);
    tslib_1.__exportStar(require_encode2(), exports2);
    tslib_1.__exportStar(require_endpoint2(), exports2);
    tslib_1.__exportStar(require_eventStream2(), exports2);
    tslib_1.__exportStar(require_http2(), exports2);
    tslib_1.__exportStar(require_identity3(), exports2);
    tslib_1.__exportStar(require_logger2(), exports2);
    tslib_1.__exportStar(require_middleware2(), exports2);
    tslib_1.__exportStar(require_pagination2(), exports2);
    tslib_1.__exportStar(require_profile2(), exports2);
    tslib_1.__exportStar(require_request(), exports2);
    tslib_1.__exportStar(require_response2(), exports2);
    tslib_1.__exportStar(require_retry2(), exports2);
    tslib_1.__exportStar(require_serde2(), exports2);
    tslib_1.__exportStar(require_shapes2(), exports2);
    tslib_1.__exportStar(require_signature2(), exports2);
    tslib_1.__exportStar(require_stream2(), exports2);
    tslib_1.__exportStar(require_token(), exports2);
    tslib_1.__exportStar(require_transfer2(), exports2);
    tslib_1.__exportStar(require_uri2(), exports2);
    tslib_1.__exportStar(require_util2(), exports2);
    tslib_1.__exportStar(require_waiter2(), exports2);
  }
});

var require_parseURL = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseURL = void 0;
    var types_1 = require_dist_cjs20();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports2.parseURL = parseURL;
  }
});

var require_stringEquals = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports2.stringEquals = stringEquals;
  }
});

var require_substring = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports2.substring = substring;
  }
});

var require_uriEncode = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports2.uriEncode = uriEncode;
  }
});

var require_lib = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports2.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports2);
    tslib_1.__exportStar(require_getAttr(), exports2);
    tslib_1.__exportStar(require_isSet(), exports2);
    tslib_1.__exportStar(require_isValidHostLabel(), exports2);
    tslib_1.__exportStar(require_not(), exports2);
    tslib_1.__exportStar(require_parseURL(), exports2);
    tslib_1.__exportStar(require_stringEquals(), exports2);
    tslib_1.__exportStar(require_substring(), exports2);
    tslib_1.__exportStar(require_uriEncode(), exports2);
  }
});

var require_evaluateTemplate = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports2.evaluateTemplate = evaluateTemplate;
  }
});

var require_getReferenceValue = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports2.getReferenceValue = getReferenceValue;
  }
});

var require_evaluateExpression = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateExpression = void 0;
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports2.evaluateExpression = evaluateExpression;
  }
});

var require_callFunction = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports2.callFunction = callFunction;
  }
});

var require_evaluateCondition = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports2.evaluateCondition = evaluateCondition;
  }
});

var require_evaluateConditions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports2.evaluateConditions = evaluateConditions;
  }
});

var require_getEndpointHeaders = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointHeaders = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports2.getEndpointHeaders = getEndpointHeaders;
  }
});

var require_getEndpointProperty = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperty = void 0;
    var types_1 = require_types2();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports2.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports2.getEndpointProperty = getEndpointProperty;
  }
});

var require_getEndpointProperties = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports2.getEndpointProperties = getEndpointProperties;
  }
});

var require_getEndpointUrl = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointUrl = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports2.getEndpointUrl = getEndpointUrl;
  }
});

var require_evaluateEndpointRule = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports2.evaluateEndpointRule = evaluateEndpointRule;
  }
});

var require_evaluateErrorRule = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateErrorRule = void 0;
    var types_1 = require_types2();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports2.evaluateErrorRule = evaluateErrorRule;
  }
});

var require_evaluateTreeRule = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports2.evaluateTreeRule = evaluateTreeRule;
  }
});

var require_evaluateRules = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateRules = void 0;
    var types_1 = require_types2();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports2.evaluateRules = evaluateRules;
  }
});

var require_utils = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports2);
  }
});

var require_resolveEndpoint = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, `${debug_1.debugId} Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, `${debug_1.debugId} Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports2.resolveEndpoint = resolveEndpoint;
  }
});

var require_dist_cjs21 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports2);
    tslib_1.__exportStar(require_isIpAddress(), exports2);
    tslib_1.__exportStar(require_resolveEndpoint(), exports2);
    tslib_1.__exportStar(require_types2(), exports2);
  }
});

var require_constants2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UA_ESCAPE_CHAR = exports2.UA_VALUE_ESCAPE_REGEX = exports2.UA_NAME_ESCAPE_REGEX = exports2.UA_NAME_SEPARATOR = exports2.SPACE = exports2.X_AMZ_USER_AGENT = exports2.USER_AGENT = void 0;
    exports2.USER_AGENT = "user-agent";
    exports2.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports2.SPACE = " ";
    exports2.UA_NAME_SEPARATOR = "/";
    exports2.UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    exports2.UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    exports2.UA_ESCAPE_CHAR = "-";
  }
});

var require_user_agent_middleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var protocol_http_1 = require_dist_cjs2();
    var constants_1 = require_constants2();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = (userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(constants_1.UA_NAME_SEPARATOR).map((part) => part.replace(constants_1.UA_NAME_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR)).join(constants_1.UA_NAME_SEPARATOR);
      const version2 = (_a = userAgentPair[1]) === null || _a === void 0 ? void 0 : _a.replace(constants_1.UA_VALUE_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(constants_1.UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    exports2.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.userAgentMiddleware)(config), exports2.getUserAgentMiddlewareOptions);
      }
    });
    exports2.getUserAgentPlugin = getUserAgentPlugin;
  }
});

var require_dist_cjs22 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports2);
    tslib_1.__exportStar(require_user_agent_middleware(), exports2);
  }
});

var require_booleanSelector = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-config-provider/dist-cjs/booleanSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanSelector = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports2.booleanSelector = booleanSelector;
  }
});

var require_dist_cjs23 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports2);
  }
});

var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = exports2.CONFIG_USE_DUALSTACK_ENDPOINT = exports2.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs23();
    exports2.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports2.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_FIPS_ENDPOINT = exports2.CONFIG_USE_FIPS_ENDPOINT = exports2.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs23();
    exports2.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports2.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports2.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_resolveCustomEndpointsConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs13();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports2.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

var require_getEndpointFromRegion = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports2.getEndpointFromRegion = getEndpointFromRegion;
  }
});

var require_resolveEndpointsConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs13();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

var require_endpointsConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports2);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports2);
  }
});

var require_config2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
    exports2.REGION_ENV_NAME = "AWS_REGION";
    exports2.REGION_INI_NAME = "region";
    exports2.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

var require_isFipsRegion = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports2.isFipsRegion = isFipsRegion;
  }
});

var require_getRealRegion = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports2.getRealRegion = getRealRegion;
  }
});

var require_resolveRegionConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports2.resolveRegionConfig = resolveRegionConfig;
  }
});

var require_regionConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config2(), exports2);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports2);
  }
});

var require_PartitionHash = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RegionHash = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_getHostnameFromVariants = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports2.getHostnameFromVariants = getHostnameFromVariants;
  }
});

var require_getResolvedHostname = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports2.getResolvedHostname = getResolvedHostname;
  }
});

var require_getResolvedPartition = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports2.getResolvedPartition = getResolvedPartition;
  }
});

var require_getResolvedSigningRegion = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports2.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

var require_getRegionInfo = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports2.getRegionInfo = getRegionInfo;
  }
});

var require_regionInfo = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports2);
    tslib_1.__exportStar(require_RegionHash(), exports2);
    tslib_1.__exportStar(require_getRegionInfo(), exports2);
  }
});

var require_dist_cjs24 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports2);
    tslib_1.__exportStar(require_regionConfig(), exports2);
    tslib_1.__exportStar(require_regionInfo(), exports2);
  }
});

var require_EventStreamSerdeConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/EventStreamSerdeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEventStreamSerdeConfig = void 0;
    var resolveEventStreamSerdeConfig = (input) => ({
      ...input,
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    });
    exports2.resolveEventStreamSerdeConfig = resolveEventStreamSerdeConfig;
  }
});

var require_dist_cjs25 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamSerdeConfig(), exports2);
  }
});

var require_dist_cjs26 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.contentLengthMiddleware = contentLengthMiddleware;
    exports2.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
      }
    });
    exports2.getContentLengthPlugin = getContentLengthPlugin;
  }
});

var require_s3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArnBucketName = exports2.isDnsCompatibleBucketName = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = exports2.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports2.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports2.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports2.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports2.DOT_PATTERN = /\./;
    exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports2.isArnBucketName = isArnBucketName;
  }
});

var require_service_customizations = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports2);
  }
});

var require_createConfigValueProvider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports2.createConfigValueProvider = createConfigValueProvider;
  }
});

var require_getEndpointFromInstructions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveParams = exports2.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports2.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports2.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports2.resolveParams = resolveParams;
  }
});

var require_dist_cjs27 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports2.parseQueryString = parseQueryString;
  }
});

var require_dist_cjs28 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/url-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs27();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports2.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports2.parseUrl = parseUrl;
  }
});

var require_toEndpointV1 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs28();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports2.toEndpointV1 = toEndpointV1;
  }
});

var require_adaptors = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports2);
    tslib_1.__exportStar(require_toEndpointV1(), exports2);
  }
});

var require_endpointMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports2.endpointMiddleware = endpointMiddleware;
  }
});

var require_deserializerMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
        }
        throw error;
      }
    };
    exports2.deserializerMiddleware = deserializerMiddleware;
  }
});

var require_serializerMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/serializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports2.serializerMiddleware = serializerMiddleware;
  }
});

var require_serdePlugin = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/serdePlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports2.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports2.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports2.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports2.serializerMiddlewareOption);
        }
      };
    }
    exports2.getSerdePlugin = getSerdePlugin;
  }
});

var require_dist_cjs29 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
    tslib_1.__exportStar(require_serdePlugin(), exports2);
    tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  }
});

var require_getEndpointPlugin = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointPlugin = exports2.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs29();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports2.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports2.endpointMiddlewareOptions);
      }
    });
    exports2.getEndpointPlugin = getEndpointPlugin;
  }
});

var require_resolveEndpointConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs13();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports2.resolveEndpointConfig = resolveEndpointConfig;
  }
});

var require_types3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs30 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports2);
    tslib_1.__exportStar(require_endpointMiddleware(), exports2);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports2);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports2);
    tslib_1.__exportStar(require_types3(), exports2);
  }
});

var require_config3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = exports2.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports2.RETRY_MODES || (exports2.RETRY_MODES = {}));
    exports2.DEFAULT_MAX_ATTEMPTS = 3;
    exports2.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

var require_constants3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/service-error-classification/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports2.TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

var require_dist_cjs31 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isServerError = exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants3();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports2.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports2.isServerError = isServerError;
  }
});

var require_DefaultRateLimiter = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/DefaultRateLimiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs31();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports2.DefaultRateLimiter = DefaultRateLimiter;
  }
});

var require_constants4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REQUEST_HEADER = exports2.INVOCATION_ID_HEADER = exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports2.DEFAULT_RETRY_DELAY_BASE = 100;
    exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports2.THROTTLING_RETRY_DELAY_BASE = 500;
    exports2.INITIAL_RETRY_TOKENS = 500;
    exports2.RETRY_COST = 5;
    exports2.TIMEOUT_RETRY_COST = 10;
    exports2.NO_RETRY_INCREMENT = 1;
    exports2.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports2.REQUEST_HEADER = "amz-sdk-request";
  }
});

var require_defaultRetryBackoffStrategy = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports2.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

var require_defaultRetryToken = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/defaultRetryToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDefaultRetryToken = void 0;
    var constants_1 = require_constants4();
    var createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(constants_1.MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
    exports2.createDefaultRetryToken = createDefaultRetryToken;
  }
});

var require_StandardRetryStrategy = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var config_1 = require_config3();
    var constants_1 = require_constants4();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.capacity = constants_1.INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return (0, defaultRetryToken_1.createDefaultRetryToken)({
          retryDelay: constants_1.DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return (0, defaultRetryToken_1.createDefaultRetryToken)({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        var _a;
        this.capacity = Math.max(constants_1.INITIAL_RETRY_TOKENS, this.capacity + ((_a = token.getRetryCost()) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? constants_1.TIMEOUT_RETRY_COST : constants_1.RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
  }
});

var require_AdaptiveRetryStrategy = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config3();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

var require_ConfiguredRetryStrategy = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/ConfiguredRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConfiguredRetryStrategy = void 0;
    var constants_1 = require_constants4();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var ConfiguredRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttempts, computeNextBackoffDelay = constants_1.DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    exports2.ConfiguredRetryStrategy = ConfiguredRetryStrategy;
  }
});

var require_types4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs32 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports2);
    tslib_1.__exportStar(require_ConfiguredRetryStrategy(), exports2);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports2);
    tslib_1.__exportStar(require_config3(), exports2);
    tslib_1.__exportStar(require_constants4(), exports2);
    tslib_1.__exportStar(require_types4(), exports2);
  }
});

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

var regex_default;
var init_regex = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

var v3, v3_default;
var init_v3 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

var v5, v5_default;
var init_v5 = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

var nil_default;
var init_nil = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

var require_defaultRetryQuota = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs32();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports2.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

var require_delayDecider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs32();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports2.defaultDelayDecider = defaultDelayDecider;
  }
});

var require_retryDecider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs31();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports2.defaultRetryDecider = defaultRetryDecider;
  }
});

var require_util3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports2.asSdkError = asSdkError;
  }
});

var require_StandardRetryStrategy2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs31();
    var util_retry_1 = require_dist_cjs32();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util3();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

var require_AdaptiveRetryStrategy2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs32();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

var require_configurations2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs13();
    var util_retry_1 = require_dist_cjs32();
    exports2.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports2.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports2.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports2.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports2.resolveRetryConfig = resolveRetryConfig;
    exports2.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports2.CONFIG_RETRY_MODE = "retry_mode";
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

var require_omitRetryHeadersMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOmitRetryHeadersPlugin = exports2.omitRetryHeadersMiddlewareOptions = exports2.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var util_retry_1 = require_dist_cjs32();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports2.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports2.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.omitRetryHeadersMiddleware)(), exports2.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports2.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

var require_retryMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/retryMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryAfterHint = exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs31();
    var util_retry_1 = require_dist_cjs32();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util3();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports2.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetryErrorInfo = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports2.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports2.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.retryMiddleware)(options), exports2.retryMiddlewareOptions);
      }
    });
    exports2.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports2.getRetryAfterHint = getRetryAfterHint;
  }
});

var require_dist_cjs33 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_configurations2(), exports2);
    tslib_1.__exportStar(require_delayDecider(), exports2);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports2);
    tslib_1.__exportStar(require_retryDecider(), exports2);
    tslib_1.__exportStar(require_retryMiddleware(), exports2);
  }
});

var require_NoOpLogger = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/NoOpLogger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports2.NoOpLogger = NoOpLogger;
  }
});

var require_MiddlewareStack = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-stack/dist-cjs/MiddlewareStack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports2.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports2.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports2.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

var require_dist_cjs34 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports2);
  }
});

var require_client3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var middleware_stack_1 = require_dist_cjs34();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports2.Client = Client;
  }
});

var require_fromBase64 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs15();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports2.fromBase64 = fromBase64;
  }
});

var require_toBase64 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs15();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports2.toBase64 = toBase64;
  }
});

var require_dist_cjs35 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-base64/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports2);
    tslib_1.__exportStar(require_toBase64(), exports2);
  }
});

var require_transforms = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/blob/transforms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformFromString = exports2.transformToString = void 0;
    var util_base64_1 = require_dist_cjs35();
    var util_utf8_1 = require_dist_cjs16();
    var Uint8ArrayBlobAdapter_1 = require_Uint8ArrayBlobAdapter();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, util_base64_1.toBase64)(payload);
      }
      return (0, util_utf8_1.toUtf8)(payload);
    }
    exports2.transformToString = transformToString;
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_base64_1.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_utf8_1.fromUtf8)(str));
    }
    exports2.transformFromString = transformFromString;
  }
});

var require_Uint8ArrayBlobAdapter = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/blob/Uint8ArrayBlobAdapter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Uint8ArrayBlobAdapter = void 0;
    var transforms_1 = require_transforms();
    var Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return (0, transforms_1.transformFromString)(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return (0, transforms_1.transformToString)(this, encoding);
      }
    };
    exports2.Uint8ArrayBlobAdapter = Uint8ArrayBlobAdapter;
  }
});

var require_getAwsChunkedEncodingStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports2.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;
  }
});

var require_dist_cjs36 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs17();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports2.buildQueryString = buildQueryString;
  }
});

var require_constants5 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

var require_get_transformed_headers = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/get-transformed-headers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports2.getTransformedHeaders = getTransformedHeaders;
  }
});

var require_set_connection_timeout = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/set-connection-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs);
      request.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    };
    exports2.setConnectionTimeout = setConnectionTimeout;
  }
});

var require_set_socket_keep_alive = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/set-socket-keep-alive.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketKeepAlive = void 0;
    var setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    };
    exports2.setSocketKeepAlive = setSocketKeepAlive;
  }
});

var require_set_socket_timeout = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/set-socket-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports2.setSocketTimeout = setSocketTimeout;
  }
});

var require_write_request_body = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/write-request-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeRequestBody = void 0;
    var stream_1 = require("stream");
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      var _a;
      const headers = (_a = request.headers) !== null && _a !== void 0 ? _a : {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let hasError = false;
      if (expect === "100-continue") {
        await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              clearTimeout(timeoutId);
              resolve();
            });
            httpRequest.on("error", () => {
              hasError = true;
              clearTimeout(timeoutId);
              resolve();
            });
          })
        ]);
      }
      if (!hasError) {
        writeBody(httpRequest, request.body);
      }
    }
    exports2.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

var require_node_http_handler = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttpHandler = exports2.DEFAULT_REQUEST_TIMEOUT = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs36();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants5();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_keep_alive_1 = require_set_socket_keep_alive();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    exports2.DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout !== null && requestTimeout !== void 0 ? requestTimeout : socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          var _a, _b;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
            auth
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.requestTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            (0, set_socket_keep_alive_1.setSocketKeepAlive)(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            });
          }
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, this.config.requestTimeout).catch(_reject);
        });
      }
    };
    exports2.NodeHttpHandler = NodeHttpHandler;
  }
});

var require_node_http2_connection_pool = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2ConnectionPool = void 0;
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions !== null && sessions !== void 0 ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    exports2.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;
  }
});

var require_node_http2_connection_manager = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-manager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2ConnectionManager = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http2_1 = tslib_1.__importDefault(require("http2"));
    var node_http2_connection_pool_1 = require_node_http2_connection_pool();
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = http2_1.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
            }
          });
        }
        session.unref();
        const destroySessionCb = () => {
          session.destroy();
          this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0 ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    exports2.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;
  }
});

var require_node_http2_handler = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http2-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs36();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var node_http2_connection_manager_1 = require_node_http2_connection_manager();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a, _b, _c;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_c = this.config) === null || _c === void 0 ? void 0 : _c.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, requestTimeout);
        });
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    exports2.NodeHttp2Handler = NodeHttp2Handler;
  }
});

var require_collector = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/collector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports2.Collector = Collector;
  }
});

var require_stream_collector = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports2.streamCollector = streamCollector;
  }
});

var require_dist_cjs37 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports2);
    tslib_1.__exportStar(require_node_http2_handler(), exports2);
    tslib_1.__exportStar(require_stream_collector(), exports2);
  }
});

var require_sdk_stream_mixin = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs37();
    var util_buffer_from_1 = require_dist_cjs15();
    var stream_1 = require("stream");
    var util_1 = require("util");
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new util_1.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports2.sdkStreamMixin = sdkStreamMixin;
  }
});

var require_dist_cjs38 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Uint8ArrayBlobAdapter(), exports2);
    tslib_1.__exportStar(require_getAwsChunkedEncodingStream(), exports2);
    tslib_1.__exportStar(require_sdk_stream_mixin(), exports2);
  }
});

var require_collect_stream_body = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/collect-stream-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.collectBody = void 0;
    var util_stream_1 = require_dist_cjs38();
    var collectBody = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return util_stream_1.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
    exports2.collectBody = collectBody;
  }
});

var require_command3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Command = void 0;
    var middleware_stack_1 = require_dist_cjs34();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports2.Command = Command;
  }
});

var require_constants6 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SENSITIVE_STRING = void 0;
    exports2.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

var require_create_aggregated_client = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/create-aggregated-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createAggregatedClient = void 0;
    var createAggregatedClient = (commands, Client) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
      }
    };
    exports2.createAggregatedClient = createAggregatedClient;
  }
});

var require_parse_utils = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/parse-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.logger = exports2.strictParseByte = exports2.strictParseShort = exports2.strictParseInt32 = exports2.strictParseInt = exports2.strictParseLong = exports2.limitedParseFloat32 = exports2.limitedParseFloat = exports2.handleFloat = exports2.limitedParseDouble = exports2.strictParseFloat32 = exports2.strictParseFloat = exports2.strictParseDouble = exports2.expectUnion = exports2.expectString = exports2.expectObject = exports2.expectNonNull = exports2.expectByte = exports2.expectShort = exports2.expectInt32 = exports2.expectInt = exports2.expectLong = exports2.expectFloat32 = exports2.expectNumber = exports2.expectBoolean = exports2.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports2.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports2.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports2.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports2.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports2.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports2.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports2.expectLong = expectLong;
    exports2.expectInt = exports2.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports2.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports2.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports2.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports2.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports2.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports2.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports2.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports2.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports2.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports2.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectNumber)(parseNumber(value));
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.strictParseDouble = strictParseDouble;
    exports2.strictParseFloat = exports2.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectFloat32)(parseNumber(value));
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.limitedParseDouble = limitedParseDouble;
    exports2.handleFloat = exports2.limitedParseDouble;
    exports2.limitedParseFloat = exports2.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectLong)(parseNumber(value));
      }
      return (0, exports2.expectLong)(value);
    };
    exports2.strictParseLong = strictParseLong;
    exports2.strictParseInt = exports2.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectInt32)(parseNumber(value));
      }
      return (0, exports2.expectInt32)(value);
    };
    exports2.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectShort)(parseNumber(value));
      }
      return (0, exports2.expectShort)(value);
    };
    exports2.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectByte)(parseNumber(value));
      }
      return (0, exports2.expectByte)(value);
    };
    exports2.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports2.logger = {
      warn: console.warn
    };
  }
});

var require_date_utils = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/date-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEpochTimestamp = exports2.parseRfc7231DateTime = exports2.parseRfc3339DateTimeWithOffset = exports2.parseRfc3339DateTime = exports2.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports2.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports2.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports2.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports2.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports2.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

var require_exceptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateServiceException = exports2.ServiceException = void 0;
    var ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports2.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports2.decorateServiceException = decorateServiceException;
  }
});

var require_default_error_handler = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/default-error-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withBaseException = exports2.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports2.throwDefaultError = throwDefaultError;
    var withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        (0, exports2.throwDefaultError)({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    exports2.withBaseException = withBaseException;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

var require_defaults_mode = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/defaults-mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports2.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

var require_emitWarningIfUnsupportedVersion = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports2.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

var require_checksum4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extensions/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveChecksumRuntimeConfig = exports2.getChecksumConfiguration = exports2.AlgorithmId = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "AlgorithmId", { enumerable: true, get: function() {
      return types_1.AlgorithmId;
    } });
    var getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => types_1.AlgorithmId.SHA256,
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => types_1.AlgorithmId.MD5,
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    exports2.getChecksumConfiguration = getChecksumConfiguration;
    var resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
    exports2.resolveChecksumRuntimeConfig = resolveChecksumRuntimeConfig;
  }
});

var require_defaultExtensionConfiguration2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extensions/defaultExtensionConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultRuntimeConfig = exports2.getDefaultClientConfiguration = exports2.getDefaultExtensionConfiguration = void 0;
    var checksum_1 = require_checksum4();
    var getDefaultExtensionConfiguration = (runtimeConfig) => {
      return {
        ...(0, checksum_1.getChecksumConfiguration)(runtimeConfig)
      };
    };
    exports2.getDefaultExtensionConfiguration = getDefaultExtensionConfiguration;
    exports2.getDefaultClientConfiguration = exports2.getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = (config) => {
      return {
        ...(0, checksum_1.resolveChecksumRuntimeConfig)(config)
      };
    };
    exports2.resolveDefaultRuntimeConfig = resolveDefaultRuntimeConfig;
  }
});

var require_extensions2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extensions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultExtensionConfiguration2(), exports2);
  }
});

var require_extended_encode_uri_component = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

var require_get_array_if_single_item = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/get-array-if-single-item.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports2.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

var require_get_value_from_text_node = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/get-value-from-text-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports2.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports2.getValueFromTextNode = getValueFromTextNode;
  }
});

var require_lazy_json = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/lazy-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyJsonString = exports2.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports2.StringWrapper = StringWrapper;
    exports2.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports2.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports2.StringWrapper, String);
    var LazyJsonString = class _LazyJsonString extends exports2.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof _LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new _LazyJsonString(object);
        }
        return new _LazyJsonString(JSON.stringify(object));
      }
    };
    exports2.LazyJsonString = LazyJsonString;
  }
});

var require_object_mapping = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/object-mapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.take = exports2.convertMap = exports2.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    exports2.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports2.convertMap = convertMap;
    var take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    exports2.take = take;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    var applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    var nonNullish = (_) => _ != null;
    var pass = (_) => _;
  }
});

var require_resolve_path = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/resolve-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports2.resolvedPath = resolvedPath;
  }
});

var require_ser_utils = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/ser-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports2.serializeFloat = serializeFloat;
  }
});

var require_serde_json = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/serde-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2._json = void 0;
    var _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = (0, exports2._json)(obj[key]);
        }
        return target;
      }
      return obj;
    };
    exports2._json = _json;
  }
});

var require_split_every = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/split-every.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports2.splitEvery = splitEvery;
  }
});

var require_dist_cjs39 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports2);
    tslib_1.__exportStar(require_client3(), exports2);
    tslib_1.__exportStar(require_collect_stream_body(), exports2);
    tslib_1.__exportStar(require_command3(), exports2);
    tslib_1.__exportStar(require_constants6(), exports2);
    tslib_1.__exportStar(require_create_aggregated_client(), exports2);
    tslib_1.__exportStar(require_date_utils(), exports2);
    tslib_1.__exportStar(require_default_error_handler(), exports2);
    tslib_1.__exportStar(require_defaults_mode(), exports2);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports2);
    tslib_1.__exportStar(require_extensions2(), exports2);
    tslib_1.__exportStar(require_exceptions(), exports2);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
    tslib_1.__exportStar(require_lazy_json(), exports2);
    tslib_1.__exportStar(require_object_mapping(), exports2);
    tslib_1.__exportStar(require_parse_utils(), exports2);
    tslib_1.__exportStar(require_resolve_path(), exports2);
    tslib_1.__exportStar(require_ser_utils(), exports2);
    tslib_1.__exportStar(require_serde_json(), exports2);
    tslib_1.__exportStar(require_split_every(), exports2);
  }
});

var require_EndpointParameters = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        forcePathStyle: options.forcePathStyle ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-s3",
      description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
        test: "yarn test:unit",
        "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js",
        "test:unit": "ts-mocha test/**/*.spec.ts"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha1-browser": "3.0.0",
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.405.0",
        "@aws-sdk/credential-provider-node": "3.405.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.405.0",
        "@aws-sdk/middleware-expect-continue": "3.398.0",
        "@aws-sdk/middleware-flexible-checksums": "3.400.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-location-constraint": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-sdk-s3": "3.398.0",
        "@aws-sdk/middleware-signing": "3.398.0",
        "@aws-sdk/middleware-ssec": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/signature-v4-multi-region": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@aws-sdk/xml-builder": "3.310.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/eventstream-serde-browser": "^2.0.5",
        "@smithy/eventstream-serde-config-resolver": "^2.0.5",
        "@smithy/eventstream-serde-node": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-blob-browser": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/hash-stream-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/md5-js": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-stream": "^2.0.5",
        "@smithy/util-utf8": "^2.0.0",
        "@smithy/util-waiter": "^2.0.5",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/chai": "^4.2.11",
        "@types/mocha": "^8.0.4",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-s3"
      }
    };
  }
});

var require_dist_cjs40 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports2.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

var require_EndpointParameters2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/credential-provider-node": "3.405.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-sdk-sts": "3.398.0",
        "@aws-sdk/middleware-signing": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

var require_STSServiceException = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var STSServiceException = class _STSServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
    exports2.STSServiceException = STSServiceException;
  }
});

var require_models_0 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenResponseFilterSensitiveLog = exports2.GetFederationTokenResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports2.AssumeRoleResponseFilterSensitiveLog = exports2.CredentialsFilterSensitiveLog = exports2.InvalidAuthorizationMessageException = exports2.IDPCommunicationErrorException = exports2.InvalidIdentityTokenException = exports2.IDPRejectedClaimException = exports2.RegionDisabledException = exports2.PackedPolicyTooLargeException = exports2.MalformedPolicyDocumentException = exports2.ExpiredTokenException = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    exports2.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    exports2.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class _RegionDisabledException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    exports2.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    exports2.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    exports2.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    exports2.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    exports2.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

var require_util4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports2.getValue = function(v) {
      if (exports2.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

var require_validator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util4();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

var require_OptionsBuilder = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions;
  }
});

var require_xmlNode = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

var require_DocTypeReader = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    var util = require_util4();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i))
              i += 8;
            else if (hasBody && isAttlist(xmlData, i))
              i += 8;
            else if (hasBody && isNotation(xmlData, i))
              i += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

var require_strnum = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/strnum/strnum.js"(exports2, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

var require_OrderedObjParser = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util4();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

var require_node2json = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports2.prettify = prettify;
  }
});

var require_XMLParser = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

var require_orderedJs2Xml = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

var require_json2xml = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

var require_fxp = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

var require_Aws_query = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.de_GetSessionTokenCommand = exports2.de_GetFederationTokenCommand = exports2.de_GetCallerIdentityCommand = exports2.de_GetAccessKeyInfoCommand = exports2.de_DecodeAuthorizationMessageCommand = exports2.de_AssumeRoleWithWebIdentityCommand = exports2.de_AssumeRoleWithSAMLCommand = exports2.de_AssumeRoleCommand = exports2.se_GetSessionTokenCommand = exports2.se_GetFederationTokenCommand = exports2.se_GetCallerIdentityCommand = exports2.se_GetAccessKeyInfoCommand = exports2.se_DecodeAuthorizationMessageCommand = exports2.se_AssumeRoleWithWebIdentityCommand = exports2.se_AssumeRoleWithSAMLCommand = exports2.se_AssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs39();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_0();
    var STSServiceException_1 = require_STSServiceException();
    var se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AssumeRoleCommand = se_AssumeRoleCommand;
    var se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
    var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AssumeRoleWithWebIdentityCommand = se_AssumeRoleWithWebIdentityCommand;
    var se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DecodeAuthorizationMessageCommand = se_DecodeAuthorizationMessageCommand;
    var se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
    var se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
    var se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
    var se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
    var de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AssumeRoleCommand = de_AssumeRoleCommand;
    var de_AssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
    var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AssumeRoleWithWebIdentityCommand = de_AssumeRoleWithWebIdentityCommand;
    var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DecodeAuthorizationMessageCommand = de_DecodeAuthorizationMessageCommand;
    var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
    var de_GetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
    var de_GetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
    var de_GetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
    var de_GetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssumeRoleRequest = (input, context) => {
      var _a, _b, _c, _d;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
        if (((_c = input.TransitiveTagKeys) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      if (input.ProvidedContexts != null) {
        const memberEntries = se_ProvidedContextsListType(input.ProvidedContexts, context);
        if (((_d = input.ProvidedContexts) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_AssumeRoleWithSAMLRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var se_GetFederationTokenRequest = (input, context) => {
      var _a, _b;
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input.ProviderArn != null) {
        entries["ProviderArn"] = input.ProviderArn;
      }
      if (input.ContextAssertion != null) {
        entries["ContextAssertion"] = input.ContextAssertion;
      }
      return entries;
    };
    var se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_Credentials = (output, context) => {
      const contents = {};
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_FederatedUser = (output, context) => {
      const contents = {};
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      return contents;
    };
    var de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(STSServiceException_1.STSServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      var _a;
      if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

var require_AssumeRoleCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class _AssumeRoleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
      }
    };
    exports2.AssumeRoleCommand = AssumeRoleCommand;
  }
});

var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithWebIdentityCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

var require_defaultStsRoleAssumers = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

var require_fromEnv = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs9();
    exports2.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports2.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports2.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports2.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const sessionToken = process.env[exports2.ENV_SESSION];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports2.fromEnv = fromEnv;
  }
});

var require_dist_cjs41 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports2);
  }
});

var require_getHomeDir = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var process_1 = require("process");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process_1.geteuid) {
        return `${(0, process_1.geteuid)()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports2.getHomeDir = getHomeDir;
  }
});

var require_getProfileName = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileName = exports2.DEFAULT_PROFILE = exports2.ENV_PROFILE = void 0;
    exports2.ENV_PROFILE = "AWS_PROFILE";
    exports2.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports2.ENV_PROFILE] || exports2.DEFAULT_PROFILE;
    exports2.getProfileName = getProfileName;
  }
});

var require_getSSOTokenFilepath = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports2.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

var require_getSSOTokenFromFile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports2.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

var require_getConfigFilepath = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getConfigFilepath = exports2.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports2.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports2.getConfigFilepath = getConfigFilepath;
  }
});

var require_getCredentialsFilepath = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCredentialsFilepath = exports2.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports2.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports2.getCredentialsFilepath = getCredentialsFilepath;
  }
});

var require_getProfileData = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports2.getProfileData = getProfileData;
  }
});

var require_parseIni = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports2.parseIni = parseIni;
  }
});

var require_slurpFile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports2.slurpFile = slurpFile;
  }
});

var require_loadSharedConfigFiles = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

var require_getSsoSessionData = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports2.getSsoSessionData = getSsoSessionData;
  }
});

var require_loadSsoSessionData = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports2.loadSsoSessionData = loadSsoSessionData;
  }
});

var require_mergeConfigFiles = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeConfigFiles = void 0;
    var mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
    exports2.mergeConfigFiles = mergeConfigFiles;
  }
});

var require_parseKnownFiles = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var mergeConfigFiles_1 = require_mergeConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return (0, mergeConfigFiles_1.mergeConfigFiles)(parsedFiles.configFile, parsedFiles.credentialsFile);
    };
    exports2.parseKnownFiles = parseKnownFiles;
  }
});

var require_types5 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs42 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports2);
    tslib_1.__exportStar(require_getProfileName(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports2);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports2);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports2);
    tslib_1.__exportStar(require_parseKnownFiles(), exports2);
    tslib_1.__exportStar(require_types5(), exports2);
  }
});

var require_httpRequest2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs9();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports2.httpRequest = httpRequest;
  }
});

var require_ImdsCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports2.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports2.fromImdsCredentials = fromImdsCredentials;
  }
});

var require_RemoteProviderInit = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
    exports2.DEFAULT_TIMEOUT = 1e3;
    exports2.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports2.providerConfigFromInit = providerConfigFromInit;
  }
});

var require_retry3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports2.retry = retry;
  }
});

var require_fromContainerMetadata = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs9();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry3();
    exports2.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports2.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports2.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports2.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports2.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports2.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports2.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports2.ENV_CMDS_RELATIVE_URI} or ${exports2.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

var require_fromEnv2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs9();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports2.fromEnv = fromEnv;
  }
});

var require_fromSharedConfigFiles = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs9();
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports2.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

var require_fromStatic2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs9();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports2.fromStatic = fromStatic;
  }
});

var require_configLoader = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/configLoader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs9();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports2.loadConfig = loadConfig;
  }
});

var require_dist_cjs43 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports2);
  }
});

var require_Endpoint = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports2.Endpoint || (exports2.Endpoint = {}));
  }
});

var require_EndpointConfigOptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_NAME = exports2.ENV_ENDPOINT_NAME = void 0;
    exports2.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports2.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports2.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

var require_EndpointMode = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports2.EndpointMode || (exports2.EndpointMode = {}));
  }
});

var require_EndpointModeConfigOptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_MODE_NAME = exports2.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports2.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports2.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

var require_getInstanceMetadataEndpoint = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs43();
    var url_parser_1 = require_dist_cjs28();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports2.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports2.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

var require_staticStabilityProvider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports2.staticStabilityProvider = staticStabilityProvider;
  }
});

var require_fromInstanceMetadata = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs9();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry3();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports2.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

var require_types6 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs44 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = exports2.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
    tslib_1.__exportStar(require_types6(), exports2);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports2, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports2, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

var require_resolveCredentialSource = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs41();
    var credential_provider_imds_1 = require_dist_cjs44();
    var property_provider_1 = require_dist_cjs9();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports2.resolveCredentialSource = resolveCredentialSource;
  }
});

var require_resolveAssumeRoleCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAssumeRoleCredentials = exports2.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs9();
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports2.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports2.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

var require_getValidatedProcessCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports2.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

var require_resolveProcessCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs9();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

var require_fromProcess = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports2.fromProcess = fromProcess;
  }
});

var require_dist_cjs45 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports2);
  }
});

var require_resolveProcessCredentials2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = exports2.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs45();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports2.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

var require_isSsoProfile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports2.isSsoProfile = isSsoProfile;
  }
});

var require_EndpointParameters3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

var require_is_crt_available = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports2.isCrtAvailable = isCrtAvailable;
  }
});

var require_dist_cjs46 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultUserAgent = exports2.UA_APP_ID_INI_NAME = exports2.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs43();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports2.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports2.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.0"],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports2.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports2.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports2.defaultUserAgent = defaultUserAgent;
  }
});

var require_dist_cjs47 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/hash-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs15();
    var util_utf8_1 = require_dist_cjs16();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports2.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

var require_calculateBodyLength = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports2.calculateBodyLength = calculateBodyLength;
  }
});

var require_dist_cjs48 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports2);
  }
});

var require_ruleset = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs28();
    var util_base64_1 = require_dist_cjs35();
    var util_utf8_1 = require_dist_cjs16();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      extensions: (config == null ? void 0 : config.extensions) ?? [],
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "SSO",
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_constants7 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IMDS_REGION_PATH = exports2.DEFAULTS_MODE_OPTIONS = exports2.ENV_IMDS_DISABLED = exports2.AWS_DEFAULT_REGION_ENV = exports2.AWS_REGION_ENV = exports2.AWS_EXECUTION_ENV = void 0;
    exports2.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports2.AWS_REGION_ENV = "AWS_REGION";
    exports2.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports2.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports2.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

var require_defaultsModeConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

var require_resolveDefaultsModeConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs24();
    var credential_provider_imds_1 = require_dist_cjs44();
    var node_config_provider_1 = require_dist_cjs43();
    var property_provider_1 = require_dist_cjs9();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports2.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

var require_dist_cjs49 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports2);
  }
});

var require_runtimeConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var util_user_agent_node_1 = require_dist_cjs46();
    var config_resolver_1 = require_dist_cjs24();
    var hash_node_1 = require_dist_cjs47();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs43();
    var node_http_handler_1 = require_dist_cjs37();
    var util_body_length_node_1 = require_dist_cjs48();
    var util_retry_1 = require_dist_cjs32();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs39();
    var util_defaults_mode_node_1 = require_dist_cjs49();
    var smithy_client_2 = require_dist_cjs39();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_SSOClient = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOClient = exports2.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs4();
    var middleware_logger_1 = require_dist_cjs5();
    var middleware_recursion_detection_1 = require_dist_cjs6();
    var middleware_user_agent_1 = require_dist_cjs22();
    var config_resolver_1 = require_dist_cjs24();
    var middleware_content_length_1 = require_dist_cjs26();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs33();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_6, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOClient = SSOClient;
  }
});

var require_SSOServiceException = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var SSOServiceException = class _SSOServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
    exports2.SSOServiceException = SSOServiceException;
  }
});

var require_models_02 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutRequestFilterSensitiveLog = exports2.ListAccountsRequestFilterSensitiveLog = exports2.ListAccountRolesRequestFilterSensitiveLog = exports2.GetRoleCredentialsResponseFilterSensitiveLog = exports2.RoleCredentialsFilterSensitiveLog = exports2.GetRoleCredentialsRequestFilterSensitiveLog = exports2.UnauthorizedException = exports2.TooManyRequestsException = exports2.ResourceNotFoundException = exports2.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class _InvalidRequestException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class _UnauthorizedException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    exports2.UnauthorizedException = UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports2.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports2.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

var require_Aws_restJson1 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.de_LogoutCommand = exports2.de_ListAccountsCommand = exports2.de_ListAccountRolesCommand = exports2.de_GetRoleCredentialsCommand = exports2.se_LogoutCommand = exports2.se_ListAccountsCommand = exports2.se_ListAccountRolesCommand = exports2.se_GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs39();
    var models_0_1 = require_models_02();
    var SSOServiceException_1 = require_SSOServiceException();
    var se_GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = (0, smithy_client_1.map)({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
    var se_ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.se_LogoutCommand = se_LogoutCommand;
    var de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports2.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
    var de_GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports2.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
    var de_ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports2.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_LogoutCommand = de_LogoutCommand;
    var de_LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(SSOServiceException_1.SSOServiceException);
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

var require_GetRoleCredentialsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRoleCredentialsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(output, context);
      }
    };
    exports2.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

var require_ListAccountRolesCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountRolesCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class _ListAccountRolesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
      }
    };
    exports2.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

var require_ListAccountsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class _ListAccountsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports2.ListAccountsCommand = ListAccountsCommand;
  }
});

var require_LogoutCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class _LogoutCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
      }
    };
    exports2.LogoutCommand = LogoutCommand;
  }
});

var require_SSO = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSO = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var commands = {
      GetRoleCredentialsCommand: GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
      ListAccountRolesCommand: ListAccountRolesCommand_1.ListAccountRolesCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      LogoutCommand: LogoutCommand_1.LogoutCommand
    };
    var SSO = class extends SSOClient_1.SSOClient {
    };
    exports2.SSO = SSO;
    (0, smithy_client_1.createAggregatedClient)(commands, SSO);
  }
});

var require_commands = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports2);
    tslib_1.__exportStar(require_LogoutCommand(), exports2);
  }
});

var require_Interfaces = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ListAccountRolesPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccountRoles = paginateListAccountRoles;
  }
});

var require_ListAccountsPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccounts = paginateListAccounts;
  }
});

var require_pagination3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports2);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports2);
  }
});

var require_models = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports2);
  }
});

var require_dist_cjs50 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOClient(), exports2);
    tslib_1.__exportStar(require_SSO(), exports2);
    tslib_1.__exportStar(require_commands(), exports2);
    tslib_1.__exportStar(require_pagination3(), exports2);
    tslib_1.__exportStar(require_models(), exports2);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports2, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

var require_client_sso_oidc_node = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/bundle/client-sso-oidc-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnsupportedGrantTypeException = exports2.UnauthorizedClientException = exports2.SlowDownException = exports2.SSOOIDCClient = exports2.InvalidScopeException = exports2.InvalidRequestException = exports2.InvalidClientException = exports2.InternalServerException = exports2.ExpiredTokenException = exports2.CreateTokenCommand = exports2.AuthorizationPendingException = exports2.AccessDeniedException = void 0;
    var middleware_host_header_1 = require_dist_cjs4();
    var middleware_logger_1 = require_dist_cjs5();
    var middleware_recursion_detection_1 = require_dist_cjs6();
    var middleware_user_agent_1 = require_dist_cjs22();
    var config_resolver_1 = require_dist_cjs24();
    var middleware_content_length_1 = require_dist_cjs26();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs33();
    var smithy_client_1 = require_dist_cjs39();
    var resolveClientEndpointParameters = (options) => {
      var _a, _b;
      return {
        ...options,
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) !== null && _b !== void 0 ? _b : false,
        defaultSigningName: "awsssooidc"
      };
    };
    var package_default = { version: "3.387.0" };
    var util_user_agent_node_1 = require_dist_cjs46();
    var config_resolver_2 = require_dist_cjs24();
    var hash_node_1 = require_dist_cjs47();
    var middleware_retry_2 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs43();
    var node_http_handler_1 = require_dist_cjs37();
    var util_body_length_node_1 = require_dist_cjs48();
    var util_retry_1 = require_dist_cjs32();
    var smithy_client_2 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs28();
    var util_base64_1 = require_dist_cjs35();
    var util_utf8_1 = require_dist_cjs16();
    var util_endpoints_1 = require_dist_cjs21();
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    var ruleSet = _data;
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      return {
        apiVersion: "2019-06-10",
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _c !== void 0 ? _c : false,
        endpointProvider: (_d = config === null || config === void 0 ? void 0 : config.endpointProvider) !== null && _d !== void 0 ? _d : defaultEndpointResolver,
        logger: (_e = config === null || config === void 0 ? void 0 : config.logger) !== null && _e !== void 0 ? _e : new smithy_client_2.NoOpLogger(),
        serviceId: (_f = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _f !== void 0 ? _f : "SSO OIDC",
        urlParser: (_g = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _g !== void 0 ? _g : url_parser_1.parseUrl,
        utf8Decoder: (_h = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _h !== void 0 ? _h : util_utf8_1.fromUtf8,
        utf8Encoder: (_j = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _j !== void 0 ? _j : util_utf8_1.toUtf8
      };
    };
    var smithy_client_3 = require_dist_cjs39();
    var util_defaults_mode_node_1 = require_dist_cjs49();
    var smithy_client_4 = require_dist_cjs39();
    var getRuntimeConfig2 = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      (0, smithy_client_4.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_3.loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _a !== void 0 ? _a : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_b = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _b !== void 0 ? _b : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        maxAttempts: (_c = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _c !== void 0 ? _c : (0, node_config_provider_1.loadConfig)(middleware_retry_2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_d = config === null || config === void 0 ? void 0 : config.region) !== null && _d !== void 0 ? _d : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_REGION_CONFIG_OPTIONS, config_resolver_2.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_e = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _e !== void 0 ? _e : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_f = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_2.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_g = config === null || config === void 0 ? void 0 : config.sha256) !== null && _g !== void 0 ? _g : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_h = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _h !== void 0 ? _h : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_j = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_k = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _k !== void 0 ? _k : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOOIDCClient = SSOOIDCClient;
    var smithy_client_5 = require_dist_cjs39();
    var middleware_endpoint_2 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_6 = require_dist_cjs39();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_7 = require_dist_cjs39();
    var smithy_client_8 = require_dist_cjs39();
    var SSOOIDCServiceException = class _SSOOIDCServiceException extends smithy_client_8.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
    var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InternalServerException = InternalServerException;
    var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    var se_CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_) => (0, smithy_client_7._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var se_RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientName: [],
        clientType: [],
        scopes: (_) => (0, smithy_client_7._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var se_StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        accessToken: smithy_client_7.expectString,
        expiresIn: smithy_client_7.expectInt32,
        idToken: smithy_client_7.expectString,
        refreshToken: smithy_client_7.expectString,
        tokenType: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        authorizationEndpoint: smithy_client_7.expectString,
        clientId: smithy_client_7.expectString,
        clientIdIssuedAt: smithy_client_7.expectLong,
        clientSecret: smithy_client_7.expectString,
        clientSecretExpiresAt: smithy_client_7.expectLong,
        tokenEndpoint: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        deviceCode: smithy_client_7.expectString,
        expiresIn: smithy_client_7.expectInt32,
        interval: smithy_client_7.expectInt32,
        userCode: smithy_client_7.expectString,
        verificationUri: smithy_client_7.expectString,
        verificationUriComplete: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_7.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBodyString = (streamBody, context) => (0, smithy_client_7.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      var _a;
      const value = await parseBody(errorBody, context);
      value.message = (_a = value.message) !== null && _a !== void 0 ? _a : value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
    var CreateTokenCommand = class _CreateTokenCommand extends smithy_client_6.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_2.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CreateTokenCommand(input, context);
      }
      deserialize(output, context) {
        return de_CreateTokenCommand(output, context);
      }
    };
    exports2.CreateTokenCommand = CreateTokenCommand;
    var middleware_endpoint_3 = require_dist_cjs30();
    var middleware_serde_2 = require_dist_cjs29();
    var smithy_client_9 = require_dist_cjs39();
    var RegisterClientCommand = class _RegisterClientCommand extends smithy_client_9.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_2.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_3.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_RegisterClientCommand(input, context);
      }
      deserialize(output, context) {
        return de_RegisterClientCommand(output, context);
      }
    };
    var middleware_endpoint_4 = require_dist_cjs30();
    var middleware_serde_3 = require_dist_cjs29();
    var smithy_client_10 = require_dist_cjs39();
    var StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends smithy_client_10.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_3.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_4.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_StartDeviceAuthorizationCommand(input, context);
      }
      deserialize(output, context) {
        return de_StartDeviceAuthorizationCommand(output, context);
      }
    };
    var commands = {
      CreateTokenCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var SSOOIDC = class extends SSOOIDCClient {
    };
    (0, smithy_client_5.createAggregatedClient)(commands, SSOOIDC);
  }
});

var require_constants8 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REFRESH_MESSAGE = exports2.EXPIRE_WINDOW_MS = void 0;
    exports2.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports2.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

var require_getSsoOidcClient = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoOidcClient = void 0;
    var client_sso_oidc_node_1 = require_client_sso_oidc_node();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_node_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports2.getSsoOidcClient = getSsoOidcClient;
  }
});

var require_getNewSsoOidcToken = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNewSsoOidcToken = void 0;
    var client_sso_oidc_node_1 = require_client_sso_oidc_node();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_node_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports2.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

var require_validateTokenExpiry = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs9();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenExpiry = validateTokenExpiry;
  }
});

var require_validateTokenKey = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs9();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenKey = validateTokenKey;
  }
});

var require_writeSSOTokenToFile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports2.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

var require_fromSso = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSso = void 0;
    var property_provider_1 = require_dist_cjs9();
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports2.fromSso = fromSso;
  }
});

var require_fromStatic3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs9();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports2.fromStatic = fromStatic;
  }
});

var require_nodeProvider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs9();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports2.nodeProvider = nodeProvider;
  }
});

var require_dist_cjs51 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_client_sso_oidc_node(), exports2);
    tslib_1.__exportStar(require_fromSso(), exports2);
    tslib_1.__exportStar(require_fromStatic3(), exports2);
    tslib_1.__exportStar(require_nodeProvider(), exports2);
  }
});

var require_resolveSSOCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs50();
    var token_providers_1 = require_dist_cjs51();
    var property_provider_1 = require_dist_cjs9();
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports2.resolveSSOCredentials = resolveSSOCredentials;
  }
});

var require_validateSsoProfile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs9();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports2.validateSsoProfile = validateSsoProfile;
  }
});

var require_fromSSO = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs9();
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports2.fromSSO = fromSSO;
  }
});

var require_types7 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs52 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports2);
    tslib_1.__exportStar(require_isSsoProfile(), exports2);
    tslib_1.__exportStar(require_types7(), exports2);
    tslib_1.__exportStar(require_validateSsoProfile(), exports2);
  }
});

var require_resolveSsoCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSsoCredentials = exports2.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs52();
    var credential_provider_sso_2 = require_dist_cjs52();
    Object.defineProperty(exports2, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports2.resolveSsoCredentials = resolveSsoCredentials;
  }
});

var require_resolveStaticCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStaticCredentials = exports2.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports2.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports2.resolveStaticCredentials = resolveStaticCredentials;
  }
});

var require_fromWebToken = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs9();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken;
  }
});

var require_fromTokenFile = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs9();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
    exports2.fromTokenFile = fromTokenFile;
  }
});

var require_dist_cjs53 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports2);
    tslib_1.__exportStar(require_fromWebToken(), exports2);
  }
});

var require_resolveWebIdentityCredentials = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveWebIdentityCredentials = exports2.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs53();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports2.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports2.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

var require_resolveProfileData = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs9();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports2.resolveProfileData = resolveProfileData;
  }
});

var require_fromIni = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports2.fromIni = fromIni;
  }
});

var require_dist_cjs54 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports2);
  }
});

var require_remoteProvider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.remoteProvider = exports2.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs44();
    var property_provider_1 = require_dist_cjs9();
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports2.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports2.remoteProvider = remoteProvider;
  }
});

var require_defaultProvider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs41();
    var credential_provider_ini_1 = require_dist_cjs54();
    var credential_provider_process_1 = require_dist_cjs45();
    var credential_provider_sso_1 = require_dist_cjs52();
    var credential_provider_web_identity_1 = require_dist_cjs53();
    var property_provider_1 = require_dist_cjs9();
    var shared_ini_file_loader_1 = require_dist_cjs42();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports2.defaultProvider = defaultProvider;
  }
});

var require_dist_cjs55 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports2);
  }
});

var require_ruleset2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "tree";
    var e = "stringEquals";
    var f = "sigv4";
    var g = "sts";
    var h = "us-east-1";
    var i = "endpoint";
    var j = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": f, "signingName": g, "signingRegion": h }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: e, [I]: [q, "aws-global"] }], [i]: u, [G]: i };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: c, [I]: [true, { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] }] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], [G]: d, rules: [{ conditions: [{ [H]: e, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: i }, w, { conditions: [{ [H]: e, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, h] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-east-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-2"] }], endpoint: u, [G]: i }, { endpoint: { url: j, properties: { authSchemes: [{ name: f, signingName: g, signingRegion: "{Region}" }] }, headers: v }, [G]: i }] }, { conditions: C, [G]: d, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { [G]: d, rules: [{ conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: i }] }] }, { [G]: d, rules: [{ conditions: [p], [G]: d, rules: [{ conditions: [r], [G]: d, rules: [{ conditions: [x, y], [G]: d, rules: [{ conditions: [z, B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }] }, { conditions: D, [G]: d, rules: [{ conditions: [z], [G]: d, rules: [{ [G]: d, rules: [{ conditions: [{ [H]: e, [I]: ["aws-us-gov", { [H]: l, [I]: [A, "name"] }] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: i }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }] }, { conditions: E, [G]: d, rules: [{ conditions: [B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }] }, { [G]: d, rules: [w, { endpoint: { url: j, properties: v, headers: v }, [G]: i }] }] }] }, { error: "Invalid Configuration: Missing Region", [G]: k }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs28();
    var util_base64_1 = require_dist_cjs35();
    var util_utf8_1 = require_dist_cjs16();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      extensions: (config == null ? void 0 : config.extensions) ?? [],
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "STS",
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var credential_provider_node_1 = require_dist_cjs55();
    var util_user_agent_node_1 = require_dist_cjs46();
    var config_resolver_1 = require_dist_cjs24();
    var hash_node_1 = require_dist_cjs47();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs43();
    var node_http_handler_1 = require_dist_cjs37();
    var util_body_length_node_1 = require_dist_cjs48();
    var util_retry_1 = require_dist_cjs32();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs39();
    var util_defaults_mode_node_1 = require_dist_cjs49();
    var smithy_client_2 = require_dist_cjs39();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_STSClient = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSClient = exports2.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs4();
    var middleware_logger_1 = require_dist_cjs5();
    var middleware_recursion_detection_1 = require_dist_cjs6();
    var middleware_sdk_sts_1 = require_dist_cjs40();
    var middleware_user_agent_1 = require_dist_cjs22();
    var config_resolver_1 = require_dist_cjs24();
    var middleware_content_length_1 = require_dist_cjs26();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs33();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig2();
    var runtimeExtensions_1 = require_runtimeExtensions2();
    var STSClient = class _STSClient extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: _STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.STSClient = STSClient;
  }
});

var require_AssumeRoleWithSAMLCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithSAMLCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

var require_DecodeAuthorizationMessageCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecodeAuthorizationMessageCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports2.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

var require_GetAccessKeyInfoCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccessKeyInfoCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
      }
    };
    exports2.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

var require_GetCallerIdentityCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCallerIdentityCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class _GetCallerIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
      }
    };
    exports2.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

var require_GetFederationTokenCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFederationTokenCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class _GetFederationTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
      }
    };
    exports2.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

var require_GetSessionTokenCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class _GetSessionTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
      }
    };
    exports2.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

var require_STS = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STS = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var commands = {
      AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
      AssumeRoleWithSAMLCommand: AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand: AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand: DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand: GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: GetCallerIdentityCommand_1.GetCallerIdentityCommand,
      GetFederationTokenCommand: GetFederationTokenCommand_1.GetFederationTokenCommand,
      GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand
    };
    var STS = class extends STSClient_1.STSClient {
    };
    exports2.STS = STS;
    (0, smithy_client_1.createAggregatedClient)(commands, STS);
  }
});

var require_commands2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports2);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports2);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports2);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports2);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports2);
  }
});

var require_models2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports2);
  }
});

var require_defaultRoleAssumers = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

var require_dist_cjs56 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STSClient(), exports2);
    tslib_1.__exportStar(require_STS(), exports2);
    tslib_1.__exportStar(require_commands2(), exports2);
    tslib_1.__exportStar(require_models2(), exports2);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports2);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports2, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

var require_NodeDisableMultiregionAccessPointConfigOptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/NodeDisableMultiregionAccessPointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = void 0;
    var util_config_provider_1 = require_dist_cjs23();
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_NodeUseArnRegionConfigOptions = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/NodeUseArnRegionConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_ARN_REGION_CONFIG_OPTIONS = exports2.NODE_USE_ARN_REGION_INI_NAME = exports2.NODE_USE_ARN_REGION_ENV_NAME = void 0;
    var util_config_provider_1 = require_dist_cjs23();
    exports2.NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
    exports2.NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
    exports2.NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.NODE_USE_ARN_REGION_ENV_NAME, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.NODE_USE_ARN_REGION_INI_NAME, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_bucketHostnameUtils = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketHostnameUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateMrapAlias = exports2.validateNoFIPS = exports2.validateNoDualstack = exports2.getArnResources = exports2.validateCustomEndpoint = exports2.validateDNSHostLabel = exports2.validateAccountId = exports2.validateRegionalClient = exports2.validateRegion = exports2.validatePartition = exports2.validateOutpostService = exports2.validateS3Service = exports2.validateService = exports2.validateArnEndpointOptions = exports2.getSuffixForArnEndpoint = exports2.getSuffix = exports2.isDnsCompatibleBucketName = exports2.isBucketNameOptions = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = void 0;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports2.DOT_PATTERN = /\./;
    exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
    var AWS_PARTITION_SUFFIX = "amazonaws.com";
    var isBucketNameOptions = (options) => typeof options.bucketName === "string";
    exports2.isBucketNameOptions = isBucketNameOptions;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var getRegionalSuffix = (hostname) => {
      const parts = hostname.match(exports2.S3_HOSTNAME_PATTERN);
      return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), "")];
    };
    var getSuffix = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
    exports2.getSuffix = getSuffix;
    var getSuffixForArnEndpoint = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
    exports2.getSuffixForArnEndpoint = getSuffixForArnEndpoint;
    var validateArnEndpointOptions = (options) => {
      if (options.pathStyleEndpoint) {
        throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
      }
      if (options.accelerateEndpoint) {
        throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
      }
      if (!options.tlsCompatible) {
        throw new Error("HTTPS is required when bucket is an ARN");
      }
    };
    exports2.validateArnEndpointOptions = validateArnEndpointOptions;
    var validateService = (service) => {
      if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
        throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
      }
    };
    exports2.validateService = validateService;
    var validateS3Service = (service) => {
      if (service !== "s3") {
        throw new Error("Expect 's3' in Accesspoint ARN service component");
      }
    };
    exports2.validateS3Service = validateS3Service;
    var validateOutpostService = (service) => {
      if (service !== "s3-outposts") {
        throw new Error("Expect 's3-posts' in Outpost ARN service component");
      }
    };
    exports2.validateOutpostService = validateOutpostService;
    var validatePartition = (partition, options) => {
      if (partition !== options.clientPartition) {
        throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
      }
    };
    exports2.validatePartition = validatePartition;
    var validateRegion = (region, options) => {
      if (region === "") {
        throw new Error("ARN region is empty");
      }
      if (options.useFipsEndpoint) {
        if (!options.allowFipsRegion) {
          throw new Error("FIPS region is not supported");
        } else if (!isEqualRegions(region, options.clientRegion)) {
          throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);
        }
      }
      if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || "") && !isEqualRegions(region, options.clientSigningRegion || "")) {
        throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
      }
    };
    exports2.validateRegion = validateRegion;
    var validateRegionalClient = (region) => {
      if (["s3-external-1", "aws-global"].includes(region)) {
        throw new Error(`Client region ${region} is not regional`);
      }
    };
    exports2.validateRegionalClient = validateRegionalClient;
    var isEqualRegions = (regionA, regionB) => regionA === regionB;
    var validateAccountId = (accountId) => {
      if (!/[0-9]{12}/.exec(accountId)) {
        throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
      }
    };
    exports2.validateAccountId = validateAccountId;
    var validateDNSHostLabel = (label, options = { tlsCompatible: true }) => {
      if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && exports2.DOT_PATTERN.test(label)) {
        throw new Error(`Invalid DNS label ${label}`);
      }
    };
    exports2.validateDNSHostLabel = validateDNSHostLabel;
    var validateCustomEndpoint = (options) => {
      if (options.isCustomEndpoint) {
        if (options.dualstackEndpoint)
          throw new Error("Dualstack endpoint is not supported with custom endpoint");
        if (options.accelerateEndpoint)
          throw new Error("Accelerate endpoint is not supported with custom endpoint");
      }
    };
    exports2.validateCustomEndpoint = validateCustomEndpoint;
    var getArnResources = (resource) => {
      const delimiter = resource.includes(":") ? ":" : "/";
      const [resourceType, ...rest] = resource.split(delimiter);
      if (resourceType === "accesspoint") {
        if (rest.length !== 1 || rest[0] === "") {
          throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
        }
        return { accesspointName: rest[0] };
      } else if (resourceType === "outpost") {
        if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
          throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);
        }
        const [outpostId, _, accesspointName] = rest;
        return { outpostId, accesspointName };
      } else {
        throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
      }
    };
    exports2.getArnResources = getArnResources;
    var validateNoDualstack = (dualstackEndpoint) => {
      if (dualstackEndpoint)
        throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
    };
    exports2.validateNoDualstack = validateNoDualstack;
    var validateNoFIPS = (useFipsEndpoint) => {
      if (useFipsEndpoint)
        throw new Error(`FIPS region is not supported with Outpost.`);
    };
    exports2.validateNoFIPS = validateNoFIPS;
    var validateMrapAlias = (name) => {
      try {
        name.split(".").forEach((label) => {
          (0, exports2.validateDNSHostLabel)(label);
        });
      } catch (e) {
        throw new Error(`"${name}" is not a DNS compatible name.`);
      }
    };
    exports2.validateMrapAlias = validateMrapAlias;
  }
});

var require_bucketHostname = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bucketHostname = void 0;
    var bucketHostnameUtils_1 = require_bucketHostnameUtils();
    var bucketHostname = (options) => {
      (0, bucketHostnameUtils_1.validateCustomEndpoint)(options);
      return (0, bucketHostnameUtils_1.isBucketNameOptions)(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);
    };
    exports2.bucketHostname = bucketHostname;
    var getEndpointFromBucketName = ({ accelerateEndpoint = false, clientRegion: region, baseHostname, bucketName, dualstackEndpoint = false, fipsEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true, isCustomEndpoint = false }) => {
      const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : (0, bucketHostnameUtils_1.getSuffix)(baseHostname);
      if (pathStyleEndpoint || !(0, bucketHostnameUtils_1.isDnsCompatibleBucketName)(bucketName) || tlsCompatible && bucketHostnameUtils_1.DOT_PATTERN.test(bucketName)) {
        return {
          bucketEndpoint: false,
          hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname
        };
      }
      if (accelerateEndpoint) {
        baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
      } else if (dualstackEndpoint) {
        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
      }
      return {
        bucketEndpoint: true,
        hostname: `${bucketName}.${baseHostname}`
      };
    };
    var getEndpointFromArn = (options) => {
      const { isCustomEndpoint, baseHostname, clientRegion } = options;
      const hostnameSuffix = isCustomEndpoint ? baseHostname : (0, bucketHostnameUtils_1.getSuffixForArnEndpoint)(baseHostname)[1];
      const { pathStyleEndpoint, accelerateEndpoint = false, fipsEndpoint = false, tlsCompatible = true, bucketName, clientPartition = "aws" } = options;
      (0, bucketHostnameUtils_1.validateArnEndpointOptions)({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
      const { service, partition, accountId, region, resource } = bucketName;
      (0, bucketHostnameUtils_1.validateService)(service);
      (0, bucketHostnameUtils_1.validatePartition)(partition, { clientPartition });
      (0, bucketHostnameUtils_1.validateAccountId)(accountId);
      const { accesspointName, outpostId } = (0, bucketHostnameUtils_1.getArnResources)(resource);
      if (service === "s3-object-lambda") {
        return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });
      }
      if (region === "") {
        return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });
      }
      if (outpostId) {
        return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });
      }
      return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });
    };
    var getEndpointFromObjectLambdaArn = ({ dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, useArnRegion, clientRegion, clientSigningRegion = clientRegion, accesspointName, bucketName, hostnameSuffix }) => {
      const { accountId, region, service } = bucketName;
      (0, bucketHostnameUtils_1.validateRegionalClient)(clientRegion);
      (0, bucketHostnameUtils_1.validateRegion)(region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint
      });
      (0, bucketHostnameUtils_1.validateNoDualstack)(dualstackEndpoint);
      const DNSHostLabel = `${accesspointName}-${accountId}`;
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });
      const endpointRegion = useArnRegion ? region : clientRegion;
      const signingRegion = useArnRegion ? region : clientSigningRegion;
      return {
        bucketEndpoint: true,
        hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? "-fips" : ""}.${endpointRegion}.${hostnameSuffix}`,
        signingRegion,
        signingService: service
      };
    };
    var getEndpointFromMRAPArn = ({ disableMultiregionAccessPoints, dualstackEndpoint = false, isCustomEndpoint, mrapAlias, hostnameSuffix }) => {
      if (disableMultiregionAccessPoints === true) {
        throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
      }
      (0, bucketHostnameUtils_1.validateMrapAlias)(mrapAlias);
      (0, bucketHostnameUtils_1.validateNoDualstack)(dualstackEndpoint);
      return {
        bucketEndpoint: true,
        hostname: `${mrapAlias}${isCustomEndpoint ? "" : `.accesspoint.s3-global`}.${hostnameSuffix}`,
        signingRegion: "*"
      };
    };
    var getEndpointFromOutpostArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, outpostId, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix }) => {
      (0, bucketHostnameUtils_1.validateRegionalClient)(clientRegion);
      (0, bucketHostnameUtils_1.validateRegion)(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
      const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });
      const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
      const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
      (0, bucketHostnameUtils_1.validateOutpostService)(bucketName.service);
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(outpostId, { tlsCompatible });
      (0, bucketHostnameUtils_1.validateNoDualstack)(dualstackEndpoint);
      (0, bucketHostnameUtils_1.validateNoFIPS)(fipsEndpoint);
      const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
      return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion,
        signingService: "s3-outposts"
      };
    };
    var getEndpointFromAccessPointArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix }) => {
      (0, bucketHostnameUtils_1.validateRegionalClient)(clientRegion);
      (0, bucketHostnameUtils_1.validateRegion)(bucketName.region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint
      });
      const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(hostnamePrefix, { tlsCompatible });
      const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
      const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
      (0, bucketHostnameUtils_1.validateS3Service)(bucketName.service);
      return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-accesspoint${fipsEndpoint ? "-fips" : ""}${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion
      };
    };
  }
});

var require_bucketEndpointMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketEndpointMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBucketEndpointPlugin = exports2.bucketEndpointMiddlewareOptions = exports2.bucketEndpointMiddleware = void 0;
    var util_arn_parser_1 = require_dist_cjs7();
    var protocol_http_1 = require_dist_cjs2();
    var bucketHostname_1 = require_bucketHostname();
    var bucketEndpointMiddleware = (options) => (next, context) => async (args) => {
      const { Bucket: bucketName } = args.input;
      let replaceBucketInPath = options.bucketEndpoint;
      const request = args.request;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        if (options.bucketEndpoint) {
          request.hostname = bucketName;
        } else if ((0, util_arn_parser_1.validate)(bucketName)) {
          const bucketArn = (0, util_arn_parser_1.parse)(bucketName);
          const clientRegion = await options.region();
          const useDualstackEndpoint = await options.useDualstackEndpoint();
          const useFipsEndpoint = await options.useFipsEndpoint();
          const { partition, signingRegion = clientRegion } = await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint }) || {};
          const useArnRegion = await options.useArnRegion();
          const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = (0, bucketHostname_1.bucketHostname)({
            bucketName: bucketArn,
            baseHostname: request.hostname,
            accelerateEndpoint: options.useAccelerateEndpoint,
            dualstackEndpoint: useDualstackEndpoint,
            fipsEndpoint: useFipsEndpoint,
            pathStyleEndpoint: options.forcePathStyle,
            tlsCompatible: request.protocol === "https:",
            useArnRegion,
            clientPartition: partition,
            clientSigningRegion: signingRegion,
            clientRegion,
            isCustomEndpoint: options.isCustomEndpoint,
            disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints()
          });
          if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
            context["signing_region"] = modifiedSigningRegion;
          }
          if (signingService && signingService !== "s3") {
            context["signing_service"] = signingService;
          }
          request.hostname = hostname;
          replaceBucketInPath = bucketEndpoint;
        } else {
          const clientRegion = await options.region();
          const dualstackEndpoint = await options.useDualstackEndpoint();
          const fipsEndpoint = await options.useFipsEndpoint();
          const { hostname, bucketEndpoint } = (0, bucketHostname_1.bucketHostname)({
            bucketName,
            clientRegion,
            baseHostname: request.hostname,
            accelerateEndpoint: options.useAccelerateEndpoint,
            dualstackEndpoint,
            fipsEndpoint,
            pathStyleEndpoint: options.forcePathStyle,
            tlsCompatible: request.protocol === "https:",
            isCustomEndpoint: options.isCustomEndpoint
          });
          request.hostname = hostname;
          replaceBucketInPath = bucketEndpoint;
        }
        if (replaceBucketInPath) {
          request.path = request.path.replace(/^(\/)?[^\/]+/, "");
          if (request.path === "") {
            request.path = "/";
          }
        }
      }
      return next({ ...args, request });
    };
    exports2.bucketEndpointMiddleware = bucketEndpointMiddleware;
    exports2.bucketEndpointMiddlewareOptions = {
      tags: ["BUCKET_ENDPOINT"],
      name: "bucketEndpointMiddleware",
      relation: "before",
      toMiddleware: "hostHeaderMiddleware",
      override: true
    };
    var getBucketEndpointPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.bucketEndpointMiddleware)(options), exports2.bucketEndpointMiddlewareOptions);
      }
    });
    exports2.getBucketEndpointPlugin = getBucketEndpointPlugin;
  }
});

var require_configurations3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveBucketEndpointConfig = void 0;
    function resolveBucketEndpointConfig(input) {
      const { bucketEndpoint = false, forcePathStyle = false, useAccelerateEndpoint = false, useArnRegion = false, disableMultiregionAccessPoints = false } = input;
      return {
        ...input,
        bucketEndpoint,
        forcePathStyle,
        useAccelerateEndpoint,
        useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion),
        disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function" ? disableMultiregionAccessPoints : () => Promise.resolve(disableMultiregionAccessPoints)
      };
    }
    exports2.resolveBucketEndpointConfig = resolveBucketEndpointConfig;
  }
});

var require_dist_cjs57 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateNoFIPS = exports2.validateNoDualstack = exports2.validateDNSHostLabel = exports2.validateRegion = exports2.validateAccountId = exports2.validatePartition = exports2.validateOutpostService = exports2.getSuffixForArnEndpoint = exports2.getArnResources = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeDisableMultiregionAccessPointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseArnRegionConfigOptions(), exports2);
    tslib_1.__exportStar(require_bucketEndpointMiddleware(), exports2);
    tslib_1.__exportStar(require_bucketHostname(), exports2);
    tslib_1.__exportStar(require_configurations3(), exports2);
    var bucketHostnameUtils_1 = require_bucketHostnameUtils();
    Object.defineProperty(exports2, "getArnResources", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.getArnResources;
    } });
    Object.defineProperty(exports2, "getSuffixForArnEndpoint", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.getSuffixForArnEndpoint;
    } });
    Object.defineProperty(exports2, "validateOutpostService", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateOutpostService;
    } });
    Object.defineProperty(exports2, "validatePartition", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validatePartition;
    } });
    Object.defineProperty(exports2, "validateAccountId", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateAccountId;
    } });
    Object.defineProperty(exports2, "validateRegion", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateRegion;
    } });
    Object.defineProperty(exports2, "validateDNSHostLabel", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateDNSHostLabel;
    } });
    Object.defineProperty(exports2, "validateNoDualstack", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateNoDualstack;
    } });
    Object.defineProperty(exports2, "validateNoFIPS", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateNoFIPS;
    } });
  }
});

var require_getChunkedStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-universal/dist-cjs/getChunkedStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChunkedStream = void 0;
    function getChunkedStream(source) {
      let currentMessageTotalLength = 0;
      let currentMessagePendingLength = 0;
      let currentMessage = null;
      let messageLengthBuffer = null;
      const allocateMessage = (size) => {
        if (typeof size !== "number") {
          throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        }
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
      };
      const iterator = async function* () {
        const sourceIterator = source[Symbol.asyncIterator]();
        while (true) {
          const { value, done } = await sourceIterator.next();
          if (done) {
            if (!currentMessageTotalLength) {
              return;
            } else if (currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
            } else {
              throw new Error("Truncated event message received.");
            }
            return;
          }
          const chunkLength = value.length;
          let currentOffset = 0;
          while (currentOffset < chunkLength) {
            if (!currentMessage) {
              const bytesRemaining = chunkLength - currentOffset;
              if (!messageLengthBuffer) {
                messageLengthBuffer = new Uint8Array(4);
              }
              const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
              messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
              currentMessagePendingLength += numBytesForTotal;
              currentOffset += numBytesForTotal;
              if (currentMessagePendingLength < 4) {
                break;
              }
              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
              messageLengthBuffer = null;
            }
            const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
            currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
            currentMessagePendingLength += numBytesToWrite;
            currentOffset += numBytesToWrite;
            if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
              currentMessage = null;
              currentMessageTotalLength = 0;
              currentMessagePendingLength = 0;
            }
          }
        }
      };
      return {
        [Symbol.asyncIterator]: iterator
      };
    }
    exports2.getChunkedStream = getChunkedStream;
  }
});

var require_getUnmarshalledStream = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-universal/dist-cjs/getUnmarshalledStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getMessageUnmarshaller = exports2.getUnmarshalledStream = void 0;
    function getUnmarshalledStream(source, options) {
      const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);
      return {
        [Symbol.asyncIterator]: async function* () {
          for await (const chunk of source) {
            const message = options.eventStreamCodec.decode(chunk);
            const type = await messageUnmarshaller(message);
            if (type === void 0)
              continue;
            yield type;
          }
        }
      };
    }
    exports2.getUnmarshalledStream = getUnmarshalledStream;
    function getMessageUnmarshaller(deserializer, toUtf8) {
      return async function(message) {
        const { value: messageType } = message.headers[":message-type"];
        if (messageType === "error") {
          const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
          unmodeledError.name = message.headers[":error-code"].value;
          throw unmodeledError;
        } else if (messageType === "exception") {
          const code = message.headers[":exception-type"].value;
          const exception = { [code]: message };
          const deserializedException = await deserializer(exception);
          if (deserializedException.$unknown) {
            const error = new Error(toUtf8(message.body));
            error.name = code;
            throw error;
          }
          throw deserializedException[code];
        } else if (messageType === "event") {
          const event = {
            [message.headers[":event-type"].value]: message
          };
          const deserialized = await deserializer(event);
          if (deserialized.$unknown)
            return;
          return deserialized;
        } else {
          throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
        }
      };
    }
    exports2.getMessageUnmarshaller = getMessageUnmarshaller;
  }
});

var require_EventStreamMarshaller = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-universal/dist-cjs/EventStreamMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamMarshaller = void 0;
    var eventstream_codec_1 = require_dist_cjs12();
    var getChunkedStream_1 = require_getChunkedStream();
    var getUnmarshalledStream_1 = require_getUnmarshalledStream();
    var EventStreamMarshaller = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new eventstream_codec_1.EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const inputStream = (0, getChunkedStream_1.getChunkedStream)(body);
        return new eventstream_codec_1.SmithyMessageDecoderStream({
          messageStream: new eventstream_codec_1.MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
          deserializer: (0, getUnmarshalledStream_1.getMessageUnmarshaller)(deserializer, this.utfEncoder)
        });
      }
      serialize(inputStream, serializer) {
        return new eventstream_codec_1.MessageEncoderStream({
          messageStream: new eventstream_codec_1.SmithyMessageEncoderStream({ inputStream, serializer }),
          encoder: this.eventStreamCodec,
          includeEndFrame: true
        });
      }
    };
    exports2.EventStreamMarshaller = EventStreamMarshaller;
  }
});

var require_provider = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-universal/dist-cjs/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eventStreamSerdeProvider = void 0;
    var EventStreamMarshaller_1 = require_EventStreamMarshaller();
    var eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);
    exports2.eventStreamSerdeProvider = eventStreamSerdeProvider;
  }
});

var require_dist_cjs58 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamMarshaller(), exports2);
    tslib_1.__exportStar(require_provider(), exports2);
  }
});

var require_utils2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-node/dist-cjs/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readabletoIterable = void 0;
    async function* readabletoIterable(readStream) {
      let streamEnded = false;
      let generationEnded = false;
      const records = new Array();
      readStream.on("error", (err) => {
        if (!streamEnded) {
          streamEnded = true;
        }
        if (err) {
          throw err;
        }
      });
      readStream.on("data", (data) => {
        records.push(data);
      });
      readStream.on("end", () => {
        streamEnded = true;
      });
      while (!generationEnded) {
        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
        if (value) {
          yield value;
        }
        generationEnded = streamEnded && records.length === 0;
      }
    }
    exports2.readabletoIterable = readabletoIterable;
  }
});

var require_EventStreamMarshaller2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-node/dist-cjs/EventStreamMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamMarshaller = void 0;
    var eventstream_serde_universal_1 = require_dist_cjs58();
    var stream_1 = require("stream");
    var utils_1 = require_utils2();
    var EventStreamMarshaller = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : (0, utils_1.readabletoIterable)(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        return stream_1.Readable.from(this.universalMarshaller.serialize(input, serializer));
      }
    };
    exports2.EventStreamMarshaller = EventStreamMarshaller;
  }
});

var require_provider2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-node/dist-cjs/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eventStreamSerdeProvider = void 0;
    var EventStreamMarshaller_1 = require_EventStreamMarshaller2();
    var eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);
    exports2.eventStreamSerdeProvider = eventStreamSerdeProvider;
  }
});

var require_dist_cjs59 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamMarshaller2(), exports2);
    tslib_1.__exportStar(require_provider2(), exports2);
  }
});

var require_HashCalculator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/hash-stream-node/dist-cjs/HashCalculator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HashCalculator = void 0;
    var util_utf8_1 = require_dist_cjs16();
    var stream_1 = require("stream");
    var HashCalculator = class extends stream_1.Writable {
      constructor(hash, options) {
        super(options);
        this.hash = hash;
      }
      _write(chunk, encoding, callback) {
        try {
          this.hash.update((0, util_utf8_1.toUint8Array)(chunk));
        } catch (err) {
          return callback(err);
        }
        callback();
      }
    };
    exports2.HashCalculator = HashCalculator;
  }
});

var require_fileStreamHasher = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/hash-stream-node/dist-cjs/fileStreamHasher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fileStreamHasher = void 0;
    var fs_1 = require("fs");
    var HashCalculator_1 = require_HashCalculator();
    var fileStreamHasher = (hashCtor, fileStream) => new Promise((resolve, reject) => {
      if (!isReadStream(fileStream)) {
        reject(new Error("Unable to calculate hash for non-file streams."));
        return;
      }
      const fileStreamTee = (0, fs_1.createReadStream)(fileStream.path, {
        start: fileStream.start,
        end: fileStream.end
      });
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator_1.HashCalculator(hash);
      fileStreamTee.pipe(hashCalculator);
      fileStreamTee.on("error", (err) => {
        hashCalculator.end();
        reject(err);
      });
      hashCalculator.on("error", reject);
      hashCalculator.on("finish", function() {
        hash.digest().then(resolve).catch(reject);
      });
    });
    exports2.fileStreamHasher = fileStreamHasher;
    var isReadStream = (stream) => typeof stream.path === "string";
  }
});

var require_readableStreamHasher = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/hash-stream-node/dist-cjs/readableStreamHasher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readableStreamHasher = void 0;
    var HashCalculator_1 = require_HashCalculator();
    var readableStreamHasher = (hashCtor, readableStream) => {
      if (readableStream.readableFlowing !== null) {
        throw new Error("Unable to calculate hash for flowing readable stream");
      }
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator_1.HashCalculator(hash);
      readableStream.pipe(hashCalculator);
      return new Promise((resolve, reject) => {
        readableStream.on("error", (err) => {
          hashCalculator.end();
          reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", () => {
          hash.digest().then(resolve).catch(reject);
        });
      });
    };
    exports2.readableStreamHasher = readableStreamHasher;
  }
});

var require_dist_cjs60 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/hash-stream-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fileStreamHasher(), exports2);
    tslib_1.__exportStar(require_readableStreamHasher(), exports2);
  }
});

var require_SignatureV4MultiRegion = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/SignatureV4MultiRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4MultiRegion = void 0;
    var signature_v4_1 = require_dist_cjs18();
    var SignatureV4MultiRegion = class {
      constructor(options) {
        this.sigv4Signer = new signature_v4_1.SignatureV4(options);
        this.signerOptions = options;
      }
      async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
      }
      async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
      }
      getSigv4aSigner() {
        if (!this.sigv4aSigner) {
          let CrtSignerV4;
          try {
            CrtSignerV4 = typeof require === "function" && require("@aws-sdk/signature-v4-crt").CrtSignerV4;
            if (typeof CrtSignerV4 !== "function")
              throw new Error();
          } catch (e) {
            e.message = `${e.message}
Please check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;
            throw e;
          }
          this.sigv4aSigner = new CrtSignerV4({
            ...this.signerOptions,
            signingAlgorithm: 1
          });
        }
        return this.sigv4aSigner;
      }
    };
    exports2.SignatureV4MultiRegion = SignatureV4MultiRegion;
  }
});

var require_dist_cjs61 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4MultiRegion(), exports2);
  }
});

var require_ruleset3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var bJ = "required";
    var bK = "type";
    var bL = "conditions";
    var bM = "fn";
    var bN = "argv";
    var bO = "ref";
    var bP = "assign";
    var bQ = "url";
    var bR = "properties";
    var bS = "authSchemes";
    var bT = "disableDoubleEncoding";
    var bU = "signingName";
    var bV = "signingRegion";
    var bW = "headers";
    var a = false;
    var b = true;
    var c = "isSet";
    var d = "tree";
    var e = "booleanEquals";
    var f = "error";
    var g = "aws.partition";
    var h = "stringEquals";
    var i = "getAttr";
    var j = "name";
    var k = "substring";
    var l = "hardwareType";
    var m = "regionPrefix";
    var n = "bucketAliasSuffix";
    var o = "outpostId";
    var p = "isValidHostLabel";
    var q = "not";
    var r = "parseURL";
    var s = "s3-outposts";
    var t = "endpoint";
    var u = "aws.isVirtualHostableS3Bucket";
    var v = "s3";
    var w = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
    var x = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
    var y = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
    var z = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
    var A = "aws.parseArn";
    var B = "bucketArn";
    var C = "arnType";
    var D = "";
    var E = "s3-object-lambda";
    var F = "accesspoint";
    var G = "accessPointName";
    var H = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
    var I = "mrapPartition";
    var J = "outpostType";
    var K = "arnPrefix";
    var L = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
    var M = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
    var N = "{url#scheme}://{url#authority}{url#path}";
    var O = "https://s3.{partitionResult#dnsSuffix}";
    var P = { [bJ]: false, [bK]: "String" };
    var Q = { [bJ]: true, "default": false, [bK]: "Boolean" };
    var R = { [bJ]: false, [bK]: "Boolean" };
    var S = { [bM]: e, [bN]: [{ [bO]: "Accelerate" }, true] };
    var T = { [bM]: e, [bN]: [{ [bO]: "UseFIPS" }, true] };
    var U = { [bM]: e, [bN]: [{ [bO]: "UseDualStack" }, true] };
    var V = { [bM]: c, [bN]: [{ [bO]: "Endpoint" }] };
    var W = { [bM]: g, [bN]: [{ [bO]: "Region" }], [bP]: "partitionResult" };
    var X = { [bM]: h, [bN]: [{ [bM]: i, [bN]: [{ [bO]: "partitionResult" }, j] }, "aws-cn"] };
    var Y = { [bM]: c, [bN]: [{ [bO]: "Bucket" }] };
    var Z = { [bO]: "Bucket" };
    var aa = { [bO]: l };
    var ab = { [bL]: [{ [bM]: q, [bN]: [V] }], [f]: "Expected a endpoint to be specified but no endpoint was found", [bK]: f };
    var ac = { [bM]: q, [bN]: [V] };
    var ad = { [bM]: r, [bN]: [{ [bO]: "Endpoint" }], [bP]: "url" };
    var ae = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: s, [bV]: "{Region}" }] };
    var af = {};
    var ag = { [bM]: e, [bN]: [{ [bO]: "ForcePathStyle" }, false] };
    var ah = { [bO]: "ForcePathStyle" };
    var ai = { [bM]: e, [bN]: [{ [bO]: "Accelerate" }, false] };
    var aj = { [bM]: h, [bN]: [{ [bO]: "Region" }, "aws-global"] };
    var ak = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: v, [bV]: "us-east-1" }] };
    var al = { [bM]: q, [bN]: [aj] };
    var am = { [bM]: e, [bN]: [{ [bO]: "UseGlobalEndpoint" }, true] };
    var an = { [bQ]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: v, [bV]: "{Region}" }] }, [bW]: {} };
    var ao = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: v, [bV]: "{Region}" }] };
    var ap = { [bM]: e, [bN]: [{ [bO]: "UseGlobalEndpoint" }, false] };
    var aq = { [bM]: e, [bN]: [{ [bO]: "UseDualStack" }, false] };
    var ar = { [bQ]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var as = { [bM]: e, [bN]: [{ [bO]: "UseFIPS" }, false] };
    var at = { [bQ]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var au = { [bQ]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var av = { [bM]: e, [bN]: [{ [bM]: i, [bN]: [{ [bO]: "url" }, "isIp"] }, true] };
    var aw = { [bO]: "url" };
    var ax = { [bM]: e, [bN]: [{ [bM]: i, [bN]: [aw, "isIp"] }, false] };
    var ay = { [bQ]: w, [bR]: ao, [bW]: {} };
    var az = { [bQ]: x, [bR]: ao, [bW]: {} };
    var aA = { [t]: az, [bK]: t };
    var aB = { [bQ]: y, [bR]: ao, [bW]: {} };
    var aC = { [bQ]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var aD = { [f]: "Invalid region: region was not a valid DNS name.", [bK]: f };
    var aE = { [bO]: B };
    var aF = { [bO]: C };
    var aG = { [bM]: i, [bN]: [aE, "service"] };
    var aH = { [bO]: G };
    var aI = { [bL]: [U], [f]: "S3 Object Lambda does not support Dual-stack", [bK]: f };
    var aJ = { [bL]: [S], [f]: "S3 Object Lambda does not support S3 Accelerate", [bK]: f };
    var aK = { [bL]: [{ [bM]: c, [bN]: [{ [bO]: "DisableAccessPoints" }] }, { [bM]: e, [bN]: [{ [bO]: "DisableAccessPoints" }, true] }], [f]: "Access points are not supported for this operation", [bK]: f };
    var aL = { [bL]: [{ [bM]: c, [bN]: [{ [bO]: "UseArnRegion" }] }, { [bM]: e, [bN]: [{ [bO]: "UseArnRegion" }, false] }, { [bM]: q, [bN]: [{ [bM]: h, [bN]: [{ [bM]: i, [bN]: [aE, "region"] }, "{Region}"] }] }], [f]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [bK]: f };
    var aM = { [bM]: i, [bN]: [{ [bO]: "bucketPartition" }, j] };
    var aN = { [bM]: i, [bN]: [aE, "accountId"] };
    var aO = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: E, [bV]: "{bucketArn#region}" }] };
    var aP = { [f]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [bK]: f };
    var aQ = { [f]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [bK]: f };
    var aR = { [f]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [bK]: f };
    var aS = { [f]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [bK]: f };
    var aT = { [f]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [bK]: f };
    var aU = { [f]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [bK]: f };
    var aV = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: v, [bV]: "{bucketArn#region}" }] };
    var aW = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: s, [bV]: "{bucketArn#region}" }] };
    var aX = { [bM]: A, [bN]: [Z] };
    var aY = { [bQ]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    var aZ = { [bQ]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    var ba = { [bQ]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    var bb = { [bQ]: L, [bR]: ao, [bW]: {} };
    var bc = { [bQ]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    var bd = { [bO]: "UseObjectLambdaEndpoint" };
    var be = { [bS]: [{ [bT]: true, [j]: "sigv4", [bU]: E, [bV]: "{Region}" }] };
    var bf = { [bQ]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var bg = { [bQ]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var bh = { [bQ]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var bi = { [bQ]: N, [bR]: ao, [bW]: {} };
    var bj = { [bQ]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    var bk = [{ [bO]: "Region" }];
    var bl = [{ [bO]: "Endpoint" }];
    var bm = [Z];
    var bn = [{ [bM]: p, [bN]: [{ [bO]: o }, false] }];
    var bo = [{ [bM]: h, [bN]: [{ [bO]: m }, "beta"] }];
    var bp = [V, ad];
    var bq = [Y];
    var br = [W];
    var bs = [{ [bM]: p, [bN]: [{ [bO]: "Region" }, false] }];
    var bt = [{ [bM]: h, [bN]: [{ [bO]: "Region" }, "us-east-1"] }];
    var bu = [{ [bM]: h, [bN]: [aF, F] }];
    var bv = [{ [bM]: i, [bN]: [aE, "resourceId[1]"], [bP]: G }, { [bM]: q, [bN]: [{ [bM]: h, [bN]: [aH, D] }] }];
    var bw = [aE, "resourceId[1]"];
    var bx = [U];
    var by = [S];
    var bz = [{ [bM]: q, [bN]: [{ [bM]: h, [bN]: [{ [bM]: i, [bN]: [aE, "region"] }, D] }] }];
    var bA = [{ [bM]: q, [bN]: [{ [bM]: c, [bN]: [{ [bM]: i, [bN]: [aE, "resourceId[2]"] }] }] }];
    var bB = [aE, "resourceId[2]"];
    var bC = [{ [bM]: g, [bN]: [{ [bM]: i, [bN]: [aE, "region"] }], [bP]: "bucketPartition" }];
    var bD = [{ [bM]: h, [bN]: [aM, { [bM]: i, [bN]: [{ [bO]: "partitionResult" }, j] }] }];
    var bE = [{ [bM]: p, [bN]: [{ [bM]: i, [bN]: [aE, "region"] }, true] }];
    var bF = [{ [bM]: p, [bN]: [aN, false] }];
    var bG = [{ [bM]: p, [bN]: [aH, false] }];
    var bH = [T];
    var bI = [{ [bM]: p, [bN]: [{ [bO]: "Region" }, true] }];
    var _data = { version: "1.0", parameters: { Bucket: P, Region: P, UseFIPS: Q, UseDualStack: Q, Endpoint: P, ForcePathStyle: Q, Accelerate: Q, UseGlobalEndpoint: Q, UseObjectLambdaEndpoint: R, DisableAccessPoints: R, DisableMultiRegionAccessPoints: Q, UseArnRegion: R }, rules: [{ [bL]: [{ [bM]: c, [bN]: bk }], [bK]: d, rules: [{ [bL]: [S, T], error: "Accelerate cannot be used with FIPS", [bK]: f }, { [bL]: [U, V], error: "Cannot set dual-stack in combination with a custom endpoint.", [bK]: f }, { [bL]: [V, T], error: "A custom endpoint cannot be combined with FIPS", [bK]: f }, { [bL]: [V, S], error: "A custom endpoint cannot be combined with S3 Accelerate", [bK]: f }, { [bL]: [T, W, X], error: "Partition does not support FIPS", [bK]: f }, { [bL]: [Y, { [bM]: k, [bN]: [Z, 49, 50, b], [bP]: l }, { [bM]: k, [bN]: [Z, 8, 12, b], [bP]: m }, { [bM]: k, [bN]: [Z, 0, 7, b], [bP]: n }, { [bM]: k, [bN]: [Z, 32, 49, b], [bP]: o }, { [bM]: g, [bN]: bk, [bP]: "regionPartition" }, { [bM]: h, [bN]: [{ [bO]: n }, "--op-s3"] }], [bK]: d, rules: [{ [bL]: bn, [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [aa, "e"] }], [bK]: d, rules: [{ [bL]: bo, [bK]: d, rules: [ab, { [bL]: bp, endpoint: { [bQ]: "https://{Bucket}.ec2.{url#authority}", [bR]: ae, [bW]: af }, [bK]: t }] }, { endpoint: { [bQ]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [bR]: ae, [bW]: af }, [bK]: t }] }, { [bL]: [{ [bM]: h, [bN]: [aa, "o"] }], [bK]: d, rules: [{ [bL]: bo, [bK]: d, rules: [ab, { [bL]: bp, endpoint: { [bQ]: "https://{Bucket}.op-{outpostId}.{url#authority}", [bR]: ae, [bW]: af }, [bK]: t }] }, { endpoint: { [bQ]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [bR]: ae, [bW]: af }, [bK]: t }] }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [bK]: f }] }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [bK]: f }] }, { [bL]: bq, [bK]: d, rules: [{ [bL]: [V, { [bM]: q, [bN]: [{ [bM]: c, [bN]: [{ [bM]: r, [bN]: bl }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [bK]: f }, { [bL]: [ag, { [bM]: u, [bN]: [Z, a] }], [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: bs, [bK]: d, rules: [{ [bL]: [S, X], error: "S3 Accelerate cannot be used in this region", [bK]: f }, { [bL]: [U, T, ai, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [U, T, ai, ac, al, am], [bK]: d, rules: [{ endpoint: an, [bK]: t }] }, { [bL]: [U, T, ai, ac, al, ap], endpoint: an, [bK]: t }, { [bL]: [aq, T, ai, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, T, ai, ac, al, am], [bK]: d, rules: [{ endpoint: ar, [bK]: t }] }, { [bL]: [aq, T, ai, ac, al, ap], endpoint: ar, [bK]: t }, { [bL]: [U, as, S, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [U, as, S, ac, al, am], [bK]: d, rules: [{ endpoint: at, [bK]: t }] }, { [bL]: [U, as, S, ac, al, ap], endpoint: at, [bK]: t }, { [bL]: [U, as, ai, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [U, as, ai, ac, al, am], [bK]: d, rules: [{ endpoint: au, [bK]: t }] }, { [bL]: [U, as, ai, ac, al, ap], endpoint: au, [bK]: t }, { [bL]: [aq, as, ai, V, ad, av, aj], endpoint: { [bQ]: w, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, as, ai, V, ad, ax, aj], endpoint: { [bQ]: x, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, as, ai, V, ad, av, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: ay, [bK]: t }, { endpoint: ay, [bK]: t }] }, { [bL]: [aq, as, ai, V, ad, ax, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: az, [bK]: t }, aA] }, { [bL]: [aq, as, ai, V, ad, av, al, ap], endpoint: ay, [bK]: t }, { [bL]: [aq, as, ai, V, ad, ax, al, ap], endpoint: az, [bK]: t }, { [bL]: [aq, as, S, ac, aj], endpoint: { [bQ]: y, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, as, S, ac, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: aB, [bK]: t }, { endpoint: aB, [bK]: t }] }, { [bL]: [aq, as, S, ac, al, ap], endpoint: aB, [bK]: t }, { [bL]: [aq, as, ai, ac, aj], endpoint: { [bQ]: z, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, as, ai, ac, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: { [bQ]: z, [bR]: ao, [bW]: af }, [bK]: t }, { endpoint: aC, [bK]: t }] }, { [bL]: [aq, as, ai, ac, al, ap], endpoint: aC, [bK]: t }] }, aD] }] }, { [bL]: [V, ad, { [bM]: h, [bN]: [{ [bM]: i, [bN]: [aw, "scheme"] }, "http"] }, { [bM]: u, [bN]: [Z, b] }, ag, as, aq, ai], [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: bs, [bK]: d, rules: [aA] }, aD] }] }, { [bL]: [ag, { [bM]: A, [bN]: bm, [bP]: B }], [bK]: d, rules: [{ [bL]: [{ [bM]: i, [bN]: [aE, "resourceId[0]"], [bP]: C }, { [bM]: q, [bN]: [{ [bM]: h, [bN]: [aF, D] }] }], [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [aG, E] }], [bK]: d, rules: [{ [bL]: bu, [bK]: d, rules: [{ [bL]: bv, [bK]: d, rules: [aI, aJ, { [bL]: bz, [bK]: d, rules: [aK, { [bL]: bA, [bK]: d, rules: [aL, { [bL]: bC, [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: bD, [bK]: d, rules: [{ [bL]: bE, [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [aN, D] }], error: "Invalid ARN: Missing account id", [bK]: f }, { [bL]: bF, [bK]: d, rules: [{ [bL]: bG, [bK]: d, rules: [{ [bL]: bp, endpoint: { [bQ]: H, [bR]: aO, [bW]: af }, [bK]: t }, { [bL]: bH, endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aO, [bW]: af }, [bK]: t }, { endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aO, [bW]: af }, [bK]: t }] }, aP] }, aQ] }, aR] }, aS] }] }] }, aT] }, { error: "Invalid ARN: bucket ARN is missing a region", [bK]: f }] }, aU] }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [bK]: f }] }, { [bL]: bu, [bK]: d, rules: [{ [bL]: bv, [bK]: d, rules: [{ [bL]: bz, [bK]: d, rules: [{ [bL]: bu, [bK]: d, rules: [{ [bL]: bz, [bK]: d, rules: [aK, { [bL]: bA, [bK]: d, rules: [aL, { [bL]: bC, [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [aM, "{partitionResult#name}"] }], [bK]: d, rules: [{ [bL]: bE, [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [aG, v] }], [bK]: d, rules: [{ [bL]: bF, [bK]: d, rules: [{ [bL]: bG, [bK]: d, rules: [{ [bL]: by, error: "Access Points do not support S3 Accelerate", [bK]: f }, { [bL]: [T, U], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t }, { [bL]: [T, aq], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t }, { [bL]: [as, U], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t }, { [bL]: [as, aq, V, ad], endpoint: { [bQ]: H, [bR]: aV, [bW]: af }, [bK]: t }, { [bL]: [as, aq], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t }] }, aP] }, aQ] }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [bK]: f }] }, aR] }, aS] }] }] }, aT] }] }] }, { [bL]: [{ [bM]: p, [bN]: [aH, b] }], [bK]: d, rules: [{ [bL]: bx, error: "S3 MRAP does not support dual-stack", [bK]: f }, { [bL]: bH, error: "S3 MRAP does not support FIPS", [bK]: f }, { [bL]: by, error: "S3 MRAP does not support S3 Accelerate", [bK]: f }, { [bL]: [{ [bM]: e, [bN]: [{ [bO]: "DisableMultiRegionAccessPoints" }, b] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [bK]: f }, { [bL]: [{ [bM]: g, [bN]: bk, [bP]: I }], [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [{ [bM]: i, [bN]: [{ [bO]: I }, j] }, { [bM]: i, [bN]: [aE, "partition"] }] }], [bK]: d, rules: [{ endpoint: { [bQ]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [bR]: { [bS]: [{ [bT]: b, name: "sigv4a", [bU]: v, signingRegionSet: ["*"] }] }, [bW]: af }, [bK]: t }] }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [bK]: f }] }] }, { error: "Invalid Access Point Name", [bK]: f }] }, aU] }, { [bL]: [{ [bM]: h, [bN]: [aG, s] }], [bK]: d, rules: [{ [bL]: bx, error: "S3 Outposts does not support Dual-stack", [bK]: f }, { [bL]: bH, error: "S3 Outposts does not support FIPS", [bK]: f }, { [bL]: by, error: "S3 Outposts does not support S3 Accelerate", [bK]: f }, { [bL]: [{ [bM]: c, [bN]: [{ [bM]: i, [bN]: [aE, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [bK]: f }, { [bL]: [{ [bM]: i, [bN]: bw, [bP]: o }], [bK]: d, rules: [{ [bL]: bn, [bK]: d, rules: [aL, { [bL]: bC, [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: bD, [bK]: d, rules: [{ [bL]: bE, [bK]: d, rules: [{ [bL]: bF, [bK]: d, rules: [{ [bL]: [{ [bM]: i, [bN]: bB, [bP]: J }], [bK]: d, rules: [{ [bL]: [{ [bM]: i, [bN]: [aE, "resourceId[3]"], [bP]: G }], [bK]: d, rules: [{ [bL]: [{ [bM]: h, [bN]: [{ [bO]: J }, F] }], [bK]: d, rules: [{ [bL]: bp, endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [bR]: aW, [bW]: af }, [bK]: t }, { endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aW, [bW]: af }, [bK]: t }] }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [bK]: f }] }, { error: "Invalid ARN: expected an access point name", [bK]: f }] }, { error: "Invalid ARN: Expected a 4-component resource", [bK]: f }] }, aQ] }, aR] }, aS] }] }] }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [bK]: f }] }, { error: "Invalid ARN: The Outpost Id was not set", [bK]: f }] }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [bK]: f }] }, { error: "Invalid ARN: No ARN type specified", [bK]: f }] }, { [bL]: [{ [bM]: k, [bN]: [Z, 0, 4, a], [bP]: K }, { [bM]: h, [bN]: [{ [bO]: K }, "arn:"] }, { [bM]: q, [bN]: [{ [bM]: c, [bN]: [aX] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [bK]: f }, { [bL]: [{ [bM]: e, [bN]: [ah, b] }, aX], error: "Path-style addressing cannot be used with ARN buckets", [bK]: f }, { [bL]: [{ [bM]: "uriEncode", [bN]: bm, [bP]: "uri_encoded_bucket" }], [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: [ai], [bK]: d, rules: [{ [bL]: [U, ac, T, aj], endpoint: { [bQ]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [U, ac, T, al, am], [bK]: d, rules: [{ endpoint: aY, [bK]: t }] }, { [bL]: [U, ac, T, al, ap], endpoint: aY, [bK]: t }, { [bL]: [aq, ac, T, aj], endpoint: { [bQ]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, ac, T, al, am], [bK]: d, rules: [{ endpoint: aZ, [bK]: t }] }, { [bL]: [aq, ac, T, al, ap], endpoint: aZ, [bK]: t }, { [bL]: [U, ac, as, aj], endpoint: { [bQ]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [U, ac, as, al, am], [bK]: d, rules: [{ endpoint: ba, [bK]: t }] }, { [bL]: [U, ac, as, al, ap], endpoint: ba, [bK]: t }, { [bL]: [aq, V, ad, as, aj], endpoint: { [bQ]: L, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, V, ad, as, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: bb, [bK]: t }, { endpoint: bb, [bK]: t }] }, { [bL]: [aq, V, ad, as, al, ap], endpoint: bb, [bK]: t }, { [bL]: [aq, ac, as, aj], endpoint: { [bQ]: M, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [aq, ac, as, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: { [bQ]: M, [bR]: ao, [bW]: af }, [bK]: t }, { endpoint: bc, [bK]: t }] }, { [bL]: [aq, ac, as, al, ap], endpoint: bc, [bK]: t }] }, { error: "Path-style addressing cannot be used with S3 Accelerate", [bK]: f }] }] }] }, { [bL]: [{ [bM]: c, [bN]: [bd] }, { [bM]: e, [bN]: [bd, b] }], [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: bI, [bK]: d, rules: [aI, aJ, { [bL]: bp, endpoint: { [bQ]: N, [bR]: be, [bW]: af }, [bK]: t }, { [bL]: bH, endpoint: { [bQ]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [bR]: be, [bW]: af }, [bK]: t }, { endpoint: { [bQ]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [bR]: be, [bW]: af }, [bK]: t }] }, aD] }] }, { [bL]: [{ [bM]: q, [bN]: bq }], [bK]: d, rules: [{ [bL]: br, [bK]: d, rules: [{ [bL]: bI, [bK]: d, rules: [{ [bL]: [T, U, ac, aj], endpoint: { [bQ]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [T, U, ac, al, am], [bK]: d, rules: [{ endpoint: bf, [bK]: t }] }, { [bL]: [T, U, ac, al, ap], endpoint: bf, [bK]: t }, { [bL]: [T, aq, ac, aj], endpoint: { [bQ]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [T, aq, ac, al, am], [bK]: d, rules: [{ endpoint: bg, [bK]: t }] }, { [bL]: [T, aq, ac, al, ap], endpoint: bg, [bK]: t }, { [bL]: [as, U, ac, aj], endpoint: { [bQ]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [as, U, ac, al, am], [bK]: d, rules: [{ endpoint: bh, [bK]: t }] }, { [bL]: [as, U, ac, al, ap], endpoint: bh, [bK]: t }, { [bL]: [as, aq, V, ad, aj], endpoint: { [bQ]: N, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [as, aq, V, ad, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: bi, [bK]: t }, { endpoint: bi, [bK]: t }] }, { [bL]: [as, aq, V, ad, al, ap], endpoint: bi, [bK]: t }, { [bL]: [as, aq, ac, aj], endpoint: { [bQ]: O, [bR]: ak, [bW]: af }, [bK]: t }, { [bL]: [as, aq, ac, al, am], [bK]: d, rules: [{ [bL]: bt, endpoint: { [bQ]: O, [bR]: ao, [bW]: af }, [bK]: t }, { endpoint: bj, [bK]: t }] }, { [bL]: [as, aq, ac, al, ap], endpoint: bj, [bK]: t }] }, aD] }] }] }, { error: "A region must be set when sending requests to S3.", [bK]: f }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var signature_v4_multi_region_1 = require_dist_cjs61();
    var smithy_client_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs28();
    var util_base64_1 = require_dist_cjs35();
    var util_stream_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs16();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2006-03-01",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      extensions: (config == null ? void 0 : config.extensions) ?? [],
      getAwsChunkedEncodingStream: (config == null ? void 0 : config.getAwsChunkedEncodingStream) ?? util_stream_1.getAwsChunkedEncodingStream,
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      sdkStreamMixin: (config == null ? void 0 : config.sdkStreamMixin) ?? util_stream_1.sdkStreamMixin,
      serviceId: (config == null ? void 0 : config.serviceId) ?? "S3",
      signerConstructor: (config == null ? void 0 : config.signerConstructor) ?? signature_v4_multi_region_1.SignatureV4MultiRegion,
      signingEscapePath: (config == null ? void 0 : config.signingEscapePath) ?? false,
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      useArnRegion: (config == null ? void 0 : config.useArnRegion) ?? false,
      utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs56();
    var credential_provider_node_1 = require_dist_cjs55();
    var middleware_bucket_endpoint_1 = require_dist_cjs57();
    var util_user_agent_node_1 = require_dist_cjs46();
    var config_resolver_1 = require_dist_cjs24();
    var eventstream_serde_node_1 = require_dist_cjs59();
    var hash_node_1 = require_dist_cjs47();
    var hash_stream_node_1 = require_dist_cjs60();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs43();
    var node_http_handler_1 = require_dist_cjs37();
    var util_body_length_node_1 = require_dist_cjs48();
    var util_retry_1 = require_dist_cjs32();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs39();
    var util_defaults_mode_node_1 = require_dist_cjs49();
    var smithy_client_2 = require_dist_cjs39();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        eventStreamSerdeProvider: (config == null ? void 0 : config.eventStreamSerdeProvider) ?? eventstream_serde_node_1.eventStreamSerdeProvider,
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        md5: (config == null ? void 0 : config.md5) ?? hash_node_1.Hash.bind(null, "md5"),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha1: (config == null ? void 0 : config.sha1) ?? hash_node_1.Hash.bind(null, "sha1"),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        streamHasher: (config == null ? void 0 : config.streamHasher) ?? hash_stream_node_1.readableStreamHasher,
        useArnRegion: (config == null ? void 0 : config.useArnRegion) ?? (0, node_config_provider_1.loadConfig)(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS),
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_S3Client = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/S3Client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3Client = exports2.__Client = void 0;
    var middleware_expect_continue_1 = require_dist_cjs3();
    var middleware_host_header_1 = require_dist_cjs4();
    var middleware_logger_1 = require_dist_cjs5();
    var middleware_recursion_detection_1 = require_dist_cjs6();
    var middleware_sdk_s3_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs22();
    var config_resolver_1 = require_dist_cjs24();
    var eventstream_serde_config_resolver_1 = require_dist_cjs25();
    var middleware_content_length_1 = require_dist_cjs26();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs33();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var runtimeExtensions_1 = require_runtimeExtensions3();
    var S3Client = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_sdk_s3_1.resolveS3Config)(_config_6);
        const _config_8 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_7);
        const _config_9 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_8);
        const _config_10 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_9, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_10);
        this.config = _config_10;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getValidateBucketNamePlugin)(this.config));
        this.middlewareStack.use((0, middleware_expect_continue_1.getAddExpectContinuePlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.S3Client = S3Client;
  }
});

var require_escape_attribute = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/escape-attribute.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeAttribute = void 0;
    function escapeAttribute(value) {
      return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    }
    exports2.escapeAttribute = escapeAttribute;
  }
});

var require_escape_element = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/escape-element.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeElement = void 0;
    function escapeElement(value) {
      return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
    }
    exports2.escapeElement = escapeElement;
  }
});

var require_XmlText = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/XmlText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.XmlText = void 0;
    var escape_element_1 = require_escape_element();
    var XmlText = class {
      constructor(value) {
        this.value = value;
      }
      toString() {
        return (0, escape_element_1.escapeElement)("" + this.value);
      }
    };
    exports2.XmlText = XmlText;
  }
});

var require_XmlNode = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/XmlNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.XmlNode = void 0;
    var escape_attribute_1 = require_escape_attribute();
    var XmlText_1 = require_XmlText();
    var XmlNode = class _XmlNode {
      static of(name, childText, withName) {
        const node = new _XmlNode(name);
        if (childText !== void 0) {
          node.addChildNode(new XmlText_1.XmlText(childText));
        }
        if (withName !== void 0) {
          node.withName(withName);
        }
        return node;
      }
      constructor(name, children = []) {
        this.name = name;
        this.children = children;
        this.attributes = {};
      }
      withName(name) {
        this.name = name;
        return this;
      }
      addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
      }
      addChildNode(child) {
        this.children.push(child);
        return this;
      }
      removeAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
          const attribute = attributes[attributeName];
          if (typeof attribute !== "undefined" && attribute !== null) {
            xmlText += ` ${attributeName}="${(0, escape_attribute_1.escapeAttribute)("" + attribute)}"`;
          }
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`;
      }
    };
    exports2.XmlNode = XmlNode;
  }
});

var require_dist_cjs62 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_XmlNode(), exports2);
    tslib_1.__exportStar(require_XmlText(), exports2);
  }
});

var require_S3ServiceException = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/S3ServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3ServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var S3ServiceException = class _S3ServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _S3ServiceException.prototype);
      }
    };
    exports2.S3ServiceException = S3ServiceException;
  }
});

var require_models_03 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ReplicationStatus = exports2.Protocol = exports2.BucketVersioningStatus = exports2.MFADeleteStatus = exports2.Payer = exports2.ReplicationRuleStatus = exports2.SseKmsEncryptedObjectsStatus = exports2.ReplicaModificationsStatus = exports2.ReplicationRuleFilter = exports2.ExistingObjectReplicationStatus = exports2.ReplicationTimeStatus = exports2.MetricsStatus = exports2.DeleteMarkerReplicationStatus = exports2.FilterRuleName = exports2.Event = exports2.MetricsFilter = exports2.BucketLogsPermission = exports2.ExpirationStatus = exports2.TransitionStorageClass = exports2.LifecycleRuleFilter = exports2.InventoryFrequency = exports2.InventoryOptionalField = exports2.InventoryIncludedObjectVersions = exports2.InventoryFormat = exports2.IntelligentTieringAccessTier = exports2.IntelligentTieringStatus = exports2.StorageClassAnalysisSchemaVersion = exports2.AnalyticsS3ExportFileFormat = exports2.AnalyticsFilter = exports2.ObjectOwnership = exports2.BucketLocationConstraint = exports2.BucketCannedACL = exports2.BucketAlreadyOwnedByYou = exports2.BucketAlreadyExists = exports2.ObjectNotInActiveTierError = exports2.TaggingDirective = exports2.StorageClass = exports2.ObjectLockMode = exports2.ObjectLockLegalHoldStatus = exports2.MetadataDirective = exports2.ChecksumAlgorithm = exports2.ObjectCannedACL = exports2.ServerSideEncryption = exports2.OwnerOverride = exports2.Permission = exports2.Type = exports2.BucketAccelerateStatus = exports2.NoSuchUpload = exports2.RequestPayer = exports2.RequestCharged = void 0;
    exports2.PutObjectRequestFilterSensitiveLog = exports2.PutObjectOutputFilterSensitiveLog = exports2.PutBucketInventoryConfigurationRequestFilterSensitiveLog = exports2.PutBucketEncryptionRequestFilterSensitiveLog = exports2.ListPartsRequestFilterSensitiveLog = exports2.ListBucketInventoryConfigurationsOutputFilterSensitiveLog = exports2.HeadObjectRequestFilterSensitiveLog = exports2.HeadObjectOutputFilterSensitiveLog = exports2.GetObjectTorrentOutputFilterSensitiveLog = exports2.GetObjectAttributesRequestFilterSensitiveLog = exports2.GetObjectRequestFilterSensitiveLog = exports2.GetObjectOutputFilterSensitiveLog = exports2.GetBucketInventoryConfigurationOutputFilterSensitiveLog = exports2.InventoryConfigurationFilterSensitiveLog = exports2.InventoryDestinationFilterSensitiveLog = exports2.InventoryS3BucketDestinationFilterSensitiveLog = exports2.InventoryEncryptionFilterSensitiveLog = exports2.SSEKMSFilterSensitiveLog = exports2.GetBucketEncryptionOutputFilterSensitiveLog = exports2.ServerSideEncryptionConfigurationFilterSensitiveLog = exports2.ServerSideEncryptionRuleFilterSensitiveLog = exports2.ServerSideEncryptionByDefaultFilterSensitiveLog = exports2.CreateMultipartUploadRequestFilterSensitiveLog = exports2.CreateMultipartUploadOutputFilterSensitiveLog = exports2.CopyObjectRequestFilterSensitiveLog = exports2.CopyObjectOutputFilterSensitiveLog = exports2.CompleteMultipartUploadRequestFilterSensitiveLog = exports2.CompleteMultipartUploadOutputFilterSensitiveLog = exports2.MFADelete = exports2.ObjectVersionStorageClass = exports2.NoSuchBucket = exports2.OptionalObjectAttributes = exports2.ObjectStorageClass = exports2.EncodingType = exports2.ArchiveStatus = exports2.NotFound = exports2.ObjectLockRetentionMode = exports2.ObjectLockEnabled = exports2.ObjectAttributes = exports2.NoSuchKey = exports2.InvalidObjectState = exports2.ChecksumMode = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var S3ServiceException_1 = require_S3ServiceException();
    exports2.RequestCharged = {
      requester: "requester"
    };
    exports2.RequestPayer = {
      requester: "requester"
    };
    var NoSuchUpload = class _NoSuchUpload extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NoSuchUpload",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchUpload";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchUpload.prototype);
      }
    };
    exports2.NoSuchUpload = NoSuchUpload;
    exports2.BucketAccelerateStatus = {
      Enabled: "Enabled",
      Suspended: "Suspended"
    };
    exports2.Type = {
      AmazonCustomerByEmail: "AmazonCustomerByEmail",
      CanonicalUser: "CanonicalUser",
      Group: "Group"
    };
    exports2.Permission = {
      FULL_CONTROL: "FULL_CONTROL",
      READ: "READ",
      READ_ACP: "READ_ACP",
      WRITE: "WRITE",
      WRITE_ACP: "WRITE_ACP"
    };
    exports2.OwnerOverride = {
      Destination: "Destination"
    };
    exports2.ServerSideEncryption = {
      AES256: "AES256",
      aws_kms: "aws:kms",
      aws_kms_dsse: "aws:kms:dsse"
    };
    exports2.ObjectCannedACL = {
      authenticated_read: "authenticated-read",
      aws_exec_read: "aws-exec-read",
      bucket_owner_full_control: "bucket-owner-full-control",
      bucket_owner_read: "bucket-owner-read",
      private: "private",
      public_read: "public-read",
      public_read_write: "public-read-write"
    };
    exports2.ChecksumAlgorithm = {
      CRC32: "CRC32",
      CRC32C: "CRC32C",
      SHA1: "SHA1",
      SHA256: "SHA256"
    };
    exports2.MetadataDirective = {
      COPY: "COPY",
      REPLACE: "REPLACE"
    };
    exports2.ObjectLockLegalHoldStatus = {
      OFF: "OFF",
      ON: "ON"
    };
    exports2.ObjectLockMode = {
      COMPLIANCE: "COMPLIANCE",
      GOVERNANCE: "GOVERNANCE"
    };
    exports2.StorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      OUTPOSTS: "OUTPOSTS",
      REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
      SNOW: "SNOW",
      STANDARD: "STANDARD",
      STANDARD_IA: "STANDARD_IA"
    };
    exports2.TaggingDirective = {
      COPY: "COPY",
      REPLACE: "REPLACE"
    };
    var ObjectNotInActiveTierError = class _ObjectNotInActiveTierError extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "ObjectNotInActiveTierError",
          $fault: "client",
          ...opts
        });
        this.name = "ObjectNotInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ObjectNotInActiveTierError.prototype);
      }
    };
    exports2.ObjectNotInActiveTierError = ObjectNotInActiveTierError;
    var BucketAlreadyExists = class _BucketAlreadyExists extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "BucketAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BucketAlreadyExists.prototype);
      }
    };
    exports2.BucketAlreadyExists = BucketAlreadyExists;
    var BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "BucketAlreadyOwnedByYou",
          $fault: "client",
          ...opts
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou.prototype);
      }
    };
    exports2.BucketAlreadyOwnedByYou = BucketAlreadyOwnedByYou;
    exports2.BucketCannedACL = {
      authenticated_read: "authenticated-read",
      private: "private",
      public_read: "public-read",
      public_read_write: "public-read-write"
    };
    exports2.BucketLocationConstraint = {
      EU: "EU",
      af_south_1: "af-south-1",
      ap_east_1: "ap-east-1",
      ap_northeast_1: "ap-northeast-1",
      ap_northeast_2: "ap-northeast-2",
      ap_northeast_3: "ap-northeast-3",
      ap_south_1: "ap-south-1",
      ap_south_2: "ap-south-2",
      ap_southeast_1: "ap-southeast-1",
      ap_southeast_2: "ap-southeast-2",
      ap_southeast_3: "ap-southeast-3",
      ca_central_1: "ca-central-1",
      cn_north_1: "cn-north-1",
      cn_northwest_1: "cn-northwest-1",
      eu_central_1: "eu-central-1",
      eu_north_1: "eu-north-1",
      eu_south_1: "eu-south-1",
      eu_south_2: "eu-south-2",
      eu_west_1: "eu-west-1",
      eu_west_2: "eu-west-2",
      eu_west_3: "eu-west-3",
      me_south_1: "me-south-1",
      sa_east_1: "sa-east-1",
      us_east_2: "us-east-2",
      us_gov_east_1: "us-gov-east-1",
      us_gov_west_1: "us-gov-west-1",
      us_west_1: "us-west-1",
      us_west_2: "us-west-2"
    };
    exports2.ObjectOwnership = {
      BucketOwnerEnforced: "BucketOwnerEnforced",
      BucketOwnerPreferred: "BucketOwnerPreferred",
      ObjectWriter: "ObjectWriter"
    };
    var AnalyticsFilter;
    (function(AnalyticsFilter2) {
      AnalyticsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AnalyticsFilter = exports2.AnalyticsFilter || (exports2.AnalyticsFilter = {}));
    exports2.AnalyticsS3ExportFileFormat = {
      CSV: "CSV"
    };
    exports2.StorageClassAnalysisSchemaVersion = {
      V_1: "V_1"
    };
    exports2.IntelligentTieringStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.IntelligentTieringAccessTier = {
      ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
      DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
    };
    exports2.InventoryFormat = {
      CSV: "CSV",
      ORC: "ORC",
      Parquet: "Parquet"
    };
    exports2.InventoryIncludedObjectVersions = {
      All: "All",
      Current: "Current"
    };
    exports2.InventoryOptionalField = {
      BucketKeyStatus: "BucketKeyStatus",
      ChecksumAlgorithm: "ChecksumAlgorithm",
      ETag: "ETag",
      EncryptionStatus: "EncryptionStatus",
      IntelligentTieringAccessTier: "IntelligentTieringAccessTier",
      IsMultipartUploaded: "IsMultipartUploaded",
      LastModifiedDate: "LastModifiedDate",
      ObjectAccessControlList: "ObjectAccessControlList",
      ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus",
      ObjectLockMode: "ObjectLockMode",
      ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate",
      ObjectOwner: "ObjectOwner",
      ReplicationStatus: "ReplicationStatus",
      Size: "Size",
      StorageClass: "StorageClass"
    };
    exports2.InventoryFrequency = {
      Daily: "Daily",
      Weekly: "Weekly"
    };
    var LifecycleRuleFilter;
    (function(LifecycleRuleFilter2) {
      LifecycleRuleFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.ObjectSizeGreaterThan !== void 0)
          return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
        if (value.ObjectSizeLessThan !== void 0)
          return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(LifecycleRuleFilter = exports2.LifecycleRuleFilter || (exports2.LifecycleRuleFilter = {}));
    exports2.TransitionStorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      STANDARD_IA: "STANDARD_IA"
    };
    exports2.ExpirationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.BucketLogsPermission = {
      FULL_CONTROL: "FULL_CONTROL",
      READ: "READ",
      WRITE: "WRITE"
    };
    var MetricsFilter;
    (function(MetricsFilter2) {
      MetricsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== void 0)
          return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(MetricsFilter = exports2.MetricsFilter || (exports2.MetricsFilter = {}));
    exports2.Event = {
      s3_IntelligentTiering: "s3:IntelligentTiering",
      s3_LifecycleExpiration_: "s3:LifecycleExpiration:*",
      s3_LifecycleExpiration_Delete: "s3:LifecycleExpiration:Delete",
      s3_LifecycleExpiration_DeleteMarkerCreated: "s3:LifecycleExpiration:DeleteMarkerCreated",
      s3_LifecycleTransition: "s3:LifecycleTransition",
      s3_ObjectAcl_Put: "s3:ObjectAcl:Put",
      s3_ObjectCreated_: "s3:ObjectCreated:*",
      s3_ObjectCreated_CompleteMultipartUpload: "s3:ObjectCreated:CompleteMultipartUpload",
      s3_ObjectCreated_Copy: "s3:ObjectCreated:Copy",
      s3_ObjectCreated_Post: "s3:ObjectCreated:Post",
      s3_ObjectCreated_Put: "s3:ObjectCreated:Put",
      s3_ObjectRemoved_: "s3:ObjectRemoved:*",
      s3_ObjectRemoved_Delete: "s3:ObjectRemoved:Delete",
      s3_ObjectRemoved_DeleteMarkerCreated: "s3:ObjectRemoved:DeleteMarkerCreated",
      s3_ObjectRestore_: "s3:ObjectRestore:*",
      s3_ObjectRestore_Completed: "s3:ObjectRestore:Completed",
      s3_ObjectRestore_Delete: "s3:ObjectRestore:Delete",
      s3_ObjectRestore_Post: "s3:ObjectRestore:Post",
      s3_ObjectTagging_: "s3:ObjectTagging:*",
      s3_ObjectTagging_Delete: "s3:ObjectTagging:Delete",
      s3_ObjectTagging_Put: "s3:ObjectTagging:Put",
      s3_ReducedRedundancyLostObject: "s3:ReducedRedundancyLostObject",
      s3_Replication_: "s3:Replication:*",
      s3_Replication_OperationFailedReplication: "s3:Replication:OperationFailedReplication",
      s3_Replication_OperationMissedThreshold: "s3:Replication:OperationMissedThreshold",
      s3_Replication_OperationNotTracked: "s3:Replication:OperationNotTracked",
      s3_Replication_OperationReplicatedAfterThreshold: "s3:Replication:OperationReplicatedAfterThreshold"
    };
    exports2.FilterRuleName = {
      prefix: "prefix",
      suffix: "suffix"
    };
    exports2.DeleteMarkerReplicationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.MetricsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.ReplicationTimeStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.ExistingObjectReplicationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var ReplicationRuleFilter;
    (function(ReplicationRuleFilter2) {
      ReplicationRuleFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(ReplicationRuleFilter = exports2.ReplicationRuleFilter || (exports2.ReplicationRuleFilter = {}));
    exports2.ReplicaModificationsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.SseKmsEncryptedObjectsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.ReplicationRuleStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.Payer = {
      BucketOwner: "BucketOwner",
      Requester: "Requester"
    };
    exports2.MFADeleteStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports2.BucketVersioningStatus = {
      Enabled: "Enabled",
      Suspended: "Suspended"
    };
    exports2.Protocol = {
      http: "http",
      https: "https"
    };
    exports2.ReplicationStatus = {
      COMPLETE: "COMPLETE",
      FAILED: "FAILED",
      PENDING: "PENDING",
      REPLICA: "REPLICA"
    };
    exports2.ChecksumMode = {
      ENABLED: "ENABLED"
    };
    var InvalidObjectState = class _InvalidObjectState extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "InvalidObjectState",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidObjectState";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
      }
    };
    exports2.InvalidObjectState = InvalidObjectState;
    var NoSuchKey = class _NoSuchKey extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NoSuchKey",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchKey.prototype);
      }
    };
    exports2.NoSuchKey = NoSuchKey;
    exports2.ObjectAttributes = {
      CHECKSUM: "Checksum",
      ETAG: "ETag",
      OBJECT_PARTS: "ObjectParts",
      OBJECT_SIZE: "ObjectSize",
      STORAGE_CLASS: "StorageClass"
    };
    exports2.ObjectLockEnabled = {
      Enabled: "Enabled"
    };
    exports2.ObjectLockRetentionMode = {
      COMPLIANCE: "COMPLIANCE",
      GOVERNANCE: "GOVERNANCE"
    };
    var NotFound = class _NotFound extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NotFound",
          $fault: "client",
          ...opts
        });
        this.name = "NotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFound.prototype);
      }
    };
    exports2.NotFound = NotFound;
    exports2.ArchiveStatus = {
      ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
      DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
    };
    exports2.EncodingType = {
      url: "url"
    };
    exports2.ObjectStorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      OUTPOSTS: "OUTPOSTS",
      REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
      SNOW: "SNOW",
      STANDARD: "STANDARD",
      STANDARD_IA: "STANDARD_IA"
    };
    exports2.OptionalObjectAttributes = {
      RESTORE_STATUS: "RestoreStatus"
    };
    var NoSuchBucket = class _NoSuchBucket extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NoSuchBucket",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchBucket";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchBucket.prototype);
      }
    };
    exports2.NoSuchBucket = NoSuchBucket;
    exports2.ObjectVersionStorageClass = {
      STANDARD: "STANDARD"
    };
    exports2.MFADelete = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var CompleteMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CompleteMultipartUploadOutputFilterSensitiveLog = CompleteMultipartUploadOutputFilterSensitiveLog;
    var CompleteMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CompleteMultipartUploadRequestFilterSensitiveLog = CompleteMultipartUploadRequestFilterSensitiveLog;
    var CopyObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CopyObjectOutputFilterSensitiveLog = CopyObjectOutputFilterSensitiveLog;
    var CopyObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CopyObjectRequestFilterSensitiveLog = CopyObjectRequestFilterSensitiveLog;
    var CreateMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CreateMultipartUploadOutputFilterSensitiveLog = CreateMultipartUploadOutputFilterSensitiveLog;
    var CreateMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CreateMultipartUploadRequestFilterSensitiveLog = CreateMultipartUploadRequestFilterSensitiveLog;
    var ServerSideEncryptionByDefaultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSMasterKeyID && { KMSMasterKeyID: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ServerSideEncryptionByDefaultFilterSensitiveLog = ServerSideEncryptionByDefaultFilterSensitiveLog;
    var ServerSideEncryptionRuleFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: (0, exports2.ServerSideEncryptionByDefaultFilterSensitiveLog)(obj.ApplyServerSideEncryptionByDefault)
      }
    });
    exports2.ServerSideEncryptionRuleFilterSensitiveLog = ServerSideEncryptionRuleFilterSensitiveLog;
    var ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => (0, exports2.ServerSideEncryptionRuleFilterSensitiveLog)(item)) }
    });
    exports2.ServerSideEncryptionConfigurationFilterSensitiveLog = ServerSideEncryptionConfigurationFilterSensitiveLog;
    var GetBucketEncryptionOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: (0, exports2.ServerSideEncryptionConfigurationFilterSensitiveLog)(obj.ServerSideEncryptionConfiguration)
      }
    });
    exports2.GetBucketEncryptionOutputFilterSensitiveLog = GetBucketEncryptionOutputFilterSensitiveLog;
    var SSEKMSFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KeyId && { KeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.SSEKMSFilterSensitiveLog = SSEKMSFilterSensitiveLog;
    var InventoryEncryptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMS && { SSEKMS: (0, exports2.SSEKMSFilterSensitiveLog)(obj.SSEKMS) }
    });
    exports2.InventoryEncryptionFilterSensitiveLog = InventoryEncryptionFilterSensitiveLog;
    var InventoryS3BucketDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: (0, exports2.InventoryEncryptionFilterSensitiveLog)(obj.Encryption) }
    });
    exports2.InventoryS3BucketDestinationFilterSensitiveLog = InventoryS3BucketDestinationFilterSensitiveLog;
    var InventoryDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3BucketDestination && {
        S3BucketDestination: (0, exports2.InventoryS3BucketDestinationFilterSensitiveLog)(obj.S3BucketDestination)
      }
    });
    exports2.InventoryDestinationFilterSensitiveLog = InventoryDestinationFilterSensitiveLog;
    var InventoryConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Destination && { Destination: (0, exports2.InventoryDestinationFilterSensitiveLog)(obj.Destination) }
    });
    exports2.InventoryConfigurationFilterSensitiveLog = InventoryConfigurationFilterSensitiveLog;
    var GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: (0, exports2.InventoryConfigurationFilterSensitiveLog)(obj.InventoryConfiguration)
      }
    });
    exports2.GetBucketInventoryConfigurationOutputFilterSensitiveLog = GetBucketInventoryConfigurationOutputFilterSensitiveLog;
    var GetObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetObjectOutputFilterSensitiveLog = GetObjectOutputFilterSensitiveLog;
    var GetObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetObjectRequestFilterSensitiveLog = GetObjectRequestFilterSensitiveLog;
    var GetObjectAttributesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetObjectAttributesRequestFilterSensitiveLog = GetObjectAttributesRequestFilterSensitiveLog;
    var GetObjectTorrentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectTorrentOutputFilterSensitiveLog = GetObjectTorrentOutputFilterSensitiveLog;
    var HeadObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.HeadObjectOutputFilterSensitiveLog = HeadObjectOutputFilterSensitiveLog;
    var HeadObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.HeadObjectRequestFilterSensitiveLog = HeadObjectRequestFilterSensitiveLog;
    var ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => (0, exports2.InventoryConfigurationFilterSensitiveLog)(item))
      }
    });
    exports2.ListBucketInventoryConfigurationsOutputFilterSensitiveLog = ListBucketInventoryConfigurationsOutputFilterSensitiveLog;
    var ListPartsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListPartsRequestFilterSensitiveLog = ListPartsRequestFilterSensitiveLog;
    var PutBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: (0, exports2.ServerSideEncryptionConfigurationFilterSensitiveLog)(obj.ServerSideEncryptionConfiguration)
      }
    });
    exports2.PutBucketEncryptionRequestFilterSensitiveLog = PutBucketEncryptionRequestFilterSensitiveLog;
    var PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: (0, exports2.InventoryConfigurationFilterSensitiveLog)(obj.InventoryConfiguration)
      }
    });
    exports2.PutBucketInventoryConfigurationRequestFilterSensitiveLog = PutBucketInventoryConfigurationRequestFilterSensitiveLog;
    var PutObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.PutObjectOutputFilterSensitiveLog = PutObjectOutputFilterSensitiveLog;
    var PutObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.PutObjectRequestFilterSensitiveLog = PutObjectRequestFilterSensitiveLog;
  }
});

var require_models_1 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/models_1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WriteGetObjectResponseRequestFilterSensitiveLog = exports2.UploadPartCopyRequestFilterSensitiveLog = exports2.UploadPartCopyOutputFilterSensitiveLog = exports2.UploadPartRequestFilterSensitiveLog = exports2.UploadPartOutputFilterSensitiveLog = exports2.SelectObjectContentRequestFilterSensitiveLog = exports2.SelectObjectContentOutputFilterSensitiveLog = exports2.SelectObjectContentEventStreamFilterSensitiveLog = exports2.RestoreObjectRequestFilterSensitiveLog = exports2.RestoreRequestFilterSensitiveLog = exports2.OutputLocationFilterSensitiveLog = exports2.S3LocationFilterSensitiveLog = exports2.EncryptionFilterSensitiveLog = exports2.SelectObjectContentEventStream = exports2.RestoreRequestType = exports2.QuoteFields = exports2.JSONType = exports2.FileHeaderInfo = exports2.CompressionType = exports2.ExpressionType = exports2.Tier = exports2.ObjectAlreadyInActiveTierError = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var S3ServiceException_1 = require_S3ServiceException();
    var ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "ObjectAlreadyInActiveTierError",
          $fault: "client",
          ...opts
        });
        this.name = "ObjectAlreadyInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError.prototype);
      }
    };
    exports2.ObjectAlreadyInActiveTierError = ObjectAlreadyInActiveTierError;
    exports2.Tier = {
      Bulk: "Bulk",
      Expedited: "Expedited",
      Standard: "Standard"
    };
    exports2.ExpressionType = {
      SQL: "SQL"
    };
    exports2.CompressionType = {
      BZIP2: "BZIP2",
      GZIP: "GZIP",
      NONE: "NONE"
    };
    exports2.FileHeaderInfo = {
      IGNORE: "IGNORE",
      NONE: "NONE",
      USE: "USE"
    };
    exports2.JSONType = {
      DOCUMENT: "DOCUMENT",
      LINES: "LINES"
    };
    exports2.QuoteFields = {
      ALWAYS: "ALWAYS",
      ASNEEDED: "ASNEEDED"
    };
    exports2.RestoreRequestType = {
      SELECT: "SELECT"
    };
    var SelectObjectContentEventStream;
    (function(SelectObjectContentEventStream2) {
      SelectObjectContentEventStream2.visit = (value, visitor) => {
        if (value.Records !== void 0)
          return visitor.Records(value.Records);
        if (value.Stats !== void 0)
          return visitor.Stats(value.Stats);
        if (value.Progress !== void 0)
          return visitor.Progress(value.Progress);
        if (value.Cont !== void 0)
          return visitor.Cont(value.Cont);
        if (value.End !== void 0)
          return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(SelectObjectContentEventStream = exports2.SelectObjectContentEventStream || (exports2.SelectObjectContentEventStream = {}));
    var EncryptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSKeyId && { KMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.EncryptionFilterSensitiveLog = EncryptionFilterSensitiveLog;
    var S3LocationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: (0, exports2.EncryptionFilterSensitiveLog)(obj.Encryption) }
    });
    exports2.S3LocationFilterSensitiveLog = S3LocationFilterSensitiveLog;
    var OutputLocationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3 && { S3: (0, exports2.S3LocationFilterSensitiveLog)(obj.S3) }
    });
    exports2.OutputLocationFilterSensitiveLog = OutputLocationFilterSensitiveLog;
    var RestoreRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OutputLocation && { OutputLocation: (0, exports2.OutputLocationFilterSensitiveLog)(obj.OutputLocation) }
    });
    exports2.RestoreRequestFilterSensitiveLog = RestoreRequestFilterSensitiveLog;
    var RestoreObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RestoreRequest && { RestoreRequest: (0, exports2.RestoreRequestFilterSensitiveLog)(obj.RestoreRequest) }
    });
    exports2.RestoreObjectRequestFilterSensitiveLog = RestoreObjectRequestFilterSensitiveLog;
    var SelectObjectContentEventStreamFilterSensitiveLog = (obj) => {
      if (obj.Records !== void 0)
        return { Records: obj.Records };
      if (obj.Stats !== void 0)
        return { Stats: obj.Stats };
      if (obj.Progress !== void 0)
        return { Progress: obj.Progress };
      if (obj.Cont !== void 0)
        return { Cont: obj.Cont };
      if (obj.End !== void 0)
        return { End: obj.End };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    exports2.SelectObjectContentEventStreamFilterSensitiveLog = SelectObjectContentEventStreamFilterSensitiveLog;
    var SelectObjectContentOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: "STREAMING_CONTENT" }
    });
    exports2.SelectObjectContentOutputFilterSensitiveLog = SelectObjectContentOutputFilterSensitiveLog;
    var SelectObjectContentRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.SelectObjectContentRequestFilterSensitiveLog = SelectObjectContentRequestFilterSensitiveLog;
    var UploadPartOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartOutputFilterSensitiveLog = UploadPartOutputFilterSensitiveLog;
    var UploadPartRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartRequestFilterSensitiveLog = UploadPartRequestFilterSensitiveLog;
    var UploadPartCopyOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartCopyOutputFilterSensitiveLog = UploadPartCopyOutputFilterSensitiveLog;
    var UploadPartCopyRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartCopyRequestFilterSensitiveLog = UploadPartCopyRequestFilterSensitiveLog;
    var WriteGetObjectResponseRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.WriteGetObjectResponseRequestFilterSensitiveLog = WriteGetObjectResponseRequestFilterSensitiveLog;
  }
});

var require_Aws_restXml = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/protocols/Aws_restXml.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.se_GetObjectTorrentCommand = exports2.se_GetObjectTaggingCommand = exports2.se_GetObjectRetentionCommand = exports2.se_GetObjectLockConfigurationCommand = exports2.se_GetObjectLegalHoldCommand = exports2.se_GetObjectAttributesCommand = exports2.se_GetObjectAclCommand = exports2.se_GetObjectCommand = exports2.se_GetBucketWebsiteCommand = exports2.se_GetBucketVersioningCommand = exports2.se_GetBucketTaggingCommand = exports2.se_GetBucketRequestPaymentCommand = exports2.se_GetBucketReplicationCommand = exports2.se_GetBucketPolicyStatusCommand = exports2.se_GetBucketPolicyCommand = exports2.se_GetBucketOwnershipControlsCommand = exports2.se_GetBucketNotificationConfigurationCommand = exports2.se_GetBucketMetricsConfigurationCommand = exports2.se_GetBucketLoggingCommand = exports2.se_GetBucketLocationCommand = exports2.se_GetBucketLifecycleConfigurationCommand = exports2.se_GetBucketInventoryConfigurationCommand = exports2.se_GetBucketIntelligentTieringConfigurationCommand = exports2.se_GetBucketEncryptionCommand = exports2.se_GetBucketCorsCommand = exports2.se_GetBucketAnalyticsConfigurationCommand = exports2.se_GetBucketAclCommand = exports2.se_GetBucketAccelerateConfigurationCommand = exports2.se_DeletePublicAccessBlockCommand = exports2.se_DeleteObjectTaggingCommand = exports2.se_DeleteObjectsCommand = exports2.se_DeleteObjectCommand = exports2.se_DeleteBucketWebsiteCommand = exports2.se_DeleteBucketTaggingCommand = exports2.se_DeleteBucketReplicationCommand = exports2.se_DeleteBucketPolicyCommand = exports2.se_DeleteBucketOwnershipControlsCommand = exports2.se_DeleteBucketMetricsConfigurationCommand = exports2.se_DeleteBucketLifecycleCommand = exports2.se_DeleteBucketInventoryConfigurationCommand = exports2.se_DeleteBucketIntelligentTieringConfigurationCommand = exports2.se_DeleteBucketEncryptionCommand = exports2.se_DeleteBucketCorsCommand = exports2.se_DeleteBucketAnalyticsConfigurationCommand = exports2.se_DeleteBucketCommand = exports2.se_CreateMultipartUploadCommand = exports2.se_CreateBucketCommand = exports2.se_CopyObjectCommand = exports2.se_CompleteMultipartUploadCommand = exports2.se_AbortMultipartUploadCommand = void 0;
    exports2.de_DeleteBucketAnalyticsConfigurationCommand = exports2.de_DeleteBucketCommand = exports2.de_CreateMultipartUploadCommand = exports2.de_CreateBucketCommand = exports2.de_CopyObjectCommand = exports2.de_CompleteMultipartUploadCommand = exports2.de_AbortMultipartUploadCommand = exports2.se_WriteGetObjectResponseCommand = exports2.se_UploadPartCopyCommand = exports2.se_UploadPartCommand = exports2.se_SelectObjectContentCommand = exports2.se_RestoreObjectCommand = exports2.se_PutPublicAccessBlockCommand = exports2.se_PutObjectTaggingCommand = exports2.se_PutObjectRetentionCommand = exports2.se_PutObjectLockConfigurationCommand = exports2.se_PutObjectLegalHoldCommand = exports2.se_PutObjectAclCommand = exports2.se_PutObjectCommand = exports2.se_PutBucketWebsiteCommand = exports2.se_PutBucketVersioningCommand = exports2.se_PutBucketTaggingCommand = exports2.se_PutBucketRequestPaymentCommand = exports2.se_PutBucketReplicationCommand = exports2.se_PutBucketPolicyCommand = exports2.se_PutBucketOwnershipControlsCommand = exports2.se_PutBucketNotificationConfigurationCommand = exports2.se_PutBucketMetricsConfigurationCommand = exports2.se_PutBucketLoggingCommand = exports2.se_PutBucketLifecycleConfigurationCommand = exports2.se_PutBucketInventoryConfigurationCommand = exports2.se_PutBucketIntelligentTieringConfigurationCommand = exports2.se_PutBucketEncryptionCommand = exports2.se_PutBucketCorsCommand = exports2.se_PutBucketAnalyticsConfigurationCommand = exports2.se_PutBucketAclCommand = exports2.se_PutBucketAccelerateConfigurationCommand = exports2.se_ListPartsCommand = exports2.se_ListObjectVersionsCommand = exports2.se_ListObjectsV2Command = exports2.se_ListObjectsCommand = exports2.se_ListMultipartUploadsCommand = exports2.se_ListBucketsCommand = exports2.se_ListBucketMetricsConfigurationsCommand = exports2.se_ListBucketInventoryConfigurationsCommand = exports2.se_ListBucketIntelligentTieringConfigurationsCommand = exports2.se_ListBucketAnalyticsConfigurationsCommand = exports2.se_HeadObjectCommand = exports2.se_HeadBucketCommand = exports2.se_GetPublicAccessBlockCommand = void 0;
    exports2.de_ListBucketMetricsConfigurationsCommand = exports2.de_ListBucketInventoryConfigurationsCommand = exports2.de_ListBucketIntelligentTieringConfigurationsCommand = exports2.de_ListBucketAnalyticsConfigurationsCommand = exports2.de_HeadObjectCommand = exports2.de_HeadBucketCommand = exports2.de_GetPublicAccessBlockCommand = exports2.de_GetObjectTorrentCommand = exports2.de_GetObjectTaggingCommand = exports2.de_GetObjectRetentionCommand = exports2.de_GetObjectLockConfigurationCommand = exports2.de_GetObjectLegalHoldCommand = exports2.de_GetObjectAttributesCommand = exports2.de_GetObjectAclCommand = exports2.de_GetObjectCommand = exports2.de_GetBucketWebsiteCommand = exports2.de_GetBucketVersioningCommand = exports2.de_GetBucketTaggingCommand = exports2.de_GetBucketRequestPaymentCommand = exports2.de_GetBucketReplicationCommand = exports2.de_GetBucketPolicyStatusCommand = exports2.de_GetBucketPolicyCommand = exports2.de_GetBucketOwnershipControlsCommand = exports2.de_GetBucketNotificationConfigurationCommand = exports2.de_GetBucketMetricsConfigurationCommand = exports2.de_GetBucketLoggingCommand = exports2.de_GetBucketLocationCommand = exports2.de_GetBucketLifecycleConfigurationCommand = exports2.de_GetBucketInventoryConfigurationCommand = exports2.de_GetBucketIntelligentTieringConfigurationCommand = exports2.de_GetBucketEncryptionCommand = exports2.de_GetBucketCorsCommand = exports2.de_GetBucketAnalyticsConfigurationCommand = exports2.de_GetBucketAclCommand = exports2.de_GetBucketAccelerateConfigurationCommand = exports2.de_DeletePublicAccessBlockCommand = exports2.de_DeleteObjectTaggingCommand = exports2.de_DeleteObjectsCommand = exports2.de_DeleteObjectCommand = exports2.de_DeleteBucketWebsiteCommand = exports2.de_DeleteBucketTaggingCommand = exports2.de_DeleteBucketReplicationCommand = exports2.de_DeleteBucketPolicyCommand = exports2.de_DeleteBucketOwnershipControlsCommand = exports2.de_DeleteBucketMetricsConfigurationCommand = exports2.de_DeleteBucketLifecycleCommand = exports2.de_DeleteBucketInventoryConfigurationCommand = exports2.de_DeleteBucketIntelligentTieringConfigurationCommand = exports2.de_DeleteBucketEncryptionCommand = exports2.de_DeleteBucketCorsCommand = void 0;
    exports2.de_WriteGetObjectResponseCommand = exports2.de_UploadPartCopyCommand = exports2.de_UploadPartCommand = exports2.de_SelectObjectContentCommand = exports2.de_RestoreObjectCommand = exports2.de_PutPublicAccessBlockCommand = exports2.de_PutObjectTaggingCommand = exports2.de_PutObjectRetentionCommand = exports2.de_PutObjectLockConfigurationCommand = exports2.de_PutObjectLegalHoldCommand = exports2.de_PutObjectAclCommand = exports2.de_PutObjectCommand = exports2.de_PutBucketWebsiteCommand = exports2.de_PutBucketVersioningCommand = exports2.de_PutBucketTaggingCommand = exports2.de_PutBucketRequestPaymentCommand = exports2.de_PutBucketReplicationCommand = exports2.de_PutBucketPolicyCommand = exports2.de_PutBucketOwnershipControlsCommand = exports2.de_PutBucketNotificationConfigurationCommand = exports2.de_PutBucketMetricsConfigurationCommand = exports2.de_PutBucketLoggingCommand = exports2.de_PutBucketLifecycleConfigurationCommand = exports2.de_PutBucketInventoryConfigurationCommand = exports2.de_PutBucketIntelligentTieringConfigurationCommand = exports2.de_PutBucketEncryptionCommand = exports2.de_PutBucketCorsCommand = exports2.de_PutBucketAnalyticsConfigurationCommand = exports2.de_PutBucketAclCommand = exports2.de_PutBucketAccelerateConfigurationCommand = exports2.de_ListPartsCommand = exports2.de_ListObjectVersionsCommand = exports2.de_ListObjectsV2Command = exports2.de_ListObjectsCommand = exports2.de_ListMultipartUploadsCommand = exports2.de_ListBucketsCommand = void 0;
    var xml_builder_1 = require_dist_cjs62();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs39();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_03();
    var models_1_1 = require_models_1();
    var S3ServiceException_1 = require_S3ServiceException();
    var se_AbortMultipartUploadCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "AbortMultipartUpload"],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_AbortMultipartUploadCommand = se_AbortMultipartUploadCommand;
    var se_CompleteMultipartUploadCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "CompleteMultipartUpload"],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      if (input.MultipartUpload !== void 0) {
        body = se_CompletedMultipartUpload(input.MultipartUpload, context);
      }
      let contents;
      if (input.MultipartUpload !== void 0) {
        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.withName("CompleteMultipartUpload");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_CompleteMultipartUploadCommand = se_CompleteMultipartUploadCommand;
    var se_CopyObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
        ],
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-metadata-directive": input.MetadataDirective,
        "x-amz-tagging-directive": input.TaggingDirective,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "CopyObject"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_CopyObjectCommand = se_CopyObjectCommand;
    var se_CreateBucketCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-bucket-object-lock-enabled": [
          () => isSerializableHeaderValue(input.ObjectLockEnabledForBucket),
          () => input.ObjectLockEnabledForBucket.toString()
        ],
        "x-amz-object-ownership": input.ObjectOwnership
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      if (input.CreateBucketConfiguration !== void 0) {
        body = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
      }
      let contents;
      if (input.CreateBucketConfiguration !== void 0) {
        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.se_CreateBucketCommand = se_CreateBucketCommand;
    var se_CreateMultipartUploadCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        uploads: [, ""],
        "x-id": [, "CreateMultipartUpload"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_CreateMultipartUploadCommand = se_CreateMultipartUploadCommand;
    var se_DeleteBucketCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.se_DeleteBucketCommand = se_DeleteBucketCommand;
    var se_DeleteBucketAnalyticsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        analytics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketAnalyticsConfigurationCommand = se_DeleteBucketAnalyticsConfigurationCommand;
    var se_DeleteBucketCorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        cors: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketCorsCommand = se_DeleteBucketCorsCommand;
    var se_DeleteBucketEncryptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        encryption: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketEncryptionCommand = se_DeleteBucketEncryptionCommand;
    var se_DeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "intelligent-tiering": [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketIntelligentTieringConfigurationCommand = se_DeleteBucketIntelligentTieringConfigurationCommand;
    var se_DeleteBucketInventoryConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        inventory: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketInventoryConfigurationCommand = se_DeleteBucketInventoryConfigurationCommand;
    var se_DeleteBucketLifecycleCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        lifecycle: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketLifecycleCommand = se_DeleteBucketLifecycleCommand;
    var se_DeleteBucketMetricsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        metrics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketMetricsConfigurationCommand = se_DeleteBucketMetricsConfigurationCommand;
    var se_DeleteBucketOwnershipControlsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        ownershipControls: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketOwnershipControlsCommand = se_DeleteBucketOwnershipControlsCommand;
    var se_DeleteBucketPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        policy: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketPolicyCommand = se_DeleteBucketPolicyCommand;
    var se_DeleteBucketReplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        replication: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketReplicationCommand = se_DeleteBucketReplicationCommand;
    var se_DeleteBucketTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        tagging: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketTaggingCommand = se_DeleteBucketTaggingCommand;
    var se_DeleteBucketWebsiteCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        website: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteBucketWebsiteCommand = se_DeleteBucketWebsiteCommand;
    var se_DeleteObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "DeleteObject"],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteObjectCommand = se_DeleteObjectCommand;
    var se_DeleteObjectsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        delete: [, ""],
        "x-id": [, "DeleteObjects"]
      });
      let body;
      if (input.Delete !== void 0) {
        body = se_Delete(input.Delete, context);
      }
      let contents;
      if (input.Delete !== void 0) {
        contents = se_Delete(input.Delete, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteObjectsCommand = se_DeleteObjectsCommand;
    var se_DeleteObjectTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeleteObjectTaggingCommand = se_DeleteObjectTaggingCommand;
    var se_DeletePublicAccessBlockCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        publicAccessBlock: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_DeletePublicAccessBlockCommand = se_DeletePublicAccessBlockCommand;
    var se_GetBucketAccelerateConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        accelerate: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketAccelerateConfigurationCommand = se_GetBucketAccelerateConfigurationCommand;
    var se_GetBucketAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        acl: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketAclCommand = se_GetBucketAclCommand;
    var se_GetBucketAnalyticsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        analytics: [, ""],
        "x-id": [, "GetBucketAnalyticsConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketAnalyticsConfigurationCommand = se_GetBucketAnalyticsConfigurationCommand;
    var se_GetBucketCorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        cors: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketCorsCommand = se_GetBucketCorsCommand;
    var se_GetBucketEncryptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        encryption: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketEncryptionCommand = se_GetBucketEncryptionCommand;
    var se_GetBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "intelligent-tiering": [, ""],
        "x-id": [, "GetBucketIntelligentTieringConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketIntelligentTieringConfigurationCommand = se_GetBucketIntelligentTieringConfigurationCommand;
    var se_GetBucketInventoryConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        inventory: [, ""],
        "x-id": [, "GetBucketInventoryConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketInventoryConfigurationCommand = se_GetBucketInventoryConfigurationCommand;
    var se_GetBucketLifecycleConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        lifecycle: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketLifecycleConfigurationCommand = se_GetBucketLifecycleConfigurationCommand;
    var se_GetBucketLocationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        location: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketLocationCommand = se_GetBucketLocationCommand;
    var se_GetBucketLoggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        logging: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketLoggingCommand = se_GetBucketLoggingCommand;
    var se_GetBucketMetricsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        metrics: [, ""],
        "x-id": [, "GetBucketMetricsConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketMetricsConfigurationCommand = se_GetBucketMetricsConfigurationCommand;
    var se_GetBucketNotificationConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        notification: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketNotificationConfigurationCommand = se_GetBucketNotificationConfigurationCommand;
    var se_GetBucketOwnershipControlsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        ownershipControls: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketOwnershipControlsCommand = se_GetBucketOwnershipControlsCommand;
    var se_GetBucketPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        policy: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketPolicyCommand = se_GetBucketPolicyCommand;
    var se_GetBucketPolicyStatusCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        policyStatus: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketPolicyStatusCommand = se_GetBucketPolicyStatusCommand;
    var se_GetBucketReplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        replication: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketReplicationCommand = se_GetBucketReplicationCommand;
    var se_GetBucketRequestPaymentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        requestPayment: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketRequestPaymentCommand = se_GetBucketRequestPaymentCommand;
    var se_GetBucketTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        tagging: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketTaggingCommand = se_GetBucketTaggingCommand;
    var se_GetBucketVersioningCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        versioning: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketVersioningCommand = se_GetBucketVersioningCommand;
    var se_GetBucketWebsiteCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        website: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetBucketWebsiteCommand = se_GetBucketWebsiteCommand;
    var se_GetObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
          () => isSerializableHeaderValue(input.IfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
          () => isSerializableHeaderValue(input.IfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "GetObject"],
        "response-cache-control": [, input.ResponseCacheControl],
        "response-content-disposition": [, input.ResponseContentDisposition],
        "response-content-encoding": [, input.ResponseContentEncoding],
        "response-content-language": [, input.ResponseContentLanguage],
        "response-content-type": [, input.ResponseContentType],
        "response-expires": [
          () => input.ResponseExpires !== void 0,
          () => (0, smithy_client_1.dateToUtcString)(input.ResponseExpires).toString()
        ],
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectCommand = se_GetObjectCommand;
    var se_GetObjectAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        acl: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectAclCommand = se_GetObjectAclCommand;
    var se_GetObjectAttributesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-max-parts": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],
        "x-amz-part-number-marker": input.PartNumberMarker,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-object-attributes": [
          () => isSerializableHeaderValue(input.ObjectAttributes),
          () => (input.ObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        attributes: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectAttributesCommand = se_GetObjectAttributesCommand;
    var se_GetObjectLegalHoldCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "legal-hold": [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectLegalHoldCommand = se_GetObjectLegalHoldCommand;
    var se_GetObjectLockConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "object-lock": [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectLockConfigurationCommand = se_GetObjectLockConfigurationCommand;
    var se_GetObjectRetentionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        retention: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectRetentionCommand = se_GetObjectRetentionCommand;
    var se_GetObjectTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectTaggingCommand = se_GetObjectTaggingCommand;
    var se_GetObjectTorrentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        torrent: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetObjectTorrentCommand = se_GetObjectTorrentCommand;
    var se_GetPublicAccessBlockCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        publicAccessBlock: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetPublicAccessBlockCommand = se_GetPublicAccessBlockCommand;
    var se_HeadBucketCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.se_HeadBucketCommand = se_HeadBucketCommand;
    var se_HeadObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
          () => isSerializableHeaderValue(input.IfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
          () => isSerializableHeaderValue(input.IfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_HeadObjectCommand = se_HeadObjectCommand;
    var se_ListBucketAnalyticsConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        analytics: [, ""],
        "x-id": [, "ListBucketAnalyticsConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListBucketAnalyticsConfigurationsCommand = se_ListBucketAnalyticsConfigurationsCommand;
    var se_ListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "intelligent-tiering": [, ""],
        "x-id": [, "ListBucketIntelligentTieringConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListBucketIntelligentTieringConfigurationsCommand = se_ListBucketIntelligentTieringConfigurationsCommand;
    var se_ListBucketInventoryConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        inventory: [, ""],
        "x-id": [, "ListBucketInventoryConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListBucketInventoryConfigurationsCommand = se_ListBucketInventoryConfigurationsCommand;
    var se_ListBucketMetricsConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        metrics: [, ""],
        "x-id": [, "ListBucketMetricsConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListBucketMetricsConfigurationsCommand = se_ListBucketMetricsConfigurationsCommand;
    var se_ListBucketsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/xml"
      };
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.se_ListBucketsCommand = se_ListBucketsCommand;
    var se_ListMultipartUploadsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        uploads: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-uploads": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],
        prefix: [, input.Prefix],
        "upload-id-marker": [, input.UploadIdMarker]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListMultipartUploadsCommand = se_ListMultipartUploadsCommand;
    var se_ListObjectsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-optional-object-attributes": [
          () => isSerializableHeaderValue(input.OptionalObjectAttributes),
          () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        marker: [, input.Marker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListObjectsCommand = se_ListObjectsCommand;
    var se_ListObjectsV2Command = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-optional-object-attributes": [
          () => isSerializableHeaderValue(input.OptionalObjectAttributes),
          () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "list-type": [, "2"],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "continuation-token": [, input.ContinuationToken],
        "fetch-owner": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],
        "start-after": [, input.StartAfter]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListObjectsV2Command = se_ListObjectsV2Command;
    var se_ListObjectVersionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-optional-object-attributes": [
          () => isSerializableHeaderValue(input.OptionalObjectAttributes),
          () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        versions: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "version-id-marker": [, input.VersionIdMarker]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListObjectVersionsCommand = se_ListObjectVersionsCommand;
    var se_ListPartsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "ListParts"],
        "max-parts": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],
        "part-number-marker": [, input.PartNumberMarker],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListPartsCommand = se_ListPartsCommand;
    var se_PutBucketAccelerateConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        accelerate: [, ""]
      });
      let body;
      if (input.AccelerateConfiguration !== void 0) {
        body = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
      }
      let contents;
      if (input.AccelerateConfiguration !== void 0) {
        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketAccelerateConfigurationCommand = se_PutBucketAccelerateConfigurationCommand;
    var se_PutBucketAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        acl: [, ""]
      });
      let body;
      if (input.AccessControlPolicy !== void 0) {
        body = se_AccessControlPolicy(input.AccessControlPolicy, context);
      }
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketAclCommand = se_PutBucketAclCommand;
    var se_PutBucketAnalyticsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        analytics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.AnalyticsConfiguration !== void 0) {
        body = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
      }
      let contents;
      if (input.AnalyticsConfiguration !== void 0) {
        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketAnalyticsConfigurationCommand = se_PutBucketAnalyticsConfigurationCommand;
    var se_PutBucketCorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        cors: [, ""]
      });
      let body;
      if (input.CORSConfiguration !== void 0) {
        body = se_CORSConfiguration(input.CORSConfiguration, context);
      }
      let contents;
      if (input.CORSConfiguration !== void 0) {
        contents = se_CORSConfiguration(input.CORSConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketCorsCommand = se_PutBucketCorsCommand;
    var se_PutBucketEncryptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        encryption: [, ""]
      });
      let body;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        body = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
      }
      let contents;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketEncryptionCommand = se_PutBucketEncryptionCommand;
    var se_PutBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/xml"
      };
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "intelligent-tiering": [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.IntelligentTieringConfiguration !== void 0) {
        body = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
      }
      let contents;
      if (input.IntelligentTieringConfiguration !== void 0) {
        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketIntelligentTieringConfigurationCommand = se_PutBucketIntelligentTieringConfigurationCommand;
    var se_PutBucketInventoryConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        inventory: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.InventoryConfiguration !== void 0) {
        body = se_InventoryConfiguration(input.InventoryConfiguration, context);
      }
      let contents;
      if (input.InventoryConfiguration !== void 0) {
        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketInventoryConfigurationCommand = se_PutBucketInventoryConfigurationCommand;
    var se_PutBucketLifecycleConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        lifecycle: [, ""]
      });
      let body;
      if (input.LifecycleConfiguration !== void 0) {
        body = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
      }
      let contents;
      if (input.LifecycleConfiguration !== void 0) {
        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.withName("LifecycleConfiguration");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketLifecycleConfigurationCommand = se_PutBucketLifecycleConfigurationCommand;
    var se_PutBucketLoggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        logging: [, ""]
      });
      let body;
      if (input.BucketLoggingStatus !== void 0) {
        body = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
      }
      let contents;
      if (input.BucketLoggingStatus !== void 0) {
        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketLoggingCommand = se_PutBucketLoggingCommand;
    var se_PutBucketMetricsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        metrics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.MetricsConfiguration !== void 0) {
        body = se_MetricsConfiguration(input.MetricsConfiguration, context);
      }
      let contents;
      if (input.MetricsConfiguration !== void 0) {
        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketMetricsConfigurationCommand = se_PutBucketMetricsConfigurationCommand;
    var se_PutBucketNotificationConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-skip-destination-validation": [
          () => isSerializableHeaderValue(input.SkipDestinationValidation),
          () => input.SkipDestinationValidation.toString()
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        notification: [, ""]
      });
      let body;
      if (input.NotificationConfiguration !== void 0) {
        body = se_NotificationConfiguration(input.NotificationConfiguration, context);
      }
      let contents;
      if (input.NotificationConfiguration !== void 0) {
        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketNotificationConfigurationCommand = se_PutBucketNotificationConfigurationCommand;
    var se_PutBucketOwnershipControlsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        ownershipControls: [, ""]
      });
      let body;
      if (input.OwnershipControls !== void 0) {
        body = se_OwnershipControls(input.OwnershipControls, context);
      }
      let contents;
      if (input.OwnershipControls !== void 0) {
        contents = se_OwnershipControls(input.OwnershipControls, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketOwnershipControlsCommand = se_PutBucketOwnershipControlsCommand;
    var se_PutBucketPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-confirm-remove-self-bucket-access": [
          () => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),
          () => input.ConfirmRemoveSelfBucketAccess.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        policy: [, ""]
      });
      let body;
      if (input.Policy !== void 0) {
        body = input.Policy;
      }
      let contents;
      if (input.Policy !== void 0) {
        contents = input.Policy;
        body = contents;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketPolicyCommand = se_PutBucketPolicyCommand;
    var se_PutBucketReplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-bucket-object-lock-token": input.Token,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        replication: [, ""]
      });
      let body;
      if (input.ReplicationConfiguration !== void 0) {
        body = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
      }
      let contents;
      if (input.ReplicationConfiguration !== void 0) {
        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketReplicationCommand = se_PutBucketReplicationCommand;
    var se_PutBucketRequestPaymentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        requestPayment: [, ""]
      });
      let body;
      if (input.RequestPaymentConfiguration !== void 0) {
        body = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
      }
      let contents;
      if (input.RequestPaymentConfiguration !== void 0) {
        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketRequestPaymentCommand = se_PutBucketRequestPaymentCommand;
    var se_PutBucketTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        tagging: [, ""]
      });
      let body;
      if (input.Tagging !== void 0) {
        body = se_Tagging(input.Tagging, context);
      }
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketTaggingCommand = se_PutBucketTaggingCommand;
    var se_PutBucketVersioningCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-mfa": input.MFA,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        versioning: [, ""]
      });
      let body;
      if (input.VersioningConfiguration !== void 0) {
        body = se_VersioningConfiguration(input.VersioningConfiguration, context);
      }
      let contents;
      if (input.VersioningConfiguration !== void 0) {
        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketVersioningCommand = se_PutBucketVersioningCommand;
    var se_PutBucketWebsiteCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        website: [, ""]
      });
      let body;
      if (input.WebsiteConfiguration !== void 0) {
        body = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
      }
      let contents;
      if (input.WebsiteConfiguration !== void 0) {
        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutBucketWebsiteCommand = se_PutBucketWebsiteCommand;
    var se_PutObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": input.ContentType || "application/octet-stream",
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "PutObject"]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutObjectCommand = se_PutObjectCommand;
    var se_PutObjectAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        acl: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.AccessControlPolicy !== void 0) {
        body = se_AccessControlPolicy(input.AccessControlPolicy, context);
      }
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutObjectAclCommand = se_PutObjectAclCommand;
    var se_PutObjectLegalHoldCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "legal-hold": [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.LegalHold !== void 0) {
        body = se_ObjectLockLegalHold(input.LegalHold, context);
      }
      let contents;
      if (input.LegalHold !== void 0) {
        contents = se_ObjectLockLegalHold(input.LegalHold, context);
        contents = contents.withName("LegalHold");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutObjectLegalHoldCommand = se_PutObjectLegalHoldCommand;
    var se_PutObjectLockConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bucket-object-lock-token": input.Token,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        "object-lock": [, ""]
      });
      let body;
      if (input.ObjectLockConfiguration !== void 0) {
        body = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
      }
      let contents;
      if (input.ObjectLockConfiguration !== void 0) {
        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutObjectLockConfigurationCommand = se_PutObjectLockConfigurationCommand;
    var se_PutObjectRetentionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        retention: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.Retention !== void 0) {
        body = se_ObjectLockRetention(input.Retention, context);
      }
      let contents;
      if (input.Retention !== void 0) {
        contents = se_ObjectLockRetention(input.Retention, context);
        contents = contents.withName("Retention");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutObjectRetentionCommand = se_PutObjectRetentionCommand;
    var se_PutObjectTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.Tagging !== void 0) {
        body = se_Tagging(input.Tagging, context);
      }
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutObjectTaggingCommand = se_PutObjectTaggingCommand;
    var se_PutPublicAccessBlockCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, smithy_client_1.map)({
        publicAccessBlock: [, ""]
      });
      let body;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        body = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
      }
      let contents;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_PutPublicAccessBlockCommand = se_PutPublicAccessBlockCommand;
    var se_RestoreObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        restore: [, ""],
        "x-id": [, "RestoreObject"],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.RestoreRequest !== void 0) {
        body = se_RestoreRequest(input.RestoreRequest, context);
      }
      let contents;
      if (input.RestoreRequest !== void 0) {
        contents = se_RestoreRequest(input.RestoreRequest, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_RestoreObjectCommand = se_RestoreObjectCommand;
    var se_SelectObjectContentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        select: [, ""],
        "select-type": [, "2"],
        "x-id": [, "SelectObjectContent"]
      });
      let body;
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      const bodyNode = new xml_builder_1.XmlNode("SelectObjectContentRequest");
      bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      if (input.Expression !== void 0) {
        const node = xml_builder_1.XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
      }
      if (input.ExpressionType !== void 0) {
        const node = xml_builder_1.XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
      }
      if (input.InputSerialization !== void 0) {
        const node = se_InputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.OutputSerialization !== void 0) {
        const node = se_OutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.RequestProgress !== void 0) {
        const node = se_RequestProgress(input.RequestProgress, context).withName("RequestProgress");
        bodyNode.addChildNode(node);
      }
      if (input.ScanRange !== void 0) {
        const node = se_ScanRange(input.ScanRange, context).withName("ScanRange");
        bodyNode.addChildNode(node);
      }
      body += bodyNode.toString();
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_SelectObjectContentCommand = se_SelectObjectContentCommand;
    var se_UploadPartCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "UploadPart"],
        partNumber: [(0, smithy_client_1.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_UploadPartCommand = se_UploadPartCommand;
    var se_UploadPartCopyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
        ],
        "x-amz-copy-source-range": input.CopySourceRange,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = (0, smithy_client_1.map)({
        "x-id": [, "UploadPartCopy"],
        partNumber: [(0, smithy_client_1.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_UploadPartCopyCommand = se_UploadPartCopyCommand;
    var se_WriteGetObjectResponseCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        "x-amz-request-route": input.RequestRoute,
        "x-amz-request-token": input.RequestToken,
        "x-amz-fwd-status": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],
        "x-amz-fwd-error-code": input.ErrorCode,
        "x-amz-fwd-error-message": input.ErrorMessage,
        "x-amz-fwd-header-accept-ranges": input.AcceptRanges,
        "x-amz-fwd-header-cache-control": input.CacheControl,
        "x-amz-fwd-header-content-disposition": input.ContentDisposition,
        "x-amz-fwd-header-content-encoding": input.ContentEncoding,
        "x-amz-fwd-header-content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "x-amz-fwd-header-content-range": input.ContentRange,
        "x-amz-fwd-header-content-type": input.ContentType,
        "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-fwd-header-x-amz-delete-marker": [
          () => isSerializableHeaderValue(input.DeleteMarker),
          () => input.DeleteMarker.toString()
        ],
        "x-amz-fwd-header-etag": input.ETag,
        "x-amz-fwd-header-expires": [
          () => isSerializableHeaderValue(input.Expires),
          () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()
        ],
        "x-amz-fwd-header-x-amz-expiration": input.Expiration,
        "x-amz-fwd-header-last-modified": [
          () => isSerializableHeaderValue(input.LastModified),
          () => (0, smithy_client_1.dateToUtcString)(input.LastModified).toString()
        ],
        "x-amz-fwd-header-x-amz-missing-meta": [
          () => isSerializableHeaderValue(input.MissingMeta),
          () => input.MissingMeta.toString()
        ],
        "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-fwd-header-x-amz-mp-parts-count": [
          () => isSerializableHeaderValue(input.PartsCount),
          () => input.PartsCount.toString()
        ],
        "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus,
        "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged,
        "x-amz-fwd-header-x-amz-restore": input.Restore,
        "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-fwd-header-x-amz-storage-class": input.StorageClass,
        "x-amz-fwd-header-x-amz-tagging-count": [
          () => isSerializableHeaderValue(input.TagCount),
          () => input.TagCount.toString()
        ],
        "x-amz-fwd-header-x-amz-version-id": input.VersionId,
        "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/WriteGetObjectResponse`;
      const query = (0, smithy_client_1.map)({
        "x-id": [, "WriteGetObjectResponse"]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === void 0) {
          throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_WriteGetObjectResponseCommand = se_WriteGetObjectResponseCommand;
    var de_AbortMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_AbortMultipartUploadCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_AbortMultipartUploadCommand = de_AbortMultipartUploadCommand;
    var de_AbortMultipartUploadCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
          throw await de_NoSuchUploadRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CompleteMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CompleteMultipartUploadCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(data["ChecksumCRC32"]);
      }
      if (data["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(data["ChecksumCRC32C"]);
      }
      if (data["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(data["ChecksumSHA1"]);
      }
      if (data["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(data["ChecksumSHA256"]);
      }
      if (data["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(data["ETag"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(data["Key"]);
      }
      if (data["Location"] !== void 0) {
        contents.Location = (0, smithy_client_1.expectString)(data["Location"]);
      }
      return contents;
    };
    exports2.de_CompleteMultipartUploadCommand = de_CompleteMultipartUploadCommand;
    var de_CompleteMultipartUploadCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_CopyObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CopyObjectCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.CopyObjectResult = de_CopyObjectResult(data, context);
      return contents;
    };
    exports2.de_CopyObjectCommand = de_CopyObjectCommand;
    var de_CopyObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
          throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateBucketCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateBucketCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_CreateBucketCommand = de_CreateBucketCommand;
    var de_CreateBucketCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
          throw await de_BucketAlreadyExistsRes(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
          throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateMultipartUploadCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        AbortDate: [
          () => void 0 !== output.headers["x-amz-abort-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ChecksumAlgorithm: [, output.headers["x-amz-checksum-algorithm"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(data["Key"]);
      }
      if (data["UploadId"] !== void 0) {
        contents.UploadId = (0, smithy_client_1.expectString)(data["UploadId"]);
      }
      return contents;
    };
    exports2.de_CreateMultipartUploadCommand = de_CreateMultipartUploadCommand;
    var de_CreateMultipartUploadCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketCommand = de_DeleteBucketCommand;
    var de_DeleteBucketCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketAnalyticsConfigurationCommand = de_DeleteBucketAnalyticsConfigurationCommand;
    var de_DeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketCorsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketCorsCommand = de_DeleteBucketCorsCommand;
    var de_DeleteBucketCorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketEncryptionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketEncryptionCommand = de_DeleteBucketEncryptionCommand;
    var de_DeleteBucketEncryptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketIntelligentTieringConfigurationCommand = de_DeleteBucketIntelligentTieringConfigurationCommand;
    var de_DeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketInventoryConfigurationCommand = de_DeleteBucketInventoryConfigurationCommand;
    var de_DeleteBucketInventoryConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketLifecycleCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketLifecycleCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketLifecycleCommand = de_DeleteBucketLifecycleCommand;
    var de_DeleteBucketLifecycleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketMetricsConfigurationCommand = de_DeleteBucketMetricsConfigurationCommand;
    var de_DeleteBucketMetricsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketOwnershipControlsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketOwnershipControlsCommand = de_DeleteBucketOwnershipControlsCommand;
    var de_DeleteBucketOwnershipControlsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketPolicyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketPolicyCommand = de_DeleteBucketPolicyCommand;
    var de_DeleteBucketPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketReplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketReplicationCommand = de_DeleteBucketReplicationCommand;
    var de_DeleteBucketReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketTaggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketTaggingCommand = de_DeleteBucketTaggingCommand;
    var de_DeleteBucketTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketWebsiteCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteBucketWebsiteCommand = de_DeleteBucketWebsiteCommand;
    var de_DeleteBucketWebsiteCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteObjectCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteObjectCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteObjectCommand = de_DeleteObjectCommand;
    var de_DeleteObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteObjectsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteObjectsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Deleted === "") {
        contents.Deleted = [];
      } else if (data["Deleted"] !== void 0) {
        contents.Deleted = de_DeletedObjects((0, smithy_client_1.getArrayIfSingleItem)(data["Deleted"]), context);
      }
      if (data.Error === "") {
        contents.Errors = [];
      } else if (data["Error"] !== void 0) {
        contents.Errors = de_Errors((0, smithy_client_1.getArrayIfSingleItem)(data["Error"]), context);
      }
      return contents;
    };
    exports2.de_DeleteObjectsCommand = de_DeleteObjectsCommand;
    var de_DeleteObjectsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeleteObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteObjectTaggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeleteObjectTaggingCommand = de_DeleteObjectTaggingCommand;
    var de_DeleteObjectTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DeletePublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeletePublicAccessBlockCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_DeletePublicAccessBlockCommand = de_DeletePublicAccessBlockCommand;
    var de_DeletePublicAccessBlockCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketAccelerateConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketAccelerateConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(data["Status"]);
      }
      return contents;
    };
    exports2.de_GetBucketAccelerateConfigurationCommand = de_GetBucketAccelerateConfigurationCommand;
    var de_GetBucketAccelerateConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketAclCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents.Grants = [];
      } else if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
        contents.Grants = de_Grants((0, smithy_client_1.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      return contents;
    };
    exports2.de_GetBucketAclCommand = de_GetBucketAclCommand;
    var de_GetBucketAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
      return contents;
    };
    exports2.de_GetBucketAnalyticsConfigurationCommand = de_GetBucketAnalyticsConfigurationCommand;
    var de_GetBucketAnalyticsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketCorsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CORSRule === "") {
        contents.CORSRules = [];
      } else if (data["CORSRule"] !== void 0) {
        contents.CORSRules = de_CORSRules((0, smithy_client_1.getArrayIfSingleItem)(data["CORSRule"]), context);
      }
      return contents;
    };
    exports2.de_GetBucketCorsCommand = de_GetBucketCorsCommand;
    var de_GetBucketCorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketEncryptionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
      return contents;
    };
    exports2.de_GetBucketEncryptionCommand = de_GetBucketEncryptionCommand;
    var de_GetBucketEncryptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
      return contents;
    };
    exports2.de_GetBucketIntelligentTieringConfigurationCommand = de_GetBucketIntelligentTieringConfigurationCommand;
    var de_GetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
      return contents;
    };
    exports2.de_GetBucketInventoryConfigurationCommand = de_GetBucketInventoryConfigurationCommand;
    var de_GetBucketInventoryConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketLifecycleConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketLifecycleConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Rule === "") {
        contents.Rules = [];
      } else if (data["Rule"] !== void 0) {
        contents.Rules = de_LifecycleRules((0, smithy_client_1.getArrayIfSingleItem)(data["Rule"]), context);
      }
      return contents;
    };
    exports2.de_GetBucketLifecycleConfigurationCommand = de_GetBucketLifecycleConfigurationCommand;
    var de_GetBucketLifecycleConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketLocationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketLocationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["LocationConstraint"] !== void 0) {
        contents.LocationConstraint = (0, smithy_client_1.expectString)(data["LocationConstraint"]);
      }
      return contents;
    };
    exports2.de_GetBucketLocationCommand = de_GetBucketLocationCommand;
    var de_GetBucketLocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketLoggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketLoggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["LoggingEnabled"] !== void 0) {
        contents.LoggingEnabled = de_LoggingEnabled(data["LoggingEnabled"], context);
      }
      return contents;
    };
    exports2.de_GetBucketLoggingCommand = de_GetBucketLoggingCommand;
    var de_GetBucketLoggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
      return contents;
    };
    exports2.de_GetBucketMetricsConfigurationCommand = de_GetBucketMetricsConfigurationCommand;
    var de_GetBucketMetricsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketNotificationConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketNotificationConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["EventBridgeConfiguration"] !== void 0) {
        contents.EventBridgeConfiguration = de_EventBridgeConfiguration(data["EventBridgeConfiguration"], context);
      }
      if (data.CloudFunctionConfiguration === "") {
        contents.LambdaFunctionConfigurations = [];
      } else if (data["CloudFunctionConfiguration"] !== void 0) {
        contents.LambdaFunctionConfigurations = de_LambdaFunctionConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["CloudFunctionConfiguration"]), context);
      }
      if (data.QueueConfiguration === "") {
        contents.QueueConfigurations = [];
      } else if (data["QueueConfiguration"] !== void 0) {
        contents.QueueConfigurations = de_QueueConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["QueueConfiguration"]), context);
      }
      if (data.TopicConfiguration === "") {
        contents.TopicConfigurations = [];
      } else if (data["TopicConfiguration"] !== void 0) {
        contents.TopicConfigurations = de_TopicConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["TopicConfiguration"]), context);
      }
      return contents;
    };
    exports2.de_GetBucketNotificationConfigurationCommand = de_GetBucketNotificationConfigurationCommand;
    var de_GetBucketNotificationConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketOwnershipControlsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.OwnershipControls = de_OwnershipControls(data, context);
      return contents;
    };
    exports2.de_GetBucketOwnershipControlsCommand = de_GetBucketOwnershipControlsCommand;
    var de_GetBucketOwnershipControlsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketPolicyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = await collectBodyString(output.body, context);
      contents.Policy = (0, smithy_client_1.expectString)(data);
      return contents;
    };
    exports2.de_GetBucketPolicyCommand = de_GetBucketPolicyCommand;
    var de_GetBucketPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketPolicyStatusCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketPolicyStatusCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.PolicyStatus = de_PolicyStatus(data, context);
      return contents;
    };
    exports2.de_GetBucketPolicyStatusCommand = de_GetBucketPolicyStatusCommand;
    var de_GetBucketPolicyStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketReplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
      return contents;
    };
    exports2.de_GetBucketReplicationCommand = de_GetBucketReplicationCommand;
    var de_GetBucketReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketRequestPaymentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketRequestPaymentCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Payer"] !== void 0) {
        contents.Payer = (0, smithy_client_1.expectString)(data["Payer"]);
      }
      return contents;
    };
    exports2.de_GetBucketRequestPaymentCommand = de_GetBucketRequestPaymentCommand;
    var de_GetBucketRequestPaymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketTaggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents.TagSet = [];
      } else if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
        contents.TagSet = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
      }
      return contents;
    };
    exports2.de_GetBucketTaggingCommand = de_GetBucketTaggingCommand;
    var de_GetBucketTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketVersioningCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketVersioningCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["MfaDelete"] !== void 0) {
        contents.MFADelete = (0, smithy_client_1.expectString)(data["MfaDelete"]);
      }
      if (data["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(data["Status"]);
      }
      return contents;
    };
    exports2.de_GetBucketVersioningCommand = de_GetBucketVersioningCommand;
    var de_GetBucketVersioningCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketWebsiteCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ErrorDocument"] !== void 0) {
        contents.ErrorDocument = de_ErrorDocument(data["ErrorDocument"], context);
      }
      if (data["IndexDocument"] !== void 0) {
        contents.IndexDocument = de_IndexDocument(data["IndexDocument"], context);
      }
      if (data["RedirectAllRequestsTo"] !== void 0) {
        contents.RedirectAllRequestsTo = de_RedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
      }
      if (data.RoutingRules === "") {
        contents.RoutingRules = [];
      } else if (data["RoutingRules"] !== void 0 && data["RoutingRules"]["RoutingRule"] !== void 0) {
        contents.RoutingRules = de_RoutingRules((0, smithy_client_1.getArrayIfSingleItem)(data["RoutingRules"]["RoutingRule"]), context);
      }
      return contents;
    };
    exports2.de_GetBucketWebsiteCommand = de_GetBucketWebsiteCommand;
    var de_GetBucketWebsiteCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        ContentLength: [
          () => void 0 !== output.headers["content-length"],
          () => (0, smithy_client_1.strictParseLong)(output.headers["content-length"])
        ],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        MissingMeta: [
          () => void 0 !== output.headers["x-amz-missing-meta"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentRange: [, output.headers["content-range"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
          () => void 0 !== output.headers["expires"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
          () => void 0 !== output.headers["x-amz-mp-parts-count"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-mp-parts-count"])
        ],
        TagCount: [
          () => void 0 !== output.headers["x-amz-tagging-count"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-tagging-count"])
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
          () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    };
    exports2.de_GetObjectCommand = de_GetObjectCommand;
    var de_GetObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
          throw await de_InvalidObjectStateRes(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetObjectAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectAclCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents.Grants = [];
      } else if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
        contents.Grants = de_Grants((0, smithy_client_1.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      return contents;
    };
    exports2.de_GetObjectAclCommand = de_GetObjectAclCommand;
    var de_GetObjectAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetObjectAttributesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectAttributesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Checksum"] !== void 0) {
        contents.Checksum = de_Checksum(data["Checksum"], context);
      }
      if (data["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(data["ETag"]);
      }
      if (data["ObjectParts"] !== void 0) {
        contents.ObjectParts = de_GetObjectAttributesParts(data["ObjectParts"], context);
      }
      if (data["ObjectSize"] !== void 0) {
        contents.ObjectSize = (0, smithy_client_1.strictParseLong)(data["ObjectSize"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(data["StorageClass"]);
      }
      return contents;
    };
    exports2.de_GetObjectAttributesCommand = de_GetObjectAttributesCommand;
    var de_GetObjectAttributesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetObjectLegalHoldCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectLegalHoldCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.LegalHold = de_ObjectLockLegalHold(data, context);
      return contents;
    };
    exports2.de_GetObjectLegalHoldCommand = de_GetObjectLegalHoldCommand;
    var de_GetObjectLegalHoldCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetObjectLockConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectLockConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
      return contents;
    };
    exports2.de_GetObjectLockConfigurationCommand = de_GetObjectLockConfigurationCommand;
    var de_GetObjectLockConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetObjectRetentionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectRetentionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.Retention = de_ObjectLockRetention(data, context);
      return contents;
    };
    exports2.de_GetObjectRetentionCommand = de_GetObjectRetentionCommand;
    var de_GetObjectRetentionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectTaggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents.TagSet = [];
      } else if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
        contents.TagSet = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
      }
      return contents;
    };
    exports2.de_GetObjectTaggingCommand = de_GetObjectTaggingCommand;
    var de_GetObjectTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetObjectTorrentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectTorrentCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    };
    exports2.de_GetObjectTorrentCommand = de_GetObjectTorrentCommand;
    var de_GetObjectTorrentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_GetPublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPublicAccessBlockCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
      return contents;
    };
    exports2.de_GetPublicAccessBlockCommand = de_GetPublicAccessBlockCommand;
    var de_GetPublicAccessBlockCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_HeadBucketCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_HeadBucketCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_HeadBucketCommand = de_HeadBucketCommand;
    var de_HeadBucketCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await de_NotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_HeadObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_HeadObjectCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        ArchiveStatus: [, output.headers["x-amz-archive-status"]],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        ContentLength: [
          () => void 0 !== output.headers["content-length"],
          () => (0, smithy_client_1.strictParseLong)(output.headers["content-length"])
        ],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ETag: [, output.headers["etag"]],
        MissingMeta: [
          () => void 0 !== output.headers["x-amz-missing-meta"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
          () => void 0 !== output.headers["expires"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
          () => void 0 !== output.headers["x-amz-mp-parts-count"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-mp-parts-count"])
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
          () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_HeadObjectCommand = de_HeadObjectCommand;
    var de_HeadObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await de_NotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListBucketAnalyticsConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketAnalyticsConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AnalyticsConfiguration === "") {
        contents.AnalyticsConfigurationList = [];
      } else if (data["AnalyticsConfiguration"] !== void 0) {
        contents.AnalyticsConfigurationList = de_AnalyticsConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["AnalyticsConfiguration"]), context);
      }
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.de_ListBucketAnalyticsConfigurationsCommand = de_ListBucketAnalyticsConfigurationsCommand;
    var de_ListBucketAnalyticsConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data.IntelligentTieringConfiguration === "") {
        contents.IntelligentTieringConfigurationList = [];
      } else if (data["IntelligentTieringConfiguration"] !== void 0) {
        contents.IntelligentTieringConfigurationList = de_IntelligentTieringConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["IntelligentTieringConfiguration"]), context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.de_ListBucketIntelligentTieringConfigurationsCommand = de_ListBucketIntelligentTieringConfigurationsCommand;
    var de_ListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListBucketInventoryConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketInventoryConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data.InventoryConfiguration === "") {
        contents.InventoryConfigurationList = [];
      } else if (data["InventoryConfiguration"] !== void 0) {
        contents.InventoryConfigurationList = de_InventoryConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["InventoryConfiguration"]), context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.de_ListBucketInventoryConfigurationsCommand = de_ListBucketInventoryConfigurationsCommand;
    var de_ListBucketInventoryConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListBucketMetricsConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketMetricsConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data.MetricsConfiguration === "") {
        contents.MetricsConfigurationList = [];
      } else if (data["MetricsConfiguration"] !== void 0) {
        contents.MetricsConfigurationList = de_MetricsConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["MetricsConfiguration"]), context);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.de_ListBucketMetricsConfigurationsCommand = de_ListBucketMetricsConfigurationsCommand;
    var de_ListBucketMetricsConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListBucketsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Buckets === "") {
        contents.Buckets = [];
      } else if (data["Buckets"] !== void 0 && data["Buckets"]["Bucket"] !== void 0) {
        contents.Buckets = de_Buckets((0, smithy_client_1.getArrayIfSingleItem)(data["Buckets"]["Bucket"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      return contents;
    };
    exports2.de_ListBucketsCommand = de_ListBucketsCommand;
    var de_ListBucketsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListMultipartUploadsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListMultipartUploadsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["KeyMarker"] !== void 0) {
        contents.KeyMarker = (0, smithy_client_1.expectString)(data["KeyMarker"]);
      }
      if (data["MaxUploads"] !== void 0) {
        contents.MaxUploads = (0, smithy_client_1.strictParseInt32)(data["MaxUploads"]);
      }
      if (data["NextKeyMarker"] !== void 0) {
        contents.NextKeyMarker = (0, smithy_client_1.expectString)(data["NextKeyMarker"]);
      }
      if (data["NextUploadIdMarker"] !== void 0) {
        contents.NextUploadIdMarker = (0, smithy_client_1.expectString)(data["NextUploadIdMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      if (data["UploadIdMarker"] !== void 0) {
        contents.UploadIdMarker = (0, smithy_client_1.expectString)(data["UploadIdMarker"]);
      }
      if (data.Upload === "") {
        contents.Uploads = [];
      } else if (data["Upload"] !== void 0) {
        contents.Uploads = de_MultipartUploadList((0, smithy_client_1.getArrayIfSingleItem)(data["Upload"]), context);
      }
      return contents;
    };
    exports2.de_ListMultipartUploadsCommand = de_ListMultipartUploadsCommand;
    var de_ListMultipartUploadsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListObjectsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListObjectsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data.Contents === "") {
        contents.Contents = [];
      } else if (data["Contents"] !== void 0) {
        contents.Contents = de_ObjectList((0, smithy_client_1.getArrayIfSingleItem)(data["Contents"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = (0, smithy_client_1.strictParseInt32)(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(data["Name"]);
      }
      if (data["NextMarker"] !== void 0) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      return contents;
    };
    exports2.de_ListObjectsCommand = de_ListObjectsCommand;
    var de_ListObjectsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await de_NoSuchBucketRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListObjectsV2Command = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListObjectsV2CommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data.Contents === "") {
        contents.Contents = [];
      } else if (data["Contents"] !== void 0) {
        contents.Contents = de_ObjectList((0, smithy_client_1.getArrayIfSingleItem)(data["Contents"]), context);
      }
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["KeyCount"] !== void 0) {
        contents.KeyCount = (0, smithy_client_1.strictParseInt32)(data["KeyCount"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = (0, smithy_client_1.strictParseInt32)(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(data["Name"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      if (data["StartAfter"] !== void 0) {
        contents.StartAfter = (0, smithy_client_1.expectString)(data["StartAfter"]);
      }
      return contents;
    };
    exports2.de_ListObjectsV2Command = de_ListObjectsV2Command;
    var de_ListObjectsV2CommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await de_NoSuchBucketRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListObjectVersionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListObjectVersionsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data.DeleteMarker === "") {
        contents.DeleteMarkers = [];
      } else if (data["DeleteMarker"] !== void 0) {
        contents.DeleteMarkers = de_DeleteMarkers((0, smithy_client_1.getArrayIfSingleItem)(data["DeleteMarker"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["KeyMarker"] !== void 0) {
        contents.KeyMarker = (0, smithy_client_1.expectString)(data["KeyMarker"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = (0, smithy_client_1.strictParseInt32)(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(data["Name"]);
      }
      if (data["NextKeyMarker"] !== void 0) {
        contents.NextKeyMarker = (0, smithy_client_1.expectString)(data["NextKeyMarker"]);
      }
      if (data["NextVersionIdMarker"] !== void 0) {
        contents.NextVersionIdMarker = (0, smithy_client_1.expectString)(data["NextVersionIdMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      if (data["VersionIdMarker"] !== void 0) {
        contents.VersionIdMarker = (0, smithy_client_1.expectString)(data["VersionIdMarker"]);
      }
      if (data.Version === "") {
        contents.Versions = [];
      } else if (data["Version"] !== void 0) {
        contents.Versions = de_ObjectVersionList((0, smithy_client_1.getArrayIfSingleItem)(data["Version"]), context);
      }
      return contents;
    };
    exports2.de_ListObjectVersionsCommand = de_ListObjectVersionsCommand;
    var de_ListObjectVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_ListPartsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListPartsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        AbortDate: [
          () => void 0 !== output.headers["x-amz-abort-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = (0, smithy_client_1.expectString)(data["ChecksumAlgorithm"]);
      }
      if (data["Initiator"] !== void 0) {
        contents.Initiator = de_Initiator(data["Initiator"], context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(data["Key"]);
      }
      if (data["MaxParts"] !== void 0) {
        contents.MaxParts = (0, smithy_client_1.strictParseInt32)(data["MaxParts"]);
      }
      if (data["NextPartNumberMarker"] !== void 0) {
        contents.NextPartNumberMarker = (0, smithy_client_1.expectString)(data["NextPartNumberMarker"]);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      if (data["PartNumberMarker"] !== void 0) {
        contents.PartNumberMarker = (0, smithy_client_1.expectString)(data["PartNumberMarker"]);
      }
      if (data.Part === "") {
        contents.Parts = [];
      } else if (data["Part"] !== void 0) {
        contents.Parts = de_Parts((0, smithy_client_1.getArrayIfSingleItem)(data["Part"]), context);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(data["StorageClass"]);
      }
      if (data["UploadId"] !== void 0) {
        contents.UploadId = (0, smithy_client_1.expectString)(data["UploadId"]);
      }
      return contents;
    };
    exports2.de_ListPartsCommand = de_ListPartsCommand;
    var de_ListPartsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketAccelerateConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketAccelerateConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketAccelerateConfigurationCommand = de_PutBucketAccelerateConfigurationCommand;
    var de_PutBucketAccelerateConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketAclCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketAclCommand = de_PutBucketAclCommand;
    var de_PutBucketAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketAnalyticsConfigurationCommand = de_PutBucketAnalyticsConfigurationCommand;
    var de_PutBucketAnalyticsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketCorsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketCorsCommand = de_PutBucketCorsCommand;
    var de_PutBucketCorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketEncryptionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketEncryptionCommand = de_PutBucketEncryptionCommand;
    var de_PutBucketEncryptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketIntelligentTieringConfigurationCommand = de_PutBucketIntelligentTieringConfigurationCommand;
    var de_PutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketInventoryConfigurationCommand = de_PutBucketInventoryConfigurationCommand;
    var de_PutBucketInventoryConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketLifecycleConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketLifecycleConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketLifecycleConfigurationCommand = de_PutBucketLifecycleConfigurationCommand;
    var de_PutBucketLifecycleConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketLoggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketLoggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketLoggingCommand = de_PutBucketLoggingCommand;
    var de_PutBucketLoggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketMetricsConfigurationCommand = de_PutBucketMetricsConfigurationCommand;
    var de_PutBucketMetricsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketNotificationConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketNotificationConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketNotificationConfigurationCommand = de_PutBucketNotificationConfigurationCommand;
    var de_PutBucketNotificationConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketOwnershipControlsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketOwnershipControlsCommand = de_PutBucketOwnershipControlsCommand;
    var de_PutBucketOwnershipControlsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketPolicyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketPolicyCommand = de_PutBucketPolicyCommand;
    var de_PutBucketPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketReplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketReplicationCommand = de_PutBucketReplicationCommand;
    var de_PutBucketReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketRequestPaymentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketRequestPaymentCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketRequestPaymentCommand = de_PutBucketRequestPaymentCommand;
    var de_PutBucketRequestPaymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketTaggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketTaggingCommand = de_PutBucketTaggingCommand;
    var de_PutBucketTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketVersioningCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketVersioningCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketVersioningCommand = de_PutBucketVersioningCommand;
    var de_PutBucketVersioningCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketWebsiteCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutBucketWebsiteCommand = de_PutBucketWebsiteCommand;
    var de_PutBucketWebsiteCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutObjectCommand = de_PutObjectCommand;
    var de_PutObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutObjectAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectAclCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutObjectAclCommand = de_PutObjectAclCommand;
    var de_PutObjectAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutObjectLegalHoldCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectLegalHoldCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutObjectLegalHoldCommand = de_PutObjectLegalHoldCommand;
    var de_PutObjectLegalHoldCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutObjectLockConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectLockConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutObjectLockConfigurationCommand = de_PutObjectLockConfigurationCommand;
    var de_PutObjectLockConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutObjectRetentionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectRetentionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutObjectRetentionCommand = de_PutObjectRetentionCommand;
    var de_PutObjectRetentionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectTaggingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutObjectTaggingCommand = de_PutObjectTaggingCommand;
    var de_PutObjectTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_PutPublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutPublicAccessBlockCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_PutPublicAccessBlockCommand = de_PutPublicAccessBlockCommand;
    var de_PutPublicAccessBlockCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_RestoreObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RestoreObjectCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        RestoreOutputPath: [, output.headers["x-amz-restore-output-path"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_RestoreObjectCommand = de_RestoreObjectCommand;
    var de_RestoreObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
          throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SelectObjectContentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_SelectObjectContentCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = output.body;
      contents.Payload = de_SelectObjectContentEventStream(data, context);
      return contents;
    };
    exports2.de_SelectObjectContentCommand = de_SelectObjectContentCommand;
    var de_SelectObjectContentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_UploadPartCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UploadPartCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_UploadPartCommand = de_UploadPartCommand;
    var de_UploadPartCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_UploadPartCopyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UploadPartCopyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.CopyPartResult = de_CopyPartResult(data, context);
      return contents;
    };
    exports2.de_UploadPartCopyCommand = de_UploadPartCopyCommand;
    var de_UploadPartCopyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_WriteGetObjectResponseCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_WriteGetObjectResponseCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_WriteGetObjectResponseCommand = de_WriteGetObjectResponseCommand;
    var de_WriteGetObjectResponseCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(S3ServiceException_1.S3ServiceException);
    var de_BucketAlreadyExistsRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.BucketAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_BucketAlreadyOwnedByYouRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.BucketAlreadyOwnedByYou({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidObjectStateRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      if (data["AccessTier"] !== void 0) {
        contents.AccessTier = (0, smithy_client_1.expectString)(data["AccessTier"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(data["StorageClass"]);
      }
      const exception = new models_0_1.InvalidObjectState({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NoSuchBucketRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NoSuchBucket({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NoSuchKeyRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NoSuchKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NoSuchUploadRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NoSuchUpload({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NotFoundRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ObjectAlreadyInActiveTierErrorRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_1_1.ObjectAlreadyInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ObjectNotInActiveTierErrorRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const exception = new models_0_1.ObjectNotInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_SelectObjectContentEventStream = (output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["Records"] != null) {
          return {
            Records: await de_RecordsEvent_event(event["Records"], context)
          };
        }
        if (event["Stats"] != null) {
          return {
            Stats: await de_StatsEvent_event(event["Stats"], context)
          };
        }
        if (event["Progress"] != null) {
          return {
            Progress: await de_ProgressEvent_event(event["Progress"], context)
          };
        }
        if (event["Cont"] != null) {
          return {
            Cont: await de_ContinuationEvent_event(event["Cont"], context)
          };
        }
        if (event["End"] != null) {
          return {
            End: await de_EndEvent_event(event["End"], context)
          };
        }
        return { $unknown: output };
      });
    };
    var de_ContinuationEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      Object.assign(contents, de_ContinuationEvent(data, context));
      return contents;
    };
    var de_EndEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      Object.assign(contents, de_EndEvent(data, context));
      return contents;
    };
    var de_ProgressEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      contents.Details = de_Progress(data, context);
      return contents;
    };
    var de_RecordsEvent_event = async (output, context) => {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    };
    var de_StatsEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      contents.Details = de_Stats(data, context);
      return contents;
    };
    var se_AbortIncompleteMultipartUpload = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AbortIncompleteMultipartUpload");
      if (input.DaysAfterInitiation != null) {
        const node = xml_builder_1.XmlNode.of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_AccelerateConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AccelerateConfiguration");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("BucketAccelerateStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_AccessControlPolicy = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AccessControlPolicy");
      if (input.Grants != null) {
        const nodes = se_Grants(input.Grants, context);
        const containerNode = new xml_builder_1.XmlNode("AccessControlList");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Owner != null) {
        const node = se_Owner(input.Owner, context).withName("Owner");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_AccessControlTranslation = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AccessControlTranslation");
      if (input.Owner != null) {
        const node = xml_builder_1.XmlNode.of("OwnerOverride", input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_AllowedHeaders = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("AllowedHeader", entry);
        return node.withName("member");
      });
    };
    var se_AllowedMethods = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("AllowedMethod", entry);
        return node.withName("member");
      });
    };
    var se_AllowedOrigins = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("AllowedOrigin", entry);
        return node.withName("member");
      });
    };
    var se_AnalyticsAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_AnalyticsConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("AnalyticsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_AnalyticsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClassAnalysis != null) {
        const node = se_StorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_AnalyticsExportDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsExportDestination");
      if (input.S3BucketDestination != null) {
        const node = se_AnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_AnalyticsFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsFilter");
      models_0_1.AnalyticsFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_AnalyticsAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var se_AnalyticsS3BucketDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsS3BucketDestination");
      if (input.Format != null) {
        const node = xml_builder_1.XmlNode.of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
      }
      if (input.BucketAccountId != null) {
        const node = xml_builder_1.XmlNode.of("AccountId", input.BucketAccountId).withName("BucketAccountId");
        bodyNode.addChildNode(node);
      }
      if (input.Bucket != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_BucketLifecycleConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("BucketLifecycleConfiguration");
      if (input.Rules != null) {
        const nodes = se_LifecycleRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_BucketLoggingStatus = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("BucketLoggingStatus");
      if (input.LoggingEnabled != null) {
        const node = se_LoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_CompletedMultipartUpload = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CompletedMultipartUpload");
      if (input.Parts != null) {
        const nodes = se_CompletedPartList(input.Parts, context);
        nodes.map((node) => {
          node = node.withName("Part");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_CompletedPart = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CompletedPart");
      if (input.ETag != null) {
        const node = xml_builder_1.XmlNode.of("ETag", input.ETag).withName("ETag");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumCRC32 != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumCRC32C != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumSHA1 != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumSHA256 != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
        bodyNode.addChildNode(node);
      }
      if (input.PartNumber != null) {
        const node = xml_builder_1.XmlNode.of("PartNumber", String(input.PartNumber)).withName("PartNumber");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_CompletedPartList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_CompletedPart(entry, context);
        return node.withName("member");
      });
    };
    var se_Condition = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Condition");
      if (input.HttpErrorCodeReturnedEquals != null) {
        const node = xml_builder_1.XmlNode.of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals).withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
      }
      if (input.KeyPrefixEquals != null) {
        const node = xml_builder_1.XmlNode.of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_CORSConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CORSConfiguration");
      if (input.CORSRules != null) {
        const nodes = se_CORSRules(input.CORSRules, context);
        nodes.map((node) => {
          node = node.withName("CORSRule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_CORSRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CORSRule");
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.AllowedHeaders != null) {
        const nodes = se_AllowedHeaders(input.AllowedHeaders, context);
        nodes.map((node) => {
          node = node.withName("AllowedHeader");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AllowedMethods != null) {
        const nodes = se_AllowedMethods(input.AllowedMethods, context);
        nodes.map((node) => {
          node = node.withName("AllowedMethod");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AllowedOrigins != null) {
        const nodes = se_AllowedOrigins(input.AllowedOrigins, context);
        nodes.map((node) => {
          node = node.withName("AllowedOrigin");
          bodyNode.addChildNode(node);
        });
      }
      if (input.ExposeHeaders != null) {
        const nodes = se_ExposeHeaders(input.ExposeHeaders, context);
        nodes.map((node) => {
          node = node.withName("ExposeHeader");
          bodyNode.addChildNode(node);
        });
      }
      if (input.MaxAgeSeconds != null) {
        const node = xml_builder_1.XmlNode.of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_CORSRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_CORSRule(entry, context);
        return node.withName("member");
      });
    };
    var se_CreateBucketConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CreateBucketConfiguration");
      if (input.LocationConstraint != null) {
        const node = xml_builder_1.XmlNode.of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_CSVInput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CSVInput");
      if (input.FileHeaderInfo != null) {
        const node = xml_builder_1.XmlNode.of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
      }
      if (input.Comments != null) {
        const node = xml_builder_1.XmlNode.of("Comments", input.Comments).withName("Comments");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteEscapeCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.RecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.FieldDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.AllowQuotedRecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter)).withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_CSVOutput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CSVOutput");
      if (input.QuoteFields != null) {
        const node = xml_builder_1.XmlNode.of("QuoteFields", input.QuoteFields).withName("QuoteFields");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteEscapeCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.RecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.FieldDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_DefaultRetention = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("DefaultRetention");
      if (input.Mode != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.Years != null) {
        const node = xml_builder_1.XmlNode.of("Years", String(input.Years)).withName("Years");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Delete = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Delete");
      if (input.Objects != null) {
        const nodes = se_ObjectIdentifierList(input.Objects, context);
        nodes.map((node) => {
          node = node.withName("Object");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Quiet != null) {
        const node = xml_builder_1.XmlNode.of("Quiet", String(input.Quiet)).withName("Quiet");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_DeleteMarkerReplication = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("DeleteMarkerReplication");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Destination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Destination");
      if (input.Bucket != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Account != null) {
        const node = xml_builder_1.XmlNode.of("AccountId", input.Account).withName("Account");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      if (input.AccessControlTranslation != null) {
        const node = se_AccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
      }
      if (input.EncryptionConfiguration != null) {
        const node = se_EncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
      }
      if (input.ReplicationTime != null) {
        const node = se_ReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
        bodyNode.addChildNode(node);
      }
      if (input.Metrics != null) {
        const node = se_Metrics(input.Metrics, context).withName("Metrics");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Encryption = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Encryption");
      if (input.EncryptionType != null) {
        const node = xml_builder_1.XmlNode.of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
        bodyNode.addChildNode(node);
      }
      if (input.KMSKeyId != null) {
        const node = xml_builder_1.XmlNode.of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
        bodyNode.addChildNode(node);
      }
      if (input.KMSContext != null) {
        const node = xml_builder_1.XmlNode.of("KMSContext", input.KMSContext).withName("KMSContext");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_EncryptionConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("EncryptionConfiguration");
      if (input.ReplicaKmsKeyID != null) {
        const node = xml_builder_1.XmlNode.of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ErrorDocument = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ErrorDocument");
      if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_EventBridgeConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("EventBridgeConfiguration");
      return bodyNode;
    };
    var se_EventList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("Event", entry);
        return node.withName("member");
      });
    };
    var se_ExistingObjectReplication = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ExistingObjectReplication");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ExistingObjectReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ExposeHeaders = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("ExposeHeader", entry);
        return node.withName("member");
      });
    };
    var se_FilterRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("FilterRule");
      if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("FilterRuleName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("FilterRuleValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_FilterRuleList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_FilterRule(entry, context);
        return node.withName("member");
      });
    };
    var se_GlacierJobParameters = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("GlacierJobParameters");
      if (input.Tier != null) {
        const node = xml_builder_1.XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Grant = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Grant");
      if (input.Grantee != null) {
        const node = se_Grantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
      }
      if (input.Permission != null) {
        const node = xml_builder_1.XmlNode.of("Permission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Grantee = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Grantee");
      if (input.DisplayName != null) {
        const node = xml_builder_1.XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
      }
      if (input.EmailAddress != null) {
        const node = xml_builder_1.XmlNode.of("EmailAddress", input.EmailAddress).withName("EmailAddress");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.URI != null) {
        const node = xml_builder_1.XmlNode.of("URI", input.URI).withName("URI");
        bodyNode.addChildNode(node);
      }
      if (input.Type != null) {
        bodyNode.addAttribute("xsi:type", input.Type);
      }
      return bodyNode;
    };
    var se_Grants = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_Grant(entry, context);
        return node.withName("Grant");
      });
    };
    var se_IndexDocument = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IndexDocument");
      if (input.Suffix != null) {
        const node = xml_builder_1.XmlNode.of("Suffix", input.Suffix).withName("Suffix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InputSerialization = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InputSerialization");
      if (input.CSV != null) {
        const node = se_CSVInput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
      }
      if (input.CompressionType != null) {
        const node = xml_builder_1.XmlNode.of("CompressionType", input.CompressionType).withName("CompressionType");
        bodyNode.addChildNode(node);
      }
      if (input.JSON != null) {
        const node = se_JSONInput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
      }
      if (input.Parquet != null) {
        const node = se_ParquetInput(input.Parquet, context).withName("Parquet");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_IntelligentTieringAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_IntelligentTieringConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_IntelligentTieringFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Tierings != null) {
        const nodes = se_TieringList(input.Tierings, context);
        nodes.map((node) => {
          node = node.withName("Tiering");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_IntelligentTieringFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringFilter");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tag != null) {
        const node = se_Tag(input.Tag, context).withName("Tag");
        bodyNode.addChildNode(node);
      }
      if (input.And != null) {
        const node = se_IntelligentTieringAndOperator(input.And, context).withName("And");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InventoryConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryConfiguration");
      if (input.Destination != null) {
        const node = se_InventoryDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      if (input.IsEnabled != null) {
        const node = xml_builder_1.XmlNode.of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_InventoryFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("InventoryId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.IncludedObjectVersions != null) {
        const node = xml_builder_1.XmlNode.of("InventoryIncludedObjectVersions", input.IncludedObjectVersions).withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
      }
      if (input.OptionalFields != null) {
        const nodes = se_InventoryOptionalFields(input.OptionalFields, context);
        const containerNode = new xml_builder_1.XmlNode("OptionalFields");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Schedule != null) {
        const node = se_InventorySchedule(input.Schedule, context).withName("Schedule");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InventoryDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryDestination");
      if (input.S3BucketDestination != null) {
        const node = se_InventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InventoryEncryption = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryEncryption");
      if (input.SSES3 != null) {
        const node = se_SSES3(input.SSES3, context).withName("SSE-S3");
        bodyNode.addChildNode(node);
      }
      if (input.SSEKMS != null) {
        const node = se_SSEKMS(input.SSEKMS, context).withName("SSE-KMS");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InventoryFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryFilter");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InventoryOptionalFields = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("InventoryOptionalField", entry);
        return node.withName("Field");
      });
    };
    var se_InventoryS3BucketDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryS3BucketDestination");
      if (input.AccountId != null) {
        const node = xml_builder_1.XmlNode.of("AccountId", input.AccountId).withName("AccountId");
        bodyNode.addChildNode(node);
      }
      if (input.Bucket != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Format != null) {
        const node = xml_builder_1.XmlNode.of("InventoryFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Encryption != null) {
        const node = se_InventoryEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_InventorySchedule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventorySchedule");
      if (input.Frequency != null) {
        const node = xml_builder_1.XmlNode.of("InventoryFrequency", input.Frequency).withName("Frequency");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_JSONInput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("JSONInput");
      if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("JSONType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_JSONOutput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("JSONOutput");
      if (input.RecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_LambdaFunctionConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LambdaFunctionConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.LambdaFunctionArn != null) {
        const node = xml_builder_1.XmlNode.of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_LambdaFunctionConfigurationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_LambdaFunctionConfiguration(entry, context);
        return node.withName("member");
      });
    };
    var se_LifecycleExpiration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleExpiration");
      if (input.Date != null) {
        const node = xml_builder_1.XmlNode.of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.ExpiredObjectDeleteMarker != null) {
        const node = xml_builder_1.XmlNode.of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker)).withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_LifecycleRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleRule");
      if (input.Expiration != null) {
        const node = se_LifecycleExpiration(input.Expiration, context).withName("Expiration");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_LifecycleRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ExpirationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Transitions != null) {
        const nodes = se_TransitionList(input.Transitions, context);
        nodes.map((node) => {
          node = node.withName("Transition");
          bodyNode.addChildNode(node);
        });
      }
      if (input.NoncurrentVersionTransitions != null) {
        const nodes = se_NoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
        nodes.map((node) => {
          node = node.withName("NoncurrentVersionTransition");
          bodyNode.addChildNode(node);
        });
      }
      if (input.NoncurrentVersionExpiration != null) {
        const node = se_NoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
      }
      if (input.AbortIncompleteMultipartUpload != null) {
        const node = se_AbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_LifecycleRuleAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleRuleAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      if (input.ObjectSizeGreaterThan != null) {
        const node = xml_builder_1.XmlNode.of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan)).withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
      }
      if (input.ObjectSizeLessThan != null) {
        const node = xml_builder_1.XmlNode.of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan)).withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_LifecycleRuleFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleRuleFilter");
      models_0_1.LifecycleRuleFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        ObjectSizeGreaterThan: (value) => {
          const node = xml_builder_1.XmlNode.of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
          bodyNode.addChildNode(node);
        },
        ObjectSizeLessThan: (value) => {
          const node = xml_builder_1.XmlNode.of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_LifecycleRuleAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var se_LifecycleRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_LifecycleRule(entry, context);
        return node.withName("member");
      });
    };
    var se_LoggingEnabled = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LoggingEnabled");
      if (input.TargetBucket != null) {
        const node = xml_builder_1.XmlNode.of("TargetBucket", input.TargetBucket).withName("TargetBucket");
        bodyNode.addChildNode(node);
      }
      if (input.TargetGrants != null) {
        const nodes = se_TargetGrants(input.TargetGrants, context);
        const containerNode = new xml_builder_1.XmlNode("TargetGrants");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.TargetPrefix != null) {
        const node = xml_builder_1.XmlNode.of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_MetadataEntry = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetadataEntry");
      if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("MetadataKey", input.Name).withName("Name");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("MetadataValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Metrics = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Metrics");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("MetricsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.EventThreshold != null) {
        const node = se_ReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_MetricsAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetricsAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AccessPointArn != null) {
        const node = xml_builder_1.XmlNode.of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_MetricsConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetricsConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("MetricsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_MetricsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_MetricsFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetricsFilter");
      models_0_1.MetricsFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        AccessPointArn: (value) => {
          const node = xml_builder_1.XmlNode.of("AccessPointArn", value).withName("AccessPointArn");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_MetricsAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var se_NoncurrentVersionExpiration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NoncurrentVersionExpiration");
      if (input.NoncurrentDays != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
      }
      if (input.NewerNoncurrentVersions != null) {
        const node = xml_builder_1.XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_NoncurrentVersionTransition = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NoncurrentVersionTransition");
      if (input.NoncurrentDays != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      if (input.NewerNoncurrentVersions != null) {
        const node = xml_builder_1.XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_NoncurrentVersionTransitionList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_NoncurrentVersionTransition(entry, context);
        return node.withName("member");
      });
    };
    var se_NotificationConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NotificationConfiguration");
      if (input.TopicConfigurations != null) {
        const nodes = se_TopicConfigurationList(input.TopicConfigurations, context);
        nodes.map((node) => {
          node = node.withName("TopicConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.QueueConfigurations != null) {
        const nodes = se_QueueConfigurationList(input.QueueConfigurations, context);
        nodes.map((node) => {
          node = node.withName("QueueConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.LambdaFunctionConfigurations != null) {
        const nodes = se_LambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
        nodes.map((node) => {
          node = node.withName("CloudFunctionConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.EventBridgeConfiguration != null) {
        const node = se_EventBridgeConfiguration(input.EventBridgeConfiguration, context).withName("EventBridgeConfiguration");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_NotificationConfigurationFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NotificationConfigurationFilter");
      if (input.Key != null) {
        const node = se_S3KeyFilter(input.Key, context).withName("S3Key");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ObjectIdentifier = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectIdentifier");
      if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      if (input.VersionId != null) {
        const node = xml_builder_1.XmlNode.of("ObjectVersionId", input.VersionId).withName("VersionId");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ObjectIdentifierList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_ObjectIdentifier(entry, context);
        return node.withName("member");
      });
    };
    var se_ObjectLockConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockConfiguration");
      if (input.ObjectLockEnabled != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
      }
      if (input.Rule != null) {
        const node = se_ObjectLockRule(input.Rule, context).withName("Rule");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ObjectLockLegalHold = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockLegalHold");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ObjectLockRetention = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockRetention");
      if (input.Mode != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
      }
      if (input.RetainUntilDate != null) {
        const node = xml_builder_1.XmlNode.of("Date", (input.RetainUntilDate.toISOString().split(".")[0] + "Z").toString()).withName("RetainUntilDate");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ObjectLockRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockRule");
      if (input.DefaultRetention != null) {
        const node = se_DefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_OutputLocation = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OutputLocation");
      if (input.S3 != null) {
        const node = se_S3Location(input.S3, context).withName("S3");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_OutputSerialization = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OutputSerialization");
      if (input.CSV != null) {
        const node = se_CSVOutput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
      }
      if (input.JSON != null) {
        const node = se_JSONOutput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Owner = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Owner");
      if (input.DisplayName != null) {
        const node = xml_builder_1.XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_OwnershipControls = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OwnershipControls");
      if (input.Rules != null) {
        const nodes = se_OwnershipControlsRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_OwnershipControlsRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OwnershipControlsRule");
      if (input.ObjectOwnership != null) {
        const node = xml_builder_1.XmlNode.of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_OwnershipControlsRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_OwnershipControlsRule(entry, context);
        return node.withName("member");
      });
    };
    var se_ParquetInput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ParquetInput");
      return bodyNode;
    };
    var se_PublicAccessBlockConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("PublicAccessBlockConfiguration");
      if (input.BlockPublicAcls != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
      }
      if (input.IgnorePublicAcls != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
      }
      if (input.BlockPublicPolicy != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
      }
      if (input.RestrictPublicBuckets != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_QueueConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("QueueConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.QueueArn != null) {
        const node = xml_builder_1.XmlNode.of("QueueArn", input.QueueArn).withName("Queue");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_QueueConfigurationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_QueueConfiguration(entry, context);
        return node.withName("member");
      });
    };
    var se_Redirect = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Redirect");
      if (input.HostName != null) {
        const node = xml_builder_1.XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
      }
      if (input.HttpRedirectCode != null) {
        const node = xml_builder_1.XmlNode.of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
      }
      if (input.Protocol != null) {
        const node = xml_builder_1.XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
      }
      if (input.ReplaceKeyPrefixWith != null) {
        const node = xml_builder_1.XmlNode.of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
      }
      if (input.ReplaceKeyWith != null) {
        const node = xml_builder_1.XmlNode.of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_RedirectAllRequestsTo = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RedirectAllRequestsTo");
      if (input.HostName != null) {
        const node = xml_builder_1.XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
      }
      if (input.Protocol != null) {
        const node = xml_builder_1.XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ReplicaModifications = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicaModifications");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ReplicaModificationsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ReplicationConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationConfiguration");
      if (input.Role != null) {
        const node = xml_builder_1.XmlNode.of("Role", input.Role).withName("Role");
        bodyNode.addChildNode(node);
      }
      if (input.Rules != null) {
        const nodes = se_ReplicationRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_ReplicationRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationRule");
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.Priority != null) {
        const node = xml_builder_1.XmlNode.of("Priority", String(input.Priority)).withName("Priority");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_ReplicationRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ReplicationRuleStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.SourceSelectionCriteria != null) {
        const node = se_SourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
      }
      if (input.ExistingObjectReplication != null) {
        const node = se_ExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
      }
      if (input.Destination != null) {
        const node = se_Destination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      if (input.DeleteMarkerReplication != null) {
        const node = se_DeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ReplicationRuleAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationRuleAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_ReplicationRuleFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationRuleFilter");
      models_0_1.ReplicationRuleFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_ReplicationRuleAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var se_ReplicationRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_ReplicationRule(entry, context);
        return node.withName("member");
      });
    };
    var se_ReplicationTime = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationTime");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ReplicationTimeStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Time != null) {
        const node = se_ReplicationTimeValue(input.Time, context).withName("Time");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ReplicationTimeValue = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationTimeValue");
      if (input.Minutes != null) {
        const node = xml_builder_1.XmlNode.of("Minutes", String(input.Minutes)).withName("Minutes");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_RequestPaymentConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RequestPaymentConfiguration");
      if (input.Payer != null) {
        const node = xml_builder_1.XmlNode.of("Payer", input.Payer).withName("Payer");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_RequestProgress = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RequestProgress");
      if (input.Enabled != null) {
        const node = xml_builder_1.XmlNode.of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_RestoreRequest = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RestoreRequest");
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.GlacierJobParameters != null) {
        const node = se_GlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
      }
      if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("RestoreRequestType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
      }
      if (input.Tier != null) {
        const node = xml_builder_1.XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
      }
      if (input.Description != null) {
        const node = xml_builder_1.XmlNode.of("Description", input.Description).withName("Description");
        bodyNode.addChildNode(node);
      }
      if (input.SelectParameters != null) {
        const node = se_SelectParameters(input.SelectParameters, context).withName("SelectParameters");
        bodyNode.addChildNode(node);
      }
      if (input.OutputLocation != null) {
        const node = se_OutputLocation(input.OutputLocation, context).withName("OutputLocation");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_RoutingRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RoutingRule");
      if (input.Condition != null) {
        const node = se_Condition(input.Condition, context).withName("Condition");
        bodyNode.addChildNode(node);
      }
      if (input.Redirect != null) {
        const node = se_Redirect(input.Redirect, context).withName("Redirect");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_RoutingRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_RoutingRule(entry, context);
        return node.withName("RoutingRule");
      });
    };
    var se_S3KeyFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("S3KeyFilter");
      if (input.FilterRules != null) {
        const nodes = se_FilterRuleList(input.FilterRules, context);
        nodes.map((node) => {
          node = node.withName("FilterRule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_S3Location = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("S3Location");
      if (input.BucketName != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.BucketName).withName("BucketName");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("LocationPrefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Encryption != null) {
        const node = se_Encryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
      }
      if (input.CannedACL != null) {
        const node = xml_builder_1.XmlNode.of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
        bodyNode.addChildNode(node);
      }
      if (input.AccessControlList != null) {
        const nodes = se_Grants(input.AccessControlList, context);
        const containerNode = new xml_builder_1.XmlNode("AccessControlList");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Tagging != null) {
        const node = se_Tagging(input.Tagging, context).withName("Tagging");
        bodyNode.addChildNode(node);
      }
      if (input.UserMetadata != null) {
        const nodes = se_UserMetadata(input.UserMetadata, context);
        const containerNode = new xml_builder_1.XmlNode("UserMetadata");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ScanRange = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ScanRange");
      if (input.Start != null) {
        const node = xml_builder_1.XmlNode.of("Start", String(input.Start)).withName("Start");
        bodyNode.addChildNode(node);
      }
      if (input.End != null) {
        const node = xml_builder_1.XmlNode.of("End", String(input.End)).withName("End");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_SelectParameters = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SelectParameters");
      if (input.InputSerialization != null) {
        const node = se_InputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.ExpressionType != null) {
        const node = xml_builder_1.XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
      }
      if (input.Expression != null) {
        const node = xml_builder_1.XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
      }
      if (input.OutputSerialization != null) {
        const node = se_OutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ServerSideEncryptionByDefault = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionByDefault");
      if (input.SSEAlgorithm != null) {
        const node = xml_builder_1.XmlNode.of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
      }
      if (input.KMSMasterKeyID != null) {
        const node = xml_builder_1.XmlNode.of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ServerSideEncryptionConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionConfiguration");
      if (input.Rules != null) {
        const nodes = se_ServerSideEncryptionRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var se_ServerSideEncryptionRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionRule");
      if (input.ApplyServerSideEncryptionByDefault != null) {
        const node = se_ServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
      }
      if (input.BucketKeyEnabled != null) {
        const node = xml_builder_1.XmlNode.of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_ServerSideEncryptionRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_ServerSideEncryptionRule(entry, context);
        return node.withName("member");
      });
    };
    var se_SourceSelectionCriteria = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SourceSelectionCriteria");
      if (input.SseKmsEncryptedObjects != null) {
        const node = se_SseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
      }
      if (input.ReplicaModifications != null) {
        const node = se_ReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_SSEKMS = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SSE-KMS");
      if (input.KeyId != null) {
        const node = xml_builder_1.XmlNode.of("SSEKMSKeyId", input.KeyId).withName("KeyId");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_SseKmsEncryptedObjects = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SseKmsEncryptedObjects");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_SSES3 = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SSE-S3");
      return bodyNode;
    };
    var se_StorageClassAnalysis = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("StorageClassAnalysis");
      if (input.DataExport != null) {
        const node = se_StorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_StorageClassAnalysisDataExport = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("StorageClassAnalysisDataExport");
      if (input.OutputSchemaVersion != null) {
        const node = xml_builder_1.XmlNode.of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion).withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
      }
      if (input.Destination != null) {
        const node = se_AnalyticsExportDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Tag = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Tag");
      if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("Value", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_Tagging = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Tagging");
      if (input.TagSet != null) {
        const nodes = se_TagSet(input.TagSet, context);
        const containerNode = new xml_builder_1.XmlNode("TagSet");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      return bodyNode;
    };
    var se_TagSet = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_Tag(entry, context);
        return node.withName("Tag");
      });
    };
    var se_TargetGrant = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("TargetGrant");
      if (input.Grantee != null) {
        const node = se_Grantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
      }
      if (input.Permission != null) {
        const node = xml_builder_1.XmlNode.of("BucketLogsPermission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_TargetGrants = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_TargetGrant(entry, context);
        return node.withName("Grant");
      });
    };
    var se_Tiering = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Tiering");
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringDays", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.AccessTier != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_TieringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_Tiering(entry, context);
        return node.withName("member");
      });
    };
    var se_TopicConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("TopicConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.TopicArn != null) {
        const node = xml_builder_1.XmlNode.of("TopicArn", input.TopicArn).withName("Topic");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_TopicConfigurationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_TopicConfiguration(entry, context);
        return node.withName("member");
      });
    };
    var se_Transition = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Transition");
      if (input.Date != null) {
        const node = xml_builder_1.XmlNode.of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_TransitionList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_Transition(entry, context);
        return node.withName("member");
      });
    };
    var se_UserMetadata = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = se_MetadataEntry(entry, context);
        return node.withName("MetadataEntry");
      });
    };
    var se_VersioningConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("VersioningConfiguration");
      if (input.MFADelete != null) {
        const node = xml_builder_1.XmlNode.of("MFADelete", input.MFADelete).withName("MfaDelete");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("BucketVersioningStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var se_WebsiteConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("WebsiteConfiguration");
      if (input.ErrorDocument != null) {
        const node = se_ErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
        bodyNode.addChildNode(node);
      }
      if (input.IndexDocument != null) {
        const node = se_IndexDocument(input.IndexDocument, context).withName("IndexDocument");
        bodyNode.addChildNode(node);
      }
      if (input.RedirectAllRequestsTo != null) {
        const node = se_RedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
      }
      if (input.RoutingRules != null) {
        const nodes = se_RoutingRules(input.RoutingRules, context);
        const containerNode = new xml_builder_1.XmlNode("RoutingRules");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      return bodyNode;
    };
    var de_AbortIncompleteMultipartUpload = (output, context) => {
      const contents = {};
      if (output["DaysAfterInitiation"] !== void 0) {
        contents.DaysAfterInitiation = (0, smithy_client_1.strictParseInt32)(output["DaysAfterInitiation"]);
      }
      return contents;
    };
    var de_AccessControlTranslation = (output, context) => {
      const contents = {};
      if (output["Owner"] !== void 0) {
        contents.Owner = (0, smithy_client_1.expectString)(output["Owner"]);
      }
      return contents;
    };
    var de_AllowedHeaders = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_AllowedMethods = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_AllowedOrigins = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_AnalyticsAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      return contents;
    };
    var de_AnalyticsConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_AnalyticsFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      if (output["StorageClassAnalysis"] !== void 0) {
        contents.StorageClassAnalysis = de_StorageClassAnalysis(output["StorageClassAnalysis"], context);
      }
      return contents;
    };
    var de_AnalyticsConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_AnalyticsConfiguration(entry, context);
      });
    };
    var de_AnalyticsExportDestination = (output, context) => {
      const contents = {};
      if (output["S3BucketDestination"] !== void 0) {
        contents.S3BucketDestination = de_AnalyticsS3BucketDestination(output["S3BucketDestination"], context);
      }
      return contents;
    };
    var de_AnalyticsFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_AnalyticsAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_AnalyticsS3BucketDestination = (output, context) => {
      const contents = {};
      if (output["Format"] !== void 0) {
        contents.Format = (0, smithy_client_1.expectString)(output["Format"]);
      }
      if (output["BucketAccountId"] !== void 0) {
        contents.BucketAccountId = (0, smithy_client_1.expectString)(output["BucketAccountId"]);
      }
      if (output["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["Bucket"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      return contents;
    };
    var de_Bucket = (output, context) => {
      const contents = {};
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["CreationDate"] !== void 0) {
        contents.CreationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationDate"]));
      }
      return contents;
    };
    var de_Buckets = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Bucket(entry, context);
      });
    };
    var de_Checksum = (output, context) => {
      const contents = {};
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var de_ChecksumAlgorithmList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_CommonPrefix = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      return contents;
    };
    var de_CommonPrefixList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CommonPrefix(entry, context);
      });
    };
    var de_Condition = (output, context) => {
      const contents = {};
      if (output["HttpErrorCodeReturnedEquals"] !== void 0) {
        contents.HttpErrorCodeReturnedEquals = (0, smithy_client_1.expectString)(output["HttpErrorCodeReturnedEquals"]);
      }
      if (output["KeyPrefixEquals"] !== void 0) {
        contents.KeyPrefixEquals = (0, smithy_client_1.expectString)(output["KeyPrefixEquals"]);
      }
      return contents;
    };
    var de_ContinuationEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    var de_CopyObjectResult = (output, context) => {
      const contents = {};
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var de_CopyPartResult = (output, context) => {
      const contents = {};
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var de_CORSRule = (output, context) => {
      const contents = {};
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output.AllowedHeader === "") {
        contents.AllowedHeaders = [];
      } else if (output["AllowedHeader"] !== void 0) {
        contents.AllowedHeaders = de_AllowedHeaders((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedHeader"]), context);
      }
      if (output.AllowedMethod === "") {
        contents.AllowedMethods = [];
      } else if (output["AllowedMethod"] !== void 0) {
        contents.AllowedMethods = de_AllowedMethods((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedMethod"]), context);
      }
      if (output.AllowedOrigin === "") {
        contents.AllowedOrigins = [];
      } else if (output["AllowedOrigin"] !== void 0) {
        contents.AllowedOrigins = de_AllowedOrigins((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedOrigin"]), context);
      }
      if (output.ExposeHeader === "") {
        contents.ExposeHeaders = [];
      } else if (output["ExposeHeader"] !== void 0) {
        contents.ExposeHeaders = de_ExposeHeaders((0, smithy_client_1.getArrayIfSingleItem)(output["ExposeHeader"]), context);
      }
      if (output["MaxAgeSeconds"] !== void 0) {
        contents.MaxAgeSeconds = (0, smithy_client_1.strictParseInt32)(output["MaxAgeSeconds"]);
      }
      return contents;
    };
    var de_CORSRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CORSRule(entry, context);
      });
    };
    var de_DefaultRetention = (output, context) => {
      const contents = {};
      if (output["Mode"] !== void 0) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
      }
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["Years"] !== void 0) {
        contents.Years = (0, smithy_client_1.strictParseInt32)(output["Years"]);
      }
      return contents;
    };
    var de_DeletedObject = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["DeleteMarker"] !== void 0) {
        contents.DeleteMarker = (0, smithy_client_1.parseBoolean)(output["DeleteMarker"]);
      }
      if (output["DeleteMarkerVersionId"] !== void 0) {
        contents.DeleteMarkerVersionId = (0, smithy_client_1.expectString)(output["DeleteMarkerVersionId"]);
      }
      return contents;
    };
    var de_DeletedObjects = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_DeletedObject(entry, context);
      });
    };
    var de_DeleteMarkerEntry = (output, context) => {
      const contents = {};
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["IsLatest"] !== void 0) {
        contents.IsLatest = (0, smithy_client_1.parseBoolean)(output["IsLatest"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
      }
      return contents;
    };
    var de_DeleteMarkerReplication = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_DeleteMarkers = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_DeleteMarkerEntry(entry, context);
      });
    };
    var de_Destination = (output, context) => {
      const contents = {};
      if (output["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["Bucket"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["AccessControlTranslation"] !== void 0) {
        contents.AccessControlTranslation = de_AccessControlTranslation(output["AccessControlTranslation"], context);
      }
      if (output["EncryptionConfiguration"] !== void 0) {
        contents.EncryptionConfiguration = de_EncryptionConfiguration(output["EncryptionConfiguration"], context);
      }
      if (output["ReplicationTime"] !== void 0) {
        contents.ReplicationTime = de_ReplicationTime(output["ReplicationTime"], context);
      }
      if (output["Metrics"] !== void 0) {
        contents.Metrics = de_Metrics(output["Metrics"], context);
      }
      return contents;
    };
    var de_EncryptionConfiguration = (output, context) => {
      const contents = {};
      if (output["ReplicaKmsKeyID"] !== void 0) {
        contents.ReplicaKmsKeyID = (0, smithy_client_1.expectString)(output["ReplicaKmsKeyID"]);
      }
      return contents;
    };
    var de_EndEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    var de__Error = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["Code"] !== void 0) {
        contents.Code = (0, smithy_client_1.expectString)(output["Code"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var de_ErrorDocument = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      return contents;
    };
    var de_Errors = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de__Error(entry, context);
      });
    };
    var de_EventBridgeConfiguration = (output, context) => {
      const contents = {};
      return contents;
    };
    var de_EventList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_ExistingObjectReplication = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_ExposeHeaders = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_FilterRule = (output, context) => {
      const contents = {};
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var de_FilterRuleList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_FilterRule(entry, context);
      });
    };
    var de_GetObjectAttributesParts = (output, context) => {
      const contents = {};
      if (output["PartsCount"] !== void 0) {
        contents.TotalPartsCount = (0, smithy_client_1.strictParseInt32)(output["PartsCount"]);
      }
      if (output["PartNumberMarker"] !== void 0) {
        contents.PartNumberMarker = (0, smithy_client_1.expectString)(output["PartNumberMarker"]);
      }
      if (output["NextPartNumberMarker"] !== void 0) {
        contents.NextPartNumberMarker = (0, smithy_client_1.expectString)(output["NextPartNumberMarker"]);
      }
      if (output["MaxParts"] !== void 0) {
        contents.MaxParts = (0, smithy_client_1.strictParseInt32)(output["MaxParts"]);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output.Part === "") {
        contents.Parts = [];
      } else if (output["Part"] !== void 0) {
        contents.Parts = de_PartsList((0, smithy_client_1.getArrayIfSingleItem)(output["Part"]), context);
      }
      return contents;
    };
    var de_Grant = (output, context) => {
      const contents = {};
      if (output["Grantee"] !== void 0) {
        contents.Grantee = de_Grantee(output["Grantee"], context);
      }
      if (output["Permission"] !== void 0) {
        contents.Permission = (0, smithy_client_1.expectString)(output["Permission"]);
      }
      return contents;
    };
    var de_Grantee = (output, context) => {
      const contents = {};
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = (0, smithy_client_1.expectString)(output["DisplayName"]);
      }
      if (output["EmailAddress"] !== void 0) {
        contents.EmailAddress = (0, smithy_client_1.expectString)(output["EmailAddress"]);
      }
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["URI"] !== void 0) {
        contents.URI = (0, smithy_client_1.expectString)(output["URI"]);
      }
      if (output["xsi:type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["xsi:type"]);
      }
      return contents;
    };
    var de_Grants = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Grant(entry, context);
      });
    };
    var de_IndexDocument = (output, context) => {
      const contents = {};
      if (output["Suffix"] !== void 0) {
        contents.Suffix = (0, smithy_client_1.expectString)(output["Suffix"]);
      }
      return contents;
    };
    var de_Initiator = (output, context) => {
      const contents = {};
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = (0, smithy_client_1.expectString)(output["DisplayName"]);
      }
      return contents;
    };
    var de_IntelligentTieringAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      return contents;
    };
    var de_IntelligentTieringConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_IntelligentTieringFilter(output["Filter"], context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output.Tiering === "") {
        contents.Tierings = [];
      } else if (output["Tiering"] !== void 0) {
        contents.Tierings = de_TieringList((0, smithy_client_1.getArrayIfSingleItem)(output["Tiering"]), context);
      }
      return contents;
    };
    var de_IntelligentTieringConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_IntelligentTieringConfiguration(entry, context);
      });
    };
    var de_IntelligentTieringFilter = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output["Tag"] !== void 0) {
        contents.Tag = de_Tag(output["Tag"], context);
      }
      if (output["And"] !== void 0) {
        contents.And = de_IntelligentTieringAndOperator(output["And"], context);
      }
      return contents;
    };
    var de_InventoryConfiguration = (output, context) => {
      const contents = {};
      if (output["Destination"] !== void 0) {
        contents.Destination = de_InventoryDestination(output["Destination"], context);
      }
      if (output["IsEnabled"] !== void 0) {
        contents.IsEnabled = (0, smithy_client_1.parseBoolean)(output["IsEnabled"]);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_InventoryFilter(output["Filter"], context);
      }
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["IncludedObjectVersions"] !== void 0) {
        contents.IncludedObjectVersions = (0, smithy_client_1.expectString)(output["IncludedObjectVersions"]);
      }
      if (output.OptionalFields === "") {
        contents.OptionalFields = [];
      } else if (output["OptionalFields"] !== void 0 && output["OptionalFields"]["Field"] !== void 0) {
        contents.OptionalFields = de_InventoryOptionalFields((0, smithy_client_1.getArrayIfSingleItem)(output["OptionalFields"]["Field"]), context);
      }
      if (output["Schedule"] !== void 0) {
        contents.Schedule = de_InventorySchedule(output["Schedule"], context);
      }
      return contents;
    };
    var de_InventoryConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_InventoryConfiguration(entry, context);
      });
    };
    var de_InventoryDestination = (output, context) => {
      const contents = {};
      if (output["S3BucketDestination"] !== void 0) {
        contents.S3BucketDestination = de_InventoryS3BucketDestination(output["S3BucketDestination"], context);
      }
      return contents;
    };
    var de_InventoryEncryption = (output, context) => {
      const contents = {};
      if (output["SSE-S3"] !== void 0) {
        contents.SSES3 = de_SSES3(output["SSE-S3"], context);
      }
      if (output["SSE-KMS"] !== void 0) {
        contents.SSEKMS = de_SSEKMS(output["SSE-KMS"], context);
      }
      return contents;
    };
    var de_InventoryFilter = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      return contents;
    };
    var de_InventoryOptionalFields = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_InventoryS3BucketDestination = (output, context) => {
      const contents = {};
      if (output["AccountId"] !== void 0) {
        contents.AccountId = (0, smithy_client_1.expectString)(output["AccountId"]);
      }
      if (output["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["Bucket"]);
      }
      if (output["Format"] !== void 0) {
        contents.Format = (0, smithy_client_1.expectString)(output["Format"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output["Encryption"] !== void 0) {
        contents.Encryption = de_InventoryEncryption(output["Encryption"], context);
      }
      return contents;
    };
    var de_InventorySchedule = (output, context) => {
      const contents = {};
      if (output["Frequency"] !== void 0) {
        contents.Frequency = (0, smithy_client_1.expectString)(output["Frequency"]);
      }
      return contents;
    };
    var de_LambdaFunctionConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["CloudFunction"] !== void 0) {
        contents.LambdaFunctionArn = (0, smithy_client_1.expectString)(output["CloudFunction"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = de_EventList((0, smithy_client_1.getArrayIfSingleItem)(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    var de_LambdaFunctionConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_LambdaFunctionConfiguration(entry, context);
      });
    };
    var de_LifecycleExpiration = (output, context) => {
      const contents = {};
      if (output["Date"] !== void 0) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Date"]));
      }
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["ExpiredObjectDeleteMarker"] !== void 0) {
        contents.ExpiredObjectDeleteMarker = (0, smithy_client_1.parseBoolean)(output["ExpiredObjectDeleteMarker"]);
      }
      return contents;
    };
    var de_LifecycleRule = (output, context) => {
      const contents = {};
      if (output["Expiration"] !== void 0) {
        contents.Expiration = de_LifecycleExpiration(output["Expiration"], context);
      }
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_LifecycleRuleFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output.Transition === "") {
        contents.Transitions = [];
      } else if (output["Transition"] !== void 0) {
        contents.Transitions = de_TransitionList((0, smithy_client_1.getArrayIfSingleItem)(output["Transition"]), context);
      }
      if (output.NoncurrentVersionTransition === "") {
        contents.NoncurrentVersionTransitions = [];
      } else if (output["NoncurrentVersionTransition"] !== void 0) {
        contents.NoncurrentVersionTransitions = de_NoncurrentVersionTransitionList((0, smithy_client_1.getArrayIfSingleItem)(output["NoncurrentVersionTransition"]), context);
      }
      if (output["NoncurrentVersionExpiration"] !== void 0) {
        contents.NoncurrentVersionExpiration = de_NoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
      }
      if (output["AbortIncompleteMultipartUpload"] !== void 0) {
        contents.AbortIncompleteMultipartUpload = de_AbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
      }
      return contents;
    };
    var de_LifecycleRuleAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      if (output["ObjectSizeGreaterThan"] !== void 0) {
        contents.ObjectSizeGreaterThan = (0, smithy_client_1.strictParseLong)(output["ObjectSizeGreaterThan"]);
      }
      if (output["ObjectSizeLessThan"] !== void 0) {
        contents.ObjectSizeLessThan = (0, smithy_client_1.strictParseLong)(output["ObjectSizeLessThan"]);
      }
      return contents;
    };
    var de_LifecycleRuleFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["ObjectSizeGreaterThan"] !== void 0) {
        return {
          ObjectSizeGreaterThan: (0, smithy_client_1.strictParseLong)(output["ObjectSizeGreaterThan"])
        };
      }
      if (output["ObjectSizeLessThan"] !== void 0) {
        return {
          ObjectSizeLessThan: (0, smithy_client_1.strictParseLong)(output["ObjectSizeLessThan"])
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_LifecycleRuleAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_LifecycleRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_LifecycleRule(entry, context);
      });
    };
    var de_LoggingEnabled = (output, context) => {
      const contents = {};
      if (output["TargetBucket"] !== void 0) {
        contents.TargetBucket = (0, smithy_client_1.expectString)(output["TargetBucket"]);
      }
      if (output.TargetGrants === "") {
        contents.TargetGrants = [];
      } else if (output["TargetGrants"] !== void 0 && output["TargetGrants"]["Grant"] !== void 0) {
        contents.TargetGrants = de_TargetGrants((0, smithy_client_1.getArrayIfSingleItem)(output["TargetGrants"]["Grant"]), context);
      }
      if (output["TargetPrefix"] !== void 0) {
        contents.TargetPrefix = (0, smithy_client_1.expectString)(output["TargetPrefix"]);
      }
      return contents;
    };
    var de_Metrics = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["EventThreshold"] !== void 0) {
        contents.EventThreshold = de_ReplicationTimeValue(output["EventThreshold"], context);
      }
      return contents;
    };
    var de_MetricsAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      if (output["AccessPointArn"] !== void 0) {
        contents.AccessPointArn = (0, smithy_client_1.expectString)(output["AccessPointArn"]);
      }
      return contents;
    };
    var de_MetricsConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_MetricsFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      return contents;
    };
    var de_MetricsConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_MetricsConfiguration(entry, context);
      });
    };
    var de_MetricsFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["AccessPointArn"] !== void 0) {
        return {
          AccessPointArn: (0, smithy_client_1.expectString)(output["AccessPointArn"])
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_MetricsAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_MultipartUpload = (output, context) => {
      const contents = {};
      if (output["UploadId"] !== void 0) {
        contents.UploadId = (0, smithy_client_1.expectString)(output["UploadId"]);
      }
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Initiated"] !== void 0) {
        contents.Initiated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Initiated"]));
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["Initiator"] !== void 0) {
        contents.Initiator = de_Initiator(output["Initiator"], context);
      }
      if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = (0, smithy_client_1.expectString)(output["ChecksumAlgorithm"]);
      }
      return contents;
    };
    var de_MultipartUploadList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_MultipartUpload(entry, context);
      });
    };
    var de_NoncurrentVersionExpiration = (output, context) => {
      const contents = {};
      if (output["NoncurrentDays"] !== void 0) {
        contents.NoncurrentDays = (0, smithy_client_1.strictParseInt32)(output["NoncurrentDays"]);
      }
      if (output["NewerNoncurrentVersions"] !== void 0) {
        contents.NewerNoncurrentVersions = (0, smithy_client_1.strictParseInt32)(output["NewerNoncurrentVersions"]);
      }
      return contents;
    };
    var de_NoncurrentVersionTransition = (output, context) => {
      const contents = {};
      if (output["NoncurrentDays"] !== void 0) {
        contents.NoncurrentDays = (0, smithy_client_1.strictParseInt32)(output["NoncurrentDays"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["NewerNoncurrentVersions"] !== void 0) {
        contents.NewerNoncurrentVersions = (0, smithy_client_1.strictParseInt32)(output["NewerNoncurrentVersions"]);
      }
      return contents;
    };
    var de_NoncurrentVersionTransitionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NoncurrentVersionTransition(entry, context);
      });
    };
    var de_NotificationConfigurationFilter = (output, context) => {
      const contents = {};
      if (output["S3Key"] !== void 0) {
        contents.Key = de_S3KeyFilter(output["S3Key"], context);
      }
      return contents;
    };
    var de__Object = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
      }
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
      } else if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = de_ChecksumAlgorithmList((0, smithy_client_1.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["RestoreStatus"] !== void 0) {
        contents.RestoreStatus = de_RestoreStatus(output["RestoreStatus"], context);
      }
      return contents;
    };
    var de_ObjectList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de__Object(entry, context);
      });
    };
    var de_ObjectLockConfiguration = (output, context) => {
      const contents = {};
      if (output["ObjectLockEnabled"] !== void 0) {
        contents.ObjectLockEnabled = (0, smithy_client_1.expectString)(output["ObjectLockEnabled"]);
      }
      if (output["Rule"] !== void 0) {
        contents.Rule = de_ObjectLockRule(output["Rule"], context);
      }
      return contents;
    };
    var de_ObjectLockLegalHold = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_ObjectLockRetention = (output, context) => {
      const contents = {};
      if (output["Mode"] !== void 0) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
      }
      if (output["RetainUntilDate"] !== void 0) {
        contents.RetainUntilDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["RetainUntilDate"]));
      }
      return contents;
    };
    var de_ObjectLockRule = (output, context) => {
      const contents = {};
      if (output["DefaultRetention"] !== void 0) {
        contents.DefaultRetention = de_DefaultRetention(output["DefaultRetention"], context);
      }
      return contents;
    };
    var de_ObjectPart = (output, context) => {
      const contents = {};
      if (output["PartNumber"] !== void 0) {
        contents.PartNumber = (0, smithy_client_1.strictParseInt32)(output["PartNumber"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var de_ObjectVersion = (output, context) => {
      const contents = {};
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
      } else if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = de_ChecksumAlgorithmList((0, smithy_client_1.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["IsLatest"] !== void 0) {
        contents.IsLatest = (0, smithy_client_1.parseBoolean)(output["IsLatest"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["RestoreStatus"] !== void 0) {
        contents.RestoreStatus = de_RestoreStatus(output["RestoreStatus"], context);
      }
      return contents;
    };
    var de_ObjectVersionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ObjectVersion(entry, context);
      });
    };
    var de_Owner = (output, context) => {
      const contents = {};
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = (0, smithy_client_1.expectString)(output["DisplayName"]);
      }
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      return contents;
    };
    var de_OwnershipControls = (output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = de_OwnershipControlsRules((0, smithy_client_1.getArrayIfSingleItem)(output["Rule"]), context);
      }
      return contents;
    };
    var de_OwnershipControlsRule = (output, context) => {
      const contents = {};
      if (output["ObjectOwnership"] !== void 0) {
        contents.ObjectOwnership = (0, smithy_client_1.expectString)(output["ObjectOwnership"]);
      }
      return contents;
    };
    var de_OwnershipControlsRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_OwnershipControlsRule(entry, context);
      });
    };
    var de_Part = (output, context) => {
      const contents = {};
      if (output["PartNumber"] !== void 0) {
        contents.PartNumber = (0, smithy_client_1.strictParseInt32)(output["PartNumber"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
      }
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var de_Parts = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Part(entry, context);
      });
    };
    var de_PartsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ObjectPart(entry, context);
      });
    };
    var de_PolicyStatus = (output, context) => {
      const contents = {};
      if (output["IsPublic"] !== void 0) {
        contents.IsPublic = (0, smithy_client_1.parseBoolean)(output["IsPublic"]);
      }
      return contents;
    };
    var de_Progress = (output, context) => {
      const contents = {};
      if (output["BytesScanned"] !== void 0) {
        contents.BytesScanned = (0, smithy_client_1.strictParseLong)(output["BytesScanned"]);
      }
      if (output["BytesProcessed"] !== void 0) {
        contents.BytesProcessed = (0, smithy_client_1.strictParseLong)(output["BytesProcessed"]);
      }
      if (output["BytesReturned"] !== void 0) {
        contents.BytesReturned = (0, smithy_client_1.strictParseLong)(output["BytesReturned"]);
      }
      return contents;
    };
    var de_PublicAccessBlockConfiguration = (output, context) => {
      const contents = {};
      if (output["BlockPublicAcls"] !== void 0) {
        contents.BlockPublicAcls = (0, smithy_client_1.parseBoolean)(output["BlockPublicAcls"]);
      }
      if (output["IgnorePublicAcls"] !== void 0) {
        contents.IgnorePublicAcls = (0, smithy_client_1.parseBoolean)(output["IgnorePublicAcls"]);
      }
      if (output["BlockPublicPolicy"] !== void 0) {
        contents.BlockPublicPolicy = (0, smithy_client_1.parseBoolean)(output["BlockPublicPolicy"]);
      }
      if (output["RestrictPublicBuckets"] !== void 0) {
        contents.RestrictPublicBuckets = (0, smithy_client_1.parseBoolean)(output["RestrictPublicBuckets"]);
      }
      return contents;
    };
    var de_QueueConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Queue"] !== void 0) {
        contents.QueueArn = (0, smithy_client_1.expectString)(output["Queue"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = de_EventList((0, smithy_client_1.getArrayIfSingleItem)(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    var de_QueueConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_QueueConfiguration(entry, context);
      });
    };
    var de_Redirect = (output, context) => {
      const contents = {};
      if (output["HostName"] !== void 0) {
        contents.HostName = (0, smithy_client_1.expectString)(output["HostName"]);
      }
      if (output["HttpRedirectCode"] !== void 0) {
        contents.HttpRedirectCode = (0, smithy_client_1.expectString)(output["HttpRedirectCode"]);
      }
      if (output["Protocol"] !== void 0) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["Protocol"]);
      }
      if (output["ReplaceKeyPrefixWith"] !== void 0) {
        contents.ReplaceKeyPrefixWith = (0, smithy_client_1.expectString)(output["ReplaceKeyPrefixWith"]);
      }
      if (output["ReplaceKeyWith"] !== void 0) {
        contents.ReplaceKeyWith = (0, smithy_client_1.expectString)(output["ReplaceKeyWith"]);
      }
      return contents;
    };
    var de_RedirectAllRequestsTo = (output, context) => {
      const contents = {};
      if (output["HostName"] !== void 0) {
        contents.HostName = (0, smithy_client_1.expectString)(output["HostName"]);
      }
      if (output["Protocol"] !== void 0) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["Protocol"]);
      }
      return contents;
    };
    var de_ReplicaModifications = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_ReplicationConfiguration = (output, context) => {
      const contents = {};
      if (output["Role"] !== void 0) {
        contents.Role = (0, smithy_client_1.expectString)(output["Role"]);
      }
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = de_ReplicationRules((0, smithy_client_1.getArrayIfSingleItem)(output["Rule"]), context);
      }
      return contents;
    };
    var de_ReplicationRule = (output, context) => {
      const contents = {};
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["Priority"] !== void 0) {
        contents.Priority = (0, smithy_client_1.strictParseInt32)(output["Priority"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_ReplicationRuleFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["SourceSelectionCriteria"] !== void 0) {
        contents.SourceSelectionCriteria = de_SourceSelectionCriteria(output["SourceSelectionCriteria"], context);
      }
      if (output["ExistingObjectReplication"] !== void 0) {
        contents.ExistingObjectReplication = de_ExistingObjectReplication(output["ExistingObjectReplication"], context);
      }
      if (output["Destination"] !== void 0) {
        contents.Destination = de_Destination(output["Destination"], context);
      }
      if (output["DeleteMarkerReplication"] !== void 0) {
        contents.DeleteMarkerReplication = de_DeleteMarkerReplication(output["DeleteMarkerReplication"], context);
      }
      return contents;
    };
    var de_ReplicationRuleAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      return contents;
    };
    var de_ReplicationRuleFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_ReplicationRuleAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_ReplicationRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicationRule(entry, context);
      });
    };
    var de_ReplicationTime = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Time"] !== void 0) {
        contents.Time = de_ReplicationTimeValue(output["Time"], context);
      }
      return contents;
    };
    var de_ReplicationTimeValue = (output, context) => {
      const contents = {};
      if (output["Minutes"] !== void 0) {
        contents.Minutes = (0, smithy_client_1.strictParseInt32)(output["Minutes"]);
      }
      return contents;
    };
    var de_RestoreStatus = (output, context) => {
      const contents = {};
      if (output["IsRestoreInProgress"] !== void 0) {
        contents.IsRestoreInProgress = (0, smithy_client_1.parseBoolean)(output["IsRestoreInProgress"]);
      }
      if (output["RestoreExpiryDate"] !== void 0) {
        contents.RestoreExpiryDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["RestoreExpiryDate"]));
      }
      return contents;
    };
    var de_RoutingRule = (output, context) => {
      const contents = {};
      if (output["Condition"] !== void 0) {
        contents.Condition = de_Condition(output["Condition"], context);
      }
      if (output["Redirect"] !== void 0) {
        contents.Redirect = de_Redirect(output["Redirect"], context);
      }
      return contents;
    };
    var de_RoutingRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_RoutingRule(entry, context);
      });
    };
    var de_S3KeyFilter = (output, context) => {
      const contents = {};
      if (output.FilterRule === "") {
        contents.FilterRules = [];
      } else if (output["FilterRule"] !== void 0) {
        contents.FilterRules = de_FilterRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["FilterRule"]), context);
      }
      return contents;
    };
    var de_ServerSideEncryptionByDefault = (output, context) => {
      const contents = {};
      if (output["SSEAlgorithm"] !== void 0) {
        contents.SSEAlgorithm = (0, smithy_client_1.expectString)(output["SSEAlgorithm"]);
      }
      if (output["KMSMasterKeyID"] !== void 0) {
        contents.KMSMasterKeyID = (0, smithy_client_1.expectString)(output["KMSMasterKeyID"]);
      }
      return contents;
    };
    var de_ServerSideEncryptionConfiguration = (output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = de_ServerSideEncryptionRules((0, smithy_client_1.getArrayIfSingleItem)(output["Rule"]), context);
      }
      return contents;
    };
    var de_ServerSideEncryptionRule = (output, context) => {
      const contents = {};
      if (output["ApplyServerSideEncryptionByDefault"] !== void 0) {
        contents.ApplyServerSideEncryptionByDefault = de_ServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
      }
      if (output["BucketKeyEnabled"] !== void 0) {
        contents.BucketKeyEnabled = (0, smithy_client_1.parseBoolean)(output["BucketKeyEnabled"]);
      }
      return contents;
    };
    var de_ServerSideEncryptionRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ServerSideEncryptionRule(entry, context);
      });
    };
    var de_SourceSelectionCriteria = (output, context) => {
      const contents = {};
      if (output["SseKmsEncryptedObjects"] !== void 0) {
        contents.SseKmsEncryptedObjects = de_SseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
      }
      if (output["ReplicaModifications"] !== void 0) {
        contents.ReplicaModifications = de_ReplicaModifications(output["ReplicaModifications"], context);
      }
      return contents;
    };
    var de_SSEKMS = (output, context) => {
      const contents = {};
      if (output["KeyId"] !== void 0) {
        contents.KeyId = (0, smithy_client_1.expectString)(output["KeyId"]);
      }
      return contents;
    };
    var de_SseKmsEncryptedObjects = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_SSES3 = (output, context) => {
      const contents = {};
      return contents;
    };
    var de_Stats = (output, context) => {
      const contents = {};
      if (output["BytesScanned"] !== void 0) {
        contents.BytesScanned = (0, smithy_client_1.strictParseLong)(output["BytesScanned"]);
      }
      if (output["BytesProcessed"] !== void 0) {
        contents.BytesProcessed = (0, smithy_client_1.strictParseLong)(output["BytesProcessed"]);
      }
      if (output["BytesReturned"] !== void 0) {
        contents.BytesReturned = (0, smithy_client_1.strictParseLong)(output["BytesReturned"]);
      }
      return contents;
    };
    var de_StorageClassAnalysis = (output, context) => {
      const contents = {};
      if (output["DataExport"] !== void 0) {
        contents.DataExport = de_StorageClassAnalysisDataExport(output["DataExport"], context);
      }
      return contents;
    };
    var de_StorageClassAnalysisDataExport = (output, context) => {
      const contents = {};
      if (output["OutputSchemaVersion"] !== void 0) {
        contents.OutputSchemaVersion = (0, smithy_client_1.expectString)(output["OutputSchemaVersion"]);
      }
      if (output["Destination"] !== void 0) {
        contents.Destination = de_AnalyticsExportDestination(output["Destination"], context);
      }
      return contents;
    };
    var de_Tag = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var de_TagSet = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tag(entry, context);
      });
    };
    var de_TargetGrant = (output, context) => {
      const contents = {};
      if (output["Grantee"] !== void 0) {
        contents.Grantee = de_Grantee(output["Grantee"], context);
      }
      if (output["Permission"] !== void 0) {
        contents.Permission = (0, smithy_client_1.expectString)(output["Permission"]);
      }
      return contents;
    };
    var de_TargetGrants = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TargetGrant(entry, context);
      });
    };
    var de_Tiering = (output, context) => {
      const contents = {};
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["AccessTier"] !== void 0) {
        contents.AccessTier = (0, smithy_client_1.expectString)(output["AccessTier"]);
      }
      return contents;
    };
    var de_TieringList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tiering(entry, context);
      });
    };
    var de_TopicConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Topic"] !== void 0) {
        contents.TopicArn = (0, smithy_client_1.expectString)(output["Topic"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = de_EventList((0, smithy_client_1.getArrayIfSingleItem)(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    var de_TopicConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TopicConfiguration(entry, context);
      });
    };
    var de_Transition = (output, context) => {
      const contents = {};
      if (output["Date"] !== void 0) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Date"]));
      }
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      return contents;
    };
    var de_TransitionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Transition(entry, context);
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var loadRestXmlErrorCode = (output, data) => {
      if ((data == null ? void 0 : data.Code) !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

var require_AbortMultipartUploadCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/AbortMultipartUploadCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbortMultipartUploadCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var AbortMultipartUploadCommand = class _AbortMultipartUploadCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AbortMultipartUploadCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "AbortMultipartUploadCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_AbortMultipartUploadCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_AbortMultipartUploadCommand)(output, context);
      }
    };
    exports2.AbortMultipartUploadCommand = AbortMultipartUploadCommand;
  }
});

var require_dist_cjs63 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-ssec/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsecPlugin = exports2.ssecMiddlewareOptions = exports2.ssecMiddleware = void 0;
    function ssecMiddleware(options) {
      return (next) => async (args) => {
        let input = { ...args.input };
        const properties = [
          {
            target: "SSECustomerKey",
            hash: "SSECustomerKeyMD5"
          },
          {
            target: "CopySourceSSECustomerKey",
            hash: "CopySourceSSECustomerKeyMD5"
          }
        ];
        for (const prop of properties) {
          const value = input[prop.target];
          if (value) {
            const valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
            const encoded = options.base64Encoder(valueView);
            const hash = new options.md5();
            hash.update(valueView);
            input = {
              ...input,
              [prop.target]: encoded,
              [prop.hash]: options.base64Encoder(await hash.digest())
            };
          }
        }
        return next({
          ...args,
          input
        });
      };
    }
    exports2.ssecMiddleware = ssecMiddleware;
    exports2.ssecMiddlewareOptions = {
      name: "ssecMiddleware",
      step: "initialize",
      tags: ["SSE"],
      override: true
    };
    var getSsecPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(ssecMiddleware(config), exports2.ssecMiddlewareOptions);
      }
    });
    exports2.getSsecPlugin = getSsecPlugin;
  }
});

var require_CompleteMultipartUploadCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CompleteMultipartUploadCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompleteMultipartUploadCommand = exports2.$Command = void 0;
    var middleware_sdk_s3_1 = require_dist_cjs8();
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var CompleteMultipartUploadCommand = class _CompleteMultipartUploadCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CompleteMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CompleteMultipartUploadCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CompleteMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CompleteMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_CompleteMultipartUploadCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_CompleteMultipartUploadCommand)(output, context);
      }
    };
    exports2.CompleteMultipartUploadCommand = CompleteMultipartUploadCommand;
  }
});

var require_CopyObjectCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CopyObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CopyObjectCommand = exports2.$Command = void 0;
    var middleware_sdk_s3_1 = require_dist_cjs8();
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var CopyObjectCommand = class _CopyObjectCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CopyObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CopyObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_CopyObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_CopyObjectCommand)(output, context);
      }
    };
    exports2.CopyObjectCommand = CopyObjectCommand;
  }
});

var require_dist_cjs64 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-location-constraint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLocationConstraintPlugin = exports2.locationConstraintMiddlewareOptions = exports2.locationConstraintMiddleware = void 0;
    function locationConstraintMiddleware(options) {
      return (next) => async (args) => {
        const { CreateBucketConfiguration } = args.input;
        const region = await options.region();
        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
          args = {
            ...args,
            input: {
              ...args.input,
              CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region }
            }
          };
        }
        return next(args);
      };
    }
    exports2.locationConstraintMiddleware = locationConstraintMiddleware;
    exports2.locationConstraintMiddlewareOptions = {
      step: "initialize",
      tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
      name: "locationConstraintMiddleware",
      override: true
    };
    var getLocationConstraintPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config), exports2.locationConstraintMiddlewareOptions);
      }
    });
    exports2.getLocationConstraintPlugin = getLocationConstraintPlugin;
  }
});

var require_CreateBucketCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CreateBucketCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateBucketCommand = exports2.$Command = void 0;
    var middleware_location_constraint_1 = require_dist_cjs64();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var CreateBucketCommand = class _CreateBucketCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          DisableAccessPoints: { type: "staticContextParams", value: true },
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateBucketCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_location_constraint_1.getLocationConstraintPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateBucketCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_CreateBucketCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_CreateBucketCommand)(output, context);
      }
    };
    exports2.CreateBucketCommand = CreateBucketCommand;
  }
});

var require_CreateMultipartUploadCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CreateMultipartUploadCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateMultipartUploadCommand = exports2.$Command = void 0;
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var CreateMultipartUploadCommand = class _CreateMultipartUploadCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateMultipartUploadCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_CreateMultipartUploadCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_CreateMultipartUploadCommand)(output, context);
      }
    };
    exports2.CreateMultipartUploadCommand = CreateMultipartUploadCommand;
  }
});

var require_DeleteBucketAnalyticsConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketAnalyticsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketAnalyticsConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketAnalyticsConfigurationCommand = class _DeleteBucketAnalyticsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketAnalyticsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketAnalyticsConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketAnalyticsConfigurationCommand = DeleteBucketAnalyticsConfigurationCommand;
  }
});

var require_DeleteBucketCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketCommand = class _DeleteBucketCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketCommand)(output, context);
      }
    };
    exports2.DeleteBucketCommand = DeleteBucketCommand;
  }
});

var require_DeleteBucketCorsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketCorsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketCorsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketCorsCommand = class _DeleteBucketCorsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketCorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketCorsCommand)(output, context);
      }
    };
    exports2.DeleteBucketCorsCommand = DeleteBucketCorsCommand;
  }
});

var require_DeleteBucketEncryptionCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketEncryptionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketEncryptionCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketEncryptionCommand = class _DeleteBucketEncryptionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketEncryptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketEncryptionCommand)(output, context);
      }
    };
    exports2.DeleteBucketEncryptionCommand = DeleteBucketEncryptionCommand;
  }
});

var require_DeleteBucketIntelligentTieringConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketIntelligentTieringConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketIntelligentTieringConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketIntelligentTieringConfigurationCommand = class _DeleteBucketIntelligentTieringConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketIntelligentTieringConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketIntelligentTieringConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketIntelligentTieringConfigurationCommand = DeleteBucketIntelligentTieringConfigurationCommand;
  }
});

var require_DeleteBucketInventoryConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketInventoryConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketInventoryConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketInventoryConfigurationCommand = class _DeleteBucketInventoryConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketInventoryConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketInventoryConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketInventoryConfigurationCommand = DeleteBucketInventoryConfigurationCommand;
  }
});

var require_DeleteBucketLifecycleCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketLifecycleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketLifecycleCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketLifecycleCommand = class _DeleteBucketLifecycleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketLifecycleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketLifecycleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketLifecycleCommand)(output, context);
      }
    };
    exports2.DeleteBucketLifecycleCommand = DeleteBucketLifecycleCommand;
  }
});

var require_DeleteBucketMetricsConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketMetricsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketMetricsConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketMetricsConfigurationCommand = class _DeleteBucketMetricsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketMetricsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketMetricsConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketMetricsConfigurationCommand = DeleteBucketMetricsConfigurationCommand;
  }
});

var require_DeleteBucketOwnershipControlsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketOwnershipControlsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketOwnershipControlsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketOwnershipControlsCommand = class _DeleteBucketOwnershipControlsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketOwnershipControlsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketOwnershipControlsCommand)(output, context);
      }
    };
    exports2.DeleteBucketOwnershipControlsCommand = DeleteBucketOwnershipControlsCommand;
  }
});

var require_DeleteBucketPolicyCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketPolicyCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketPolicyCommand = class _DeleteBucketPolicyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketPolicyCommand)(output, context);
      }
    };
    exports2.DeleteBucketPolicyCommand = DeleteBucketPolicyCommand;
  }
});

var require_DeleteBucketReplicationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketReplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketReplicationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketReplicationCommand = class _DeleteBucketReplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketReplicationCommand)(output, context);
      }
    };
    exports2.DeleteBucketReplicationCommand = DeleteBucketReplicationCommand;
  }
});

var require_DeleteBucketTaggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketTaggingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketTaggingCommand = class _DeleteBucketTaggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketTaggingCommand)(output, context);
      }
    };
    exports2.DeleteBucketTaggingCommand = DeleteBucketTaggingCommand;
  }
});

var require_DeleteBucketWebsiteCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketWebsiteCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketWebsiteCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketWebsiteCommand = class _DeleteBucketWebsiteCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteBucketWebsiteCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteBucketWebsiteCommand)(output, context);
      }
    };
    exports2.DeleteBucketWebsiteCommand = DeleteBucketWebsiteCommand;
  }
});

var require_DeleteObjectCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteObjectCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteObjectCommand = class _DeleteObjectCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteObjectCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteObjectCommand)(output, context);
      }
    };
    exports2.DeleteObjectCommand = DeleteObjectCommand;
  }
});

var require_constants9 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChecksumLocation = exports2.ChecksumAlgorithm = void 0;
    var ChecksumAlgorithm;
    (function(ChecksumAlgorithm2) {
      ChecksumAlgorithm2["MD5"] = "MD5";
      ChecksumAlgorithm2["CRC32"] = "CRC32";
      ChecksumAlgorithm2["CRC32C"] = "CRC32C";
      ChecksumAlgorithm2["SHA1"] = "SHA1";
      ChecksumAlgorithm2["SHA256"] = "SHA256";
    })(ChecksumAlgorithm = exports2.ChecksumAlgorithm || (exports2.ChecksumAlgorithm = {}));
    var ChecksumLocation;
    (function(ChecksumLocation2) {
      ChecksumLocation2["HEADER"] = "header";
      ChecksumLocation2["TRAILER"] = "trailer";
    })(ChecksumLocation = exports2.ChecksumLocation || (exports2.ChecksumLocation = {}));
  }
});

var require_types8 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PRIORITY_ORDER_ALGORITHMS = exports2.CLIENT_SUPPORTED_ALGORITHMS = void 0;
    var constants_1 = require_constants9();
    exports2.CLIENT_SUPPORTED_ALGORITHMS = [
      constants_1.ChecksumAlgorithm.CRC32,
      constants_1.ChecksumAlgorithm.CRC32C,
      constants_1.ChecksumAlgorithm.SHA1,
      constants_1.ChecksumAlgorithm.SHA256
    ];
    exports2.PRIORITY_ORDER_ALGORITHMS = [
      constants_1.ChecksumAlgorithm.CRC32,
      constants_1.ChecksumAlgorithm.CRC32C,
      constants_1.ChecksumAlgorithm.SHA1,
      constants_1.ChecksumAlgorithm.SHA256
    ];
  }
});

var require_getChecksumAlgorithmForRequest = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksumAlgorithmForRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksumAlgorithmForRequest = void 0;
    var constants_1 = require_constants9();
    var types_1 = require_types8();
    var getChecksumAlgorithmForRequest = (input, { requestChecksumRequired, requestAlgorithmMember }) => {
      if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
        return requestChecksumRequired ? constants_1.ChecksumAlgorithm.MD5 : void 0;
      }
      const checksumAlgorithm = input[requestAlgorithmMember];
      if (!types_1.CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${types_1.CLIENT_SUPPORTED_ALGORITHMS}.`);
      }
      return checksumAlgorithm;
    };
    exports2.getChecksumAlgorithmForRequest = getChecksumAlgorithmForRequest;
  }
});

var require_getChecksumLocationName = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksumLocationName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksumLocationName = void 0;
    var constants_1 = require_constants9();
    var getChecksumLocationName = (algorithm) => algorithm === constants_1.ChecksumAlgorithm.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;
    exports2.getChecksumLocationName = getChecksumLocationName;
  }
});

var require_hasHeader = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/hasHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasHeader = void 0;
    var hasHeader = (header, headers) => {
      const soughtHeader = header.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
  }
});

var require_isStreaming = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/isStreaming.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isStreaming = void 0;
    var is_array_buffer_1 = require_dist_cjs14();
    var isStreaming = (body) => body !== void 0 && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0, is_array_buffer_1.isArrayBuffer)(body);
    exports2.isStreaming = isStreaming;
  }
});

var require_aws_crc32c = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32c/build/aws_crc32c.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32c = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    var index_1 = require_build3();
    var AwsCrc32c = (
      /** @class */
      function() {
        function AwsCrc32c2() {
          this.crc32c = new index_1.Crc32c();
        }
        AwsCrc32c2.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32c.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc32c2.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32c.digest())];
            });
          });
        };
        AwsCrc32c2.prototype.reset = function() {
          this.crc32c = new index_1.Crc32c();
        };
        return AwsCrc32c2;
      }()
    );
    exports2.AwsCrc32c = AwsCrc32c;
  }
});

var require_build3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32c/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32c = exports2.Crc32c = exports2.crc32c = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    function crc32c(data) {
      return new Crc32c().update(data).digest();
    }
    exports2.crc32c = crc32c;
    var Crc32c = (
      /** @class */
      function() {
        function Crc32c2() {
          this.checksum = 4294967295;
        }
        Crc32c2.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc32c2.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc32c2;
      }()
    );
    exports2.Crc32c = Crc32c;
    var a_lookupTable = [
      0,
      4067132163,
      3778769143,
      324072436,
      3348797215,
      904991772,
      648144872,
      3570033899,
      2329499855,
      2024987596,
      1809983544,
      2575936315,
      1296289744,
      3207089363,
      2893594407,
      1578318884,
      274646895,
      3795141740,
      4049975192,
      51262619,
      3619967088,
      632279923,
      922689671,
      3298075524,
      2592579488,
      1760304291,
      2075979607,
      2312596564,
      1562183871,
      2943781820,
      3156637768,
      1313733451,
      549293790,
      3537243613,
      3246849577,
      871202090,
      3878099393,
      357341890,
      102525238,
      4101499445,
      2858735121,
      1477399826,
      1264559846,
      3107202533,
      1845379342,
      2677391885,
      2361733625,
      2125378298,
      820201905,
      3263744690,
      3520608582,
      598981189,
      4151959214,
      85089709,
      373468761,
      3827903834,
      3124367742,
      1213305469,
      1526817161,
      2842354314,
      2107672161,
      2412447074,
      2627466902,
      1861252501,
      1098587580,
      3004210879,
      2688576843,
      1378610760,
      2262928035,
      1955203488,
      1742404180,
      2511436119,
      3416409459,
      969524848,
      714683780,
      3639785095,
      205050476,
      4266873199,
      3976438427,
      526918040,
      1361435347,
      2739821008,
      2954799652,
      1114974503,
      2529119692,
      1691668175,
      2005155131,
      2247081528,
      3690758684,
      697762079,
      986182379,
      3366744552,
      476452099,
      3993867776,
      4250756596,
      255256311,
      1640403810,
      2477592673,
      2164122517,
      1922457750,
      2791048317,
      1412925310,
      1197962378,
      3037525897,
      3944729517,
      427051182,
      170179418,
      4165941337,
      746937522,
      3740196785,
      3451792453,
      1070968646,
      1905808397,
      2213795598,
      2426610938,
      1657317369,
      3053634322,
      1147748369,
      1463399397,
      2773627110,
      4215344322,
      153784257,
      444234805,
      3893493558,
      1021025245,
      3467647198,
      3722505002,
      797665321,
      2197175160,
      1889384571,
      1674398607,
      2443626636,
      1164749927,
      3070701412,
      2757221520,
      1446797203,
      137323447,
      4198817972,
      3910406976,
      461344835,
      3484808360,
      1037989803,
      781091935,
      3705997148,
      2460548119,
      1623424788,
      1939049696,
      2180517859,
      1429367560,
      2807687179,
      3020495871,
      1180866812,
      410100952,
      3927582683,
      4182430767,
      186734380,
      3756733383,
      763408580,
      1053836080,
      3434856499,
      2722870694,
      1344288421,
      1131464017,
      2971354706,
      1708204729,
      2545590714,
      2229949006,
      1988219213,
      680717673,
      3673779818,
      3383336350,
      1002577565,
      4010310262,
      493091189,
      238226049,
      4233660802,
      2987750089,
      1082061258,
      1395524158,
      2705686845,
      1972364758,
      2279892693,
      2494862625,
      1725896226,
      952904198,
      3399985413,
      3656866545,
      731699698,
      4283874585,
      222117402,
      510512622,
      3959836397,
      3280807620,
      837199303,
      582374963,
      3504198960,
      68661723,
      4135334616,
      3844915500,
      390545967,
      1230274059,
      3141532936,
      2825850620,
      1510247935,
      2395924756,
      2091215383,
      1878366691,
      2644384480,
      3553878443,
      565732008,
      854102364,
      3229815391,
      340358836,
      3861050807,
      4117890627,
      119113024,
      1493875044,
      2875275879,
      3090270611,
      1247431312,
      2660249211,
      1828433272,
      2141937292,
      2378227087,
      3811616794,
      291187481,
      34330861,
      4032846830,
      615137029,
      3603020806,
      3314634738,
      939183345,
      1776939221,
      2609017814,
      2295496738,
      2058945313,
      2926798794,
      1545135305,
      1330124605,
      3173225534,
      4084100981,
      17165430,
      307568514,
      3762199681,
      888469610,
      3332340585,
      3587147933,
      665062302,
      2042050490,
      2346497209,
      2559330125,
      1793573966,
      3190661285,
      1279665062,
      1595330642,
      2910671697
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
    var aws_crc32c_1 = require_aws_crc32c();
    Object.defineProperty(exports2, "AwsCrc32c", { enumerable: true, get: function() {
      return aws_crc32c_1.AwsCrc32c;
    } });
  }
});

var require_selectChecksumAlgorithmFunction = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/selectChecksumAlgorithmFunction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.selectChecksumAlgorithmFunction = void 0;
    var crc32_1 = require_build2();
    var crc32c_1 = require_build3();
    var constants_1 = require_constants9();
    var selectChecksumAlgorithmFunction = (checksumAlgorithm, config) => ({
      [constants_1.ChecksumAlgorithm.MD5]: config.md5,
      [constants_1.ChecksumAlgorithm.CRC32]: crc32_1.AwsCrc32,
      [constants_1.ChecksumAlgorithm.CRC32C]: crc32c_1.AwsCrc32c,
      [constants_1.ChecksumAlgorithm.SHA1]: config.sha1,
      [constants_1.ChecksumAlgorithm.SHA256]: config.sha256
    })[checksumAlgorithm];
    exports2.selectChecksumAlgorithmFunction = selectChecksumAlgorithmFunction;
  }
});

var require_stringHasher = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/stringHasher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringHasher = void 0;
    var util_utf8_1 = require_dist_cjs16();
    var stringHasher = (checksumAlgorithmFn, body) => {
      const hash = new checksumAlgorithmFn();
      hash.update((0, util_utf8_1.toUint8Array)(body || ""));
      return hash.digest();
    };
    exports2.stringHasher = stringHasher;
  }
});

var require_flexibleChecksumsMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/flexibleChecksumsMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flexibleChecksumsMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getChecksumAlgorithmForRequest_1 = require_getChecksumAlgorithmForRequest();
    var getChecksumLocationName_1 = require_getChecksumLocationName();
    var hasHeader_1 = require_hasHeader();
    var isStreaming_1 = require_isStreaming();
    var selectChecksumAlgorithmFunction_1 = require_selectChecksumAlgorithmFunction();
    var stringHasher_1 = require_stringHasher();
    var flexibleChecksumsMiddleware = (config, middlewareConfig) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const { request } = args;
      const { body: requestBody, headers } = request;
      const { base64Encoder, streamHasher } = config;
      const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
      const checksumAlgorithm = (0, getChecksumAlgorithmForRequest_1.getChecksumAlgorithmForRequest)(input, {
        requestChecksumRequired,
        requestAlgorithmMember
      });
      let updatedBody = requestBody;
      let updatedHeaders = headers;
      if (checksumAlgorithm) {
        const checksumLocationName = (0, getChecksumLocationName_1.getChecksumLocationName)(checksumAlgorithm);
        const checksumAlgorithmFn = (0, selectChecksumAlgorithmFunction_1.selectChecksumAlgorithmFunction)(checksumAlgorithm, config);
        if ((0, isStreaming_1.isStreaming)(requestBody)) {
          const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;
          updatedBody = getAwsChunkedEncodingStream(requestBody, {
            base64Encoder,
            bodyLengthChecker,
            checksumLocationName,
            checksumAlgorithmFn,
            streamHasher
          });
          updatedHeaders = {
            ...headers,
            "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
            "transfer-encoding": "chunked",
            "x-amz-decoded-content-length": headers["content-length"],
            "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
            "x-amz-trailer": checksumLocationName
          };
          delete updatedHeaders["content-length"];
        } else if (!(0, hasHeader_1.hasHeader)(checksumLocationName, headers)) {
          const rawChecksum = await (0, stringHasher_1.stringHasher)(checksumAlgorithmFn, requestBody);
          updatedHeaders = {
            ...headers,
            [checksumLocationName]: base64Encoder(rawChecksum)
          };
        }
      }
      const result = await next({
        ...args,
        request: {
          ...request,
          headers: updatedHeaders,
          body: updatedBody
        }
      });
      return result;
    };
    exports2.flexibleChecksumsMiddleware = flexibleChecksumsMiddleware;
  }
});

var require_create_read_stream_on_buffer = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/streams/create-read-stream-on-buffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createReadStreamOnBuffer = void 0;
    var stream_1 = require("stream");
    function createReadStreamOnBuffer(buffer) {
      const stream = new stream_1.Transform();
      stream.push(buffer);
      stream.push(null);
      return stream;
    }
    exports2.createReadStreamOnBuffer = createReadStreamOnBuffer;
  }
});

var require_getChecksum = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksum = void 0;
    var isStreaming_1 = require_isStreaming();
    var stringHasher_1 = require_stringHasher();
    var getChecksum = async (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) => {
      const digest = (0, isStreaming_1.isStreaming)(body) ? streamHasher(checksumAlgorithmFn, body) : (0, stringHasher_1.stringHasher)(checksumAlgorithmFn, body);
      return base64Encoder(await digest);
    };
    exports2.getChecksum = getChecksum;
  }
});

var require_getChecksumAlgorithmListForResponse = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksumAlgorithmListForResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksumAlgorithmListForResponse = void 0;
    var types_1 = require_types8();
    var getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {
      const validChecksumAlgorithms = [];
      for (const algorithm of types_1.PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !types_1.CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
          continue;
        }
        validChecksumAlgorithms.push(algorithm);
      }
      return validChecksumAlgorithms;
    };
    exports2.getChecksumAlgorithmListForResponse = getChecksumAlgorithmListForResponse;
  }
});

var require_validateChecksumFromResponse = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/validateChecksumFromResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateChecksumFromResponse = void 0;
    var getChecksum_1 = require_getChecksum();
    var getChecksumAlgorithmListForResponse_1 = require_getChecksumAlgorithmListForResponse();
    var getChecksumLocationName_1 = require_getChecksumLocationName();
    var selectChecksumAlgorithmFunction_1 = require_selectChecksumAlgorithmFunction();
    var validateChecksumFromResponse = async (response, { config, responseAlgorithms }) => {
      const checksumAlgorithms = (0, getChecksumAlgorithmListForResponse_1.getChecksumAlgorithmListForResponse)(responseAlgorithms);
      const { body: responseBody, headers: responseHeaders } = response;
      for (const algorithm of checksumAlgorithms) {
        const responseHeader = (0, getChecksumLocationName_1.getChecksumLocationName)(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
          const checksumAlgorithmFn = (0, selectChecksumAlgorithmFunction_1.selectChecksumAlgorithmFunction)(algorithm, config);
          const { streamHasher, base64Encoder } = config;
          const checksum = await (0, getChecksum_1.getChecksum)(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });
          if (checksum === checksumFromResponse) {
            break;
          }
          throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
        }
      }
    };
    exports2.validateChecksumFromResponse = validateChecksumFromResponse;
  }
});

var require_flexibleChecksumsResponseMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/flexibleChecksumsResponseMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flexibleChecksumsResponseMiddleware = exports2.flexibleChecksumsResponseMiddlewareOptions = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var isStreaming_1 = require_isStreaming();
    var create_read_stream_on_buffer_1 = require_create_read_stream_on_buffer();
    var validateChecksumFromResponse_1 = require_validateChecksumFromResponse();
    exports2.flexibleChecksumsResponseMiddlewareOptions = {
      name: "flexibleChecksumsResponseMiddleware",
      toMiddleware: "deserializerMiddleware",
      relation: "after",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    var flexibleChecksumsResponseMiddleware = (config, middlewareConfig) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const input = args.input;
      const result = await next(args);
      const response = result.response;
      let collectedStream = void 0;
      const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
      if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        const isStreamingBody = (0, isStreaming_1.isStreaming)(response.body);
        if (isStreamingBody) {
          collectedStream = await config.streamCollector(response.body);
          response.body = (0, create_read_stream_on_buffer_1.createReadStreamOnBuffer)(collectedStream);
        }
        await (0, validateChecksumFromResponse_1.validateChecksumFromResponse)(result.response, {
          config,
          responseAlgorithms
        });
        if (isStreamingBody && collectedStream) {
          response.body = (0, create_read_stream_on_buffer_1.createReadStreamOnBuffer)(collectedStream);
        }
      }
      return result;
    };
    exports2.flexibleChecksumsResponseMiddleware = flexibleChecksumsResponseMiddleware;
  }
});

var require_getFlexibleChecksumsPlugin = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getFlexibleChecksumsPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFlexibleChecksumsPlugin = exports2.flexibleChecksumsMiddlewareOptions = void 0;
    var flexibleChecksumsMiddleware_1 = require_flexibleChecksumsMiddleware();
    var flexibleChecksumsResponseMiddleware_1 = require_flexibleChecksumsResponseMiddleware();
    exports2.flexibleChecksumsMiddlewareOptions = {
      name: "flexibleChecksumsMiddleware",
      step: "build",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    var getFlexibleChecksumsPlugin = (config, middlewareConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, flexibleChecksumsMiddleware_1.flexibleChecksumsMiddleware)(config, middlewareConfig), exports2.flexibleChecksumsMiddlewareOptions);
        clientStack.addRelativeTo((0, flexibleChecksumsResponseMiddleware_1.flexibleChecksumsResponseMiddleware)(config, middlewareConfig), flexibleChecksumsResponseMiddleware_1.flexibleChecksumsResponseMiddlewareOptions);
      }
    });
    exports2.getFlexibleChecksumsPlugin = getFlexibleChecksumsPlugin;
  }
});

var require_dist_cjs65 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_constants9(), exports2);
    tslib_1.__exportStar(require_flexibleChecksumsMiddleware(), exports2);
    tslib_1.__exportStar(require_getFlexibleChecksumsPlugin(), exports2);
  }
});

var require_DeleteObjectsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteObjectsCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteObjectsCommand = class _DeleteObjectsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteObjectsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteObjectsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteObjectsCommand)(output, context);
      }
    };
    exports2.DeleteObjectsCommand = DeleteObjectsCommand;
  }
});

var require_DeleteObjectTaggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteObjectTaggingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteObjectTaggingCommand = class _DeleteObjectTaggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeleteObjectTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeleteObjectTaggingCommand)(output, context);
      }
    };
    exports2.DeleteObjectTaggingCommand = DeleteObjectTaggingCommand;
  }
});

var require_DeletePublicAccessBlockCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeletePublicAccessBlockCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeletePublicAccessBlockCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var DeletePublicAccessBlockCommand = class _DeletePublicAccessBlockCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeletePublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_DeletePublicAccessBlockCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_DeletePublicAccessBlockCommand)(output, context);
      }
    };
    exports2.DeletePublicAccessBlockCommand = DeletePublicAccessBlockCommand;
  }
});

var require_GetBucketAccelerateConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAccelerateConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketAccelerateConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketAccelerateConfigurationCommand = class _GetBucketAccelerateConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketAccelerateConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketAccelerateConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketAccelerateConfigurationCommand = GetBucketAccelerateConfigurationCommand;
  }
});

var require_GetBucketAclCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketAclCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketAclCommand = class _GetBucketAclCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketAclCommand)(output, context);
      }
    };
    exports2.GetBucketAclCommand = GetBucketAclCommand;
  }
});

var require_GetBucketAnalyticsConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAnalyticsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketAnalyticsConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketAnalyticsConfigurationCommand = class _GetBucketAnalyticsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketAnalyticsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketAnalyticsConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketAnalyticsConfigurationCommand = GetBucketAnalyticsConfigurationCommand;
  }
});

var require_GetBucketCorsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketCorsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketCorsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketCorsCommand = class _GetBucketCorsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketCorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketCorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketCorsCommand)(output, context);
      }
    };
    exports2.GetBucketCorsCommand = GetBucketCorsCommand;
  }
});

var require_GetBucketEncryptionCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketEncryptionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketEncryptionCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketEncryptionCommand = class _GetBucketEncryptionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetBucketEncryptionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketEncryptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketEncryptionCommand)(output, context);
      }
    };
    exports2.GetBucketEncryptionCommand = GetBucketEncryptionCommand;
  }
});

var require_GetBucketIntelligentTieringConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketIntelligentTieringConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketIntelligentTieringConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketIntelligentTieringConfigurationCommand = class _GetBucketIntelligentTieringConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketIntelligentTieringConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketIntelligentTieringConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketIntelligentTieringConfigurationCommand = GetBucketIntelligentTieringConfigurationCommand;
  }
});

var require_GetBucketInventoryConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketInventoryConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketInventoryConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketInventoryConfigurationCommand = class _GetBucketInventoryConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketInventoryConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketInventoryConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketInventoryConfigurationCommand = GetBucketInventoryConfigurationCommand;
  }
});

var require_GetBucketLifecycleConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLifecycleConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketLifecycleConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketLifecycleConfigurationCommand = class _GetBucketLifecycleConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketLifecycleConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketLifecycleConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketLifecycleConfigurationCommand = GetBucketLifecycleConfigurationCommand;
  }
});

var require_GetBucketLocationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLocationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketLocationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketLocationCommand = class _GetBucketLocationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketLocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketLocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketLocationCommand)(output, context);
      }
    };
    exports2.GetBucketLocationCommand = GetBucketLocationCommand;
  }
});

var require_GetBucketLoggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLoggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketLoggingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketLoggingCommand = class _GetBucketLoggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketLoggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLoggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketLoggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketLoggingCommand)(output, context);
      }
    };
    exports2.GetBucketLoggingCommand = GetBucketLoggingCommand;
  }
});

var require_GetBucketMetricsConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketMetricsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketMetricsConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketMetricsConfigurationCommand = class _GetBucketMetricsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketMetricsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketMetricsConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketMetricsConfigurationCommand = GetBucketMetricsConfigurationCommand;
  }
});

var require_GetBucketNotificationConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketNotificationConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketNotificationConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketNotificationConfigurationCommand = class _GetBucketNotificationConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketNotificationConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketNotificationConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketNotificationConfigurationCommand = GetBucketNotificationConfigurationCommand;
  }
});

var require_GetBucketOwnershipControlsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketOwnershipControlsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketOwnershipControlsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketOwnershipControlsCommand = class _GetBucketOwnershipControlsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketOwnershipControlsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketOwnershipControlsCommand)(output, context);
      }
    };
    exports2.GetBucketOwnershipControlsCommand = GetBucketOwnershipControlsCommand;
  }
});

var require_GetBucketPolicyCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketPolicyCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketPolicyCommand = class _GetBucketPolicyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketPolicyCommand)(output, context);
      }
    };
    exports2.GetBucketPolicyCommand = GetBucketPolicyCommand;
  }
});

var require_GetBucketPolicyStatusCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketPolicyStatusCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketPolicyStatusCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketPolicyStatusCommand = class _GetBucketPolicyStatusCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketPolicyStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketPolicyStatusCommand)(output, context);
      }
    };
    exports2.GetBucketPolicyStatusCommand = GetBucketPolicyStatusCommand;
  }
});

var require_GetBucketReplicationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketReplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketReplicationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketReplicationCommand = class _GetBucketReplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketReplicationCommand)(output, context);
      }
    };
    exports2.GetBucketReplicationCommand = GetBucketReplicationCommand;
  }
});

var require_GetBucketRequestPaymentCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketRequestPaymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketRequestPaymentCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketRequestPaymentCommand = class _GetBucketRequestPaymentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketRequestPaymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketRequestPaymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketRequestPaymentCommand)(output, context);
      }
    };
    exports2.GetBucketRequestPaymentCommand = GetBucketRequestPaymentCommand;
  }
});

var require_GetBucketTaggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketTaggingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketTaggingCommand = class _GetBucketTaggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketTaggingCommand)(output, context);
      }
    };
    exports2.GetBucketTaggingCommand = GetBucketTaggingCommand;
  }
});

var require_GetBucketVersioningCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketVersioningCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketVersioningCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketVersioningCommand = class _GetBucketVersioningCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketVersioningCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketVersioningCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketVersioningCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketVersioningCommand)(output, context);
      }
    };
    exports2.GetBucketVersioningCommand = GetBucketVersioningCommand;
  }
});

var require_GetBucketWebsiteCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketWebsiteCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketWebsiteCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketWebsiteCommand = class _GetBucketWebsiteCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetBucketWebsiteCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetBucketWebsiteCommand)(output, context);
      }
    };
    exports2.GetBucketWebsiteCommand = GetBucketWebsiteCommand;
  }
});

var require_GetObjectAclCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectAclCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectAclCommand = class _GetObjectAclCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectAclCommand)(output, context);
      }
    };
    exports2.GetObjectAclCommand = GetObjectAclCommand;
  }
});

var require_GetObjectAttributesCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectAttributesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectAttributesCommand = exports2.$Command = void 0;
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectAttributesCommand = class _GetObjectAttributesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectAttributesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectAttributesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectAttributesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectAttributesCommand)(output, context);
      }
    };
    exports2.GetObjectAttributesCommand = GetObjectAttributesCommand;
  }
});

var require_GetObjectCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectCommand = class _GetObjectCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestChecksumRequired: false,
          requestValidationModeMember: "ChecksumMode",
          responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"]
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectCommand)(output, context);
      }
    };
    exports2.GetObjectCommand = GetObjectCommand;
  }
});

var require_GetObjectLegalHoldCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectLegalHoldCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectLegalHoldCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectLegalHoldCommand = class _GetObjectLegalHoldCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectLegalHoldCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLegalHoldCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectLegalHoldCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectLegalHoldCommand)(output, context);
      }
    };
    exports2.GetObjectLegalHoldCommand = GetObjectLegalHoldCommand;
  }
});

var require_GetObjectLockConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectLockConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectLockConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectLockConfigurationCommand = class _GetObjectLockConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLockConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectLockConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectLockConfigurationCommand)(output, context);
      }
    };
    exports2.GetObjectLockConfigurationCommand = GetObjectLockConfigurationCommand;
  }
});

var require_GetObjectRetentionCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectRetentionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectRetentionCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectRetentionCommand = class _GetObjectRetentionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectRetentionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectRetentionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectRetentionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectRetentionCommand)(output, context);
      }
    };
    exports2.GetObjectRetentionCommand = GetObjectRetentionCommand;
  }
});

var require_GetObjectTaggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectTaggingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectTaggingCommand = class _GetObjectTaggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectTaggingCommand)(output, context);
      }
    };
    exports2.GetObjectTaggingCommand = GetObjectTaggingCommand;
  }
});

var require_GetObjectTorrentCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectTorrentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectTorrentCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectTorrentCommand = class _GetObjectTorrentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetObjectTorrentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTorrentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetObjectTorrentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetObjectTorrentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetObjectTorrentCommand)(output, context);
      }
    };
    exports2.GetObjectTorrentCommand = GetObjectTorrentCommand;
  }
});

var require_GetPublicAccessBlockCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetPublicAccessBlockCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetPublicAccessBlockCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var GetPublicAccessBlockCommand = class _GetPublicAccessBlockCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetPublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_GetPublicAccessBlockCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_GetPublicAccessBlockCommand)(output, context);
      }
    };
    exports2.GetPublicAccessBlockCommand = GetPublicAccessBlockCommand;
  }
});

var require_HeadBucketCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/HeadBucketCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeadBucketCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var HeadBucketCommand = class _HeadBucketCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _HeadBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadBucketCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_HeadBucketCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_HeadBucketCommand)(output, context);
      }
    };
    exports2.HeadBucketCommand = HeadBucketCommand;
  }
});

var require_HeadObjectCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/HeadObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeadObjectCommand = exports2.$Command = void 0;
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var HeadObjectCommand = class _HeadObjectCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _HeadObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.HeadObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.HeadObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_HeadObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_HeadObjectCommand)(output, context);
      }
    };
    exports2.HeadObjectCommand = HeadObjectCommand;
  }
});

var require_ListBucketAnalyticsConfigurationsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketAnalyticsConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketAnalyticsConfigurationsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketAnalyticsConfigurationsCommand = class _ListBucketAnalyticsConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketAnalyticsConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListBucketAnalyticsConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListBucketAnalyticsConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketAnalyticsConfigurationsCommand = ListBucketAnalyticsConfigurationsCommand;
  }
});

var require_ListBucketIntelligentTieringConfigurationsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketIntelligentTieringConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketIntelligentTieringConfigurationsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketIntelligentTieringConfigurationsCommand = class _ListBucketIntelligentTieringConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListBucketIntelligentTieringConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListBucketIntelligentTieringConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketIntelligentTieringConfigurationsCommand = ListBucketIntelligentTieringConfigurationsCommand;
  }
});

var require_ListBucketInventoryConfigurationsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketInventoryConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketInventoryConfigurationsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketInventoryConfigurationsCommand = class _ListBucketInventoryConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketInventoryConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListBucketInventoryConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListBucketInventoryConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketInventoryConfigurationsCommand = ListBucketInventoryConfigurationsCommand;
  }
});

var require_ListBucketMetricsConfigurationsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketMetricsConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketMetricsConfigurationsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketMetricsConfigurationsCommand = class _ListBucketMetricsConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketMetricsConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListBucketMetricsConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListBucketMetricsConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketMetricsConfigurationsCommand = ListBucketMetricsConfigurationsCommand;
  }
});

var require_ListBucketsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketsCommand = class _ListBucketsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBucketsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListBucketsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListBucketsCommand)(output, context);
      }
    };
    exports2.ListBucketsCommand = ListBucketsCommand;
  }
});

var require_ListMultipartUploadsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListMultipartUploadsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListMultipartUploadsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListMultipartUploadsCommand = class _ListMultipartUploadsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListMultipartUploadsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListMultipartUploadsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListMultipartUploadsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListMultipartUploadsCommand)(output, context);
      }
    };
    exports2.ListMultipartUploadsCommand = ListMultipartUploadsCommand;
  }
});

var require_ListObjectsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListObjectsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListObjectsCommand = class _ListObjectsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListObjectsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListObjectsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListObjectsCommand)(output, context);
      }
    };
    exports2.ListObjectsCommand = ListObjectsCommand;
  }
});

var require_ListObjectsV2Command = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectsV2Command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListObjectsV2Command = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListObjectsV2Command = class _ListObjectsV2Command extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListObjectsV2Command.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsV2Command";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListObjectsV2Command)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListObjectsV2Command)(output, context);
      }
    };
    exports2.ListObjectsV2Command = ListObjectsV2Command;
  }
});

var require_ListObjectVersionsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectVersionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListObjectVersionsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var ListObjectVersionsCommand = class _ListObjectVersionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListObjectVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListObjectVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListObjectVersionsCommand)(output, context);
      }
    };
    exports2.ListObjectVersionsCommand = ListObjectVersionsCommand;
  }
});

var require_ListPartsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListPartsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListPartsCommand = exports2.$Command = void 0;
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListPartsCommand = class _ListPartsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListPartsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListPartsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListPartsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_ListPartsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_ListPartsCommand)(output, context);
      }
    };
    exports2.ListPartsCommand = ListPartsCommand;
  }
});

var require_PutBucketAccelerateConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAccelerateConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketAccelerateConfigurationCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketAccelerateConfigurationCommand = class _PutBucketAccelerateConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketAccelerateConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketAccelerateConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketAccelerateConfigurationCommand = PutBucketAccelerateConfigurationCommand;
  }
});

var require_PutBucketAclCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketAclCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketAclCommand = class _PutBucketAclCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketAclCommand)(output, context);
      }
    };
    exports2.PutBucketAclCommand = PutBucketAclCommand;
  }
});

var require_PutBucketAnalyticsConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAnalyticsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketAnalyticsConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketAnalyticsConfigurationCommand = class _PutBucketAnalyticsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketAnalyticsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketAnalyticsConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketAnalyticsConfigurationCommand = PutBucketAnalyticsConfigurationCommand;
  }
});

var require_PutBucketCorsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketCorsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketCorsCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketCorsCommand = class _PutBucketCorsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketCorsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketCorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketCorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketCorsCommand)(output, context);
      }
    };
    exports2.PutBucketCorsCommand = PutBucketCorsCommand;
  }
});

var require_PutBucketEncryptionCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketEncryptionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketEncryptionCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketEncryptionCommand = class _PutBucketEncryptionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketEncryptionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketEncryptionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketEncryptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketEncryptionCommand)(output, context);
      }
    };
    exports2.PutBucketEncryptionCommand = PutBucketEncryptionCommand;
  }
});

var require_PutBucketIntelligentTieringConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketIntelligentTieringConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketIntelligentTieringConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketIntelligentTieringConfigurationCommand = class _PutBucketIntelligentTieringConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketIntelligentTieringConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketIntelligentTieringConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketIntelligentTieringConfigurationCommand = PutBucketIntelligentTieringConfigurationCommand;
  }
});

var require_PutBucketInventoryConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketInventoryConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketInventoryConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketInventoryConfigurationCommand = class _PutBucketInventoryConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketInventoryConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketInventoryConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketInventoryConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketInventoryConfigurationCommand = PutBucketInventoryConfigurationCommand;
  }
});

var require_PutBucketLifecycleConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketLifecycleConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketLifecycleConfigurationCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketLifecycleConfigurationCommand = class _PutBucketLifecycleConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketLifecycleConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketLifecycleConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketLifecycleConfigurationCommand = PutBucketLifecycleConfigurationCommand;
  }
});

var require_PutBucketLoggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketLoggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketLoggingCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketLoggingCommand = class _PutBucketLoggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketLoggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLoggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketLoggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketLoggingCommand)(output, context);
      }
    };
    exports2.PutBucketLoggingCommand = PutBucketLoggingCommand;
  }
});

var require_PutBucketMetricsConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketMetricsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketMetricsConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketMetricsConfigurationCommand = class _PutBucketMetricsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketMetricsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketMetricsConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketMetricsConfigurationCommand = PutBucketMetricsConfigurationCommand;
  }
});

var require_PutBucketNotificationConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketNotificationConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketNotificationConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketNotificationConfigurationCommand = class _PutBucketNotificationConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketNotificationConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketNotificationConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketNotificationConfigurationCommand = PutBucketNotificationConfigurationCommand;
  }
});

var require_PutBucketOwnershipControlsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketOwnershipControlsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketOwnershipControlsCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketOwnershipControlsCommand = class _PutBucketOwnershipControlsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, { input: this.input, requestChecksumRequired: true }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketOwnershipControlsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketOwnershipControlsCommand)(output, context);
      }
    };
    exports2.PutBucketOwnershipControlsCommand = PutBucketOwnershipControlsCommand;
  }
});

var require_PutBucketPolicyCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketPolicyCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketPolicyCommand = class _PutBucketPolicyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketPolicyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketPolicyCommand)(output, context);
      }
    };
    exports2.PutBucketPolicyCommand = PutBucketPolicyCommand;
  }
});

var require_PutBucketReplicationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketReplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketReplicationCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketReplicationCommand = class _PutBucketReplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketReplicationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketReplicationCommand)(output, context);
      }
    };
    exports2.PutBucketReplicationCommand = PutBucketReplicationCommand;
  }
});

var require_PutBucketRequestPaymentCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketRequestPaymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketRequestPaymentCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketRequestPaymentCommand = class _PutBucketRequestPaymentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketRequestPaymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketRequestPaymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketRequestPaymentCommand)(output, context);
      }
    };
    exports2.PutBucketRequestPaymentCommand = PutBucketRequestPaymentCommand;
  }
});

var require_PutBucketTaggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketTaggingCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketTaggingCommand = class _PutBucketTaggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketTaggingCommand)(output, context);
      }
    };
    exports2.PutBucketTaggingCommand = PutBucketTaggingCommand;
  }
});

var require_PutBucketVersioningCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketVersioningCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketVersioningCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketVersioningCommand = class _PutBucketVersioningCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketVersioningCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketVersioningCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketVersioningCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketVersioningCommand)(output, context);
      }
    };
    exports2.PutBucketVersioningCommand = PutBucketVersioningCommand;
  }
});

var require_PutBucketWebsiteCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketWebsiteCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketWebsiteCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketWebsiteCommand = class _PutBucketWebsiteCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutBucketWebsiteCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutBucketWebsiteCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutBucketWebsiteCommand)(output, context);
      }
    };
    exports2.PutBucketWebsiteCommand = PutBucketWebsiteCommand;
  }
});

var require_PutObjectAclCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectAclCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectAclCommand = class _PutObjectAclCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutObjectAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutObjectAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutObjectAclCommand)(output, context);
      }
    };
    exports2.PutObjectAclCommand = PutObjectAclCommand;
  }
});

var require_PutObjectCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_sdk_s3_1 = require_dist_cjs8();
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_03();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectCommand = class _PutObjectCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getCheckContentLengthHeaderPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutObjectCommand)(output, context);
      }
    };
    exports2.PutObjectCommand = PutObjectCommand;
  }
});

var require_PutObjectLegalHoldCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectLegalHoldCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectLegalHoldCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectLegalHoldCommand = class _PutObjectLegalHoldCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutObjectLegalHoldCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLegalHoldCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutObjectLegalHoldCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutObjectLegalHoldCommand)(output, context);
      }
    };
    exports2.PutObjectLegalHoldCommand = PutObjectLegalHoldCommand;
  }
});

var require_PutObjectLockConfigurationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectLockConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectLockConfigurationCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectLockConfigurationCommand = class _PutObjectLockConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLockConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutObjectLockConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutObjectLockConfigurationCommand)(output, context);
      }
    };
    exports2.PutObjectLockConfigurationCommand = PutObjectLockConfigurationCommand;
  }
});

var require_PutObjectRetentionCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectRetentionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectRetentionCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectRetentionCommand = class _PutObjectRetentionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutObjectRetentionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectRetentionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutObjectRetentionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutObjectRetentionCommand)(output, context);
      }
    };
    exports2.PutObjectRetentionCommand = PutObjectRetentionCommand;
  }
});

var require_PutObjectTaggingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectTaggingCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectTaggingCommand = class _PutObjectTaggingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutObjectTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutObjectTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutObjectTaggingCommand)(output, context);
      }
    };
    exports2.PutObjectTaggingCommand = PutObjectTaggingCommand;
  }
});

var require_PutPublicAccessBlockCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutPublicAccessBlockCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutPublicAccessBlockCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restXml_1 = require_Aws_restXml();
    var PutPublicAccessBlockCommand = class _PutPublicAccessBlockCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutPublicAccessBlockCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutPublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_PutPublicAccessBlockCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_PutPublicAccessBlockCommand)(output, context);
      }
    };
    exports2.PutPublicAccessBlockCommand = PutPublicAccessBlockCommand;
  }
});

var require_RestoreObjectCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/RestoreObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RestoreObjectCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var RestoreObjectCommand = class _RestoreObjectCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RestoreObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "RestoreObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_RestoreObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_RestoreObjectCommand)(output, context);
      }
    };
    exports2.RestoreObjectCommand = RestoreObjectCommand;
  }
});

var require_SelectObjectContentCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/SelectObjectContentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SelectObjectContentCommand = exports2.$Command = void 0;
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var SelectObjectContentCommand = class _SelectObjectContentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SelectObjectContentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "SelectObjectContentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SelectObjectContentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SelectObjectContentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_SelectObjectContentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_SelectObjectContentCommand)(output, context);
      }
    };
    exports2.SelectObjectContentCommand = SelectObjectContentCommand;
  }
});

var require_UploadPartCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/UploadPartCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UploadPartCommand = exports2.$Command = void 0;
    var middleware_flexible_checksums_1 = require_dist_cjs65();
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var UploadPartCommand = class _UploadPartCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UploadPartCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadPartRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadPartOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_UploadPartCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_UploadPartCommand)(output, context);
      }
    };
    exports2.UploadPartCommand = UploadPartCommand;
  }
});

var require_UploadPartCopyCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/UploadPartCopyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UploadPartCopyCommand = exports2.$Command = void 0;
    var middleware_sdk_s3_1 = require_dist_cjs8();
    var middleware_ssec_1 = require_dist_cjs63();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var UploadPartCopyCommand = class _UploadPartCopyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UploadPartCopyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCopyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadPartCopyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadPartCopyOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_UploadPartCopyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_UploadPartCopyCommand)(output, context);
      }
    };
    exports2.UploadPartCopyCommand = UploadPartCopyCommand;
  }
});

var require_WriteGetObjectResponseCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/WriteGetObjectResponseCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WriteGetObjectResponseCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var WriteGetObjectResponseCommand = class _WriteGetObjectResponseCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseObjectLambdaEndpoint: { type: "staticContextParams", value: true },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _WriteGetObjectResponseCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "WriteGetObjectResponseCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.WriteGetObjectResponseRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.se_WriteGetObjectResponseCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.de_WriteGetObjectResponseCommand)(output, context);
      }
    };
    exports2.WriteGetObjectResponseCommand = WriteGetObjectResponseCommand;
  }
});

var require_S3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/S3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3 = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var AbortMultipartUploadCommand_1 = require_AbortMultipartUploadCommand();
    var CompleteMultipartUploadCommand_1 = require_CompleteMultipartUploadCommand();
    var CopyObjectCommand_1 = require_CopyObjectCommand();
    var CreateBucketCommand_1 = require_CreateBucketCommand();
    var CreateMultipartUploadCommand_1 = require_CreateMultipartUploadCommand();
    var DeleteBucketAnalyticsConfigurationCommand_1 = require_DeleteBucketAnalyticsConfigurationCommand();
    var DeleteBucketCommand_1 = require_DeleteBucketCommand();
    var DeleteBucketCorsCommand_1 = require_DeleteBucketCorsCommand();
    var DeleteBucketEncryptionCommand_1 = require_DeleteBucketEncryptionCommand();
    var DeleteBucketIntelligentTieringConfigurationCommand_1 = require_DeleteBucketIntelligentTieringConfigurationCommand();
    var DeleteBucketInventoryConfigurationCommand_1 = require_DeleteBucketInventoryConfigurationCommand();
    var DeleteBucketLifecycleCommand_1 = require_DeleteBucketLifecycleCommand();
    var DeleteBucketMetricsConfigurationCommand_1 = require_DeleteBucketMetricsConfigurationCommand();
    var DeleteBucketOwnershipControlsCommand_1 = require_DeleteBucketOwnershipControlsCommand();
    var DeleteBucketPolicyCommand_1 = require_DeleteBucketPolicyCommand();
    var DeleteBucketReplicationCommand_1 = require_DeleteBucketReplicationCommand();
    var DeleteBucketTaggingCommand_1 = require_DeleteBucketTaggingCommand();
    var DeleteBucketWebsiteCommand_1 = require_DeleteBucketWebsiteCommand();
    var DeleteObjectCommand_1 = require_DeleteObjectCommand();
    var DeleteObjectsCommand_1 = require_DeleteObjectsCommand();
    var DeleteObjectTaggingCommand_1 = require_DeleteObjectTaggingCommand();
    var DeletePublicAccessBlockCommand_1 = require_DeletePublicAccessBlockCommand();
    var GetBucketAccelerateConfigurationCommand_1 = require_GetBucketAccelerateConfigurationCommand();
    var GetBucketAclCommand_1 = require_GetBucketAclCommand();
    var GetBucketAnalyticsConfigurationCommand_1 = require_GetBucketAnalyticsConfigurationCommand();
    var GetBucketCorsCommand_1 = require_GetBucketCorsCommand();
    var GetBucketEncryptionCommand_1 = require_GetBucketEncryptionCommand();
    var GetBucketIntelligentTieringConfigurationCommand_1 = require_GetBucketIntelligentTieringConfigurationCommand();
    var GetBucketInventoryConfigurationCommand_1 = require_GetBucketInventoryConfigurationCommand();
    var GetBucketLifecycleConfigurationCommand_1 = require_GetBucketLifecycleConfigurationCommand();
    var GetBucketLocationCommand_1 = require_GetBucketLocationCommand();
    var GetBucketLoggingCommand_1 = require_GetBucketLoggingCommand();
    var GetBucketMetricsConfigurationCommand_1 = require_GetBucketMetricsConfigurationCommand();
    var GetBucketNotificationConfigurationCommand_1 = require_GetBucketNotificationConfigurationCommand();
    var GetBucketOwnershipControlsCommand_1 = require_GetBucketOwnershipControlsCommand();
    var GetBucketPolicyCommand_1 = require_GetBucketPolicyCommand();
    var GetBucketPolicyStatusCommand_1 = require_GetBucketPolicyStatusCommand();
    var GetBucketReplicationCommand_1 = require_GetBucketReplicationCommand();
    var GetBucketRequestPaymentCommand_1 = require_GetBucketRequestPaymentCommand();
    var GetBucketTaggingCommand_1 = require_GetBucketTaggingCommand();
    var GetBucketVersioningCommand_1 = require_GetBucketVersioningCommand();
    var GetBucketWebsiteCommand_1 = require_GetBucketWebsiteCommand();
    var GetObjectAclCommand_1 = require_GetObjectAclCommand();
    var GetObjectAttributesCommand_1 = require_GetObjectAttributesCommand();
    var GetObjectCommand_1 = require_GetObjectCommand();
    var GetObjectLegalHoldCommand_1 = require_GetObjectLegalHoldCommand();
    var GetObjectLockConfigurationCommand_1 = require_GetObjectLockConfigurationCommand();
    var GetObjectRetentionCommand_1 = require_GetObjectRetentionCommand();
    var GetObjectTaggingCommand_1 = require_GetObjectTaggingCommand();
    var GetObjectTorrentCommand_1 = require_GetObjectTorrentCommand();
    var GetPublicAccessBlockCommand_1 = require_GetPublicAccessBlockCommand();
    var HeadBucketCommand_1 = require_HeadBucketCommand();
    var HeadObjectCommand_1 = require_HeadObjectCommand();
    var ListBucketAnalyticsConfigurationsCommand_1 = require_ListBucketAnalyticsConfigurationsCommand();
    var ListBucketIntelligentTieringConfigurationsCommand_1 = require_ListBucketIntelligentTieringConfigurationsCommand();
    var ListBucketInventoryConfigurationsCommand_1 = require_ListBucketInventoryConfigurationsCommand();
    var ListBucketMetricsConfigurationsCommand_1 = require_ListBucketMetricsConfigurationsCommand();
    var ListBucketsCommand_1 = require_ListBucketsCommand();
    var ListMultipartUploadsCommand_1 = require_ListMultipartUploadsCommand();
    var ListObjectsCommand_1 = require_ListObjectsCommand();
    var ListObjectsV2Command_1 = require_ListObjectsV2Command();
    var ListObjectVersionsCommand_1 = require_ListObjectVersionsCommand();
    var ListPartsCommand_1 = require_ListPartsCommand();
    var PutBucketAccelerateConfigurationCommand_1 = require_PutBucketAccelerateConfigurationCommand();
    var PutBucketAclCommand_1 = require_PutBucketAclCommand();
    var PutBucketAnalyticsConfigurationCommand_1 = require_PutBucketAnalyticsConfigurationCommand();
    var PutBucketCorsCommand_1 = require_PutBucketCorsCommand();
    var PutBucketEncryptionCommand_1 = require_PutBucketEncryptionCommand();
    var PutBucketIntelligentTieringConfigurationCommand_1 = require_PutBucketIntelligentTieringConfigurationCommand();
    var PutBucketInventoryConfigurationCommand_1 = require_PutBucketInventoryConfigurationCommand();
    var PutBucketLifecycleConfigurationCommand_1 = require_PutBucketLifecycleConfigurationCommand();
    var PutBucketLoggingCommand_1 = require_PutBucketLoggingCommand();
    var PutBucketMetricsConfigurationCommand_1 = require_PutBucketMetricsConfigurationCommand();
    var PutBucketNotificationConfigurationCommand_1 = require_PutBucketNotificationConfigurationCommand();
    var PutBucketOwnershipControlsCommand_1 = require_PutBucketOwnershipControlsCommand();
    var PutBucketPolicyCommand_1 = require_PutBucketPolicyCommand();
    var PutBucketReplicationCommand_1 = require_PutBucketReplicationCommand();
    var PutBucketRequestPaymentCommand_1 = require_PutBucketRequestPaymentCommand();
    var PutBucketTaggingCommand_1 = require_PutBucketTaggingCommand();
    var PutBucketVersioningCommand_1 = require_PutBucketVersioningCommand();
    var PutBucketWebsiteCommand_1 = require_PutBucketWebsiteCommand();
    var PutObjectAclCommand_1 = require_PutObjectAclCommand();
    var PutObjectCommand_1 = require_PutObjectCommand();
    var PutObjectLegalHoldCommand_1 = require_PutObjectLegalHoldCommand();
    var PutObjectLockConfigurationCommand_1 = require_PutObjectLockConfigurationCommand();
    var PutObjectRetentionCommand_1 = require_PutObjectRetentionCommand();
    var PutObjectTaggingCommand_1 = require_PutObjectTaggingCommand();
    var PutPublicAccessBlockCommand_1 = require_PutPublicAccessBlockCommand();
    var RestoreObjectCommand_1 = require_RestoreObjectCommand();
    var SelectObjectContentCommand_1 = require_SelectObjectContentCommand();
    var UploadPartCommand_1 = require_UploadPartCommand();
    var UploadPartCopyCommand_1 = require_UploadPartCopyCommand();
    var WriteGetObjectResponseCommand_1 = require_WriteGetObjectResponseCommand();
    var S3Client_1 = require_S3Client();
    var commands = {
      AbortMultipartUploadCommand: AbortMultipartUploadCommand_1.AbortMultipartUploadCommand,
      CompleteMultipartUploadCommand: CompleteMultipartUploadCommand_1.CompleteMultipartUploadCommand,
      CopyObjectCommand: CopyObjectCommand_1.CopyObjectCommand,
      CreateBucketCommand: CreateBucketCommand_1.CreateBucketCommand,
      CreateMultipartUploadCommand: CreateMultipartUploadCommand_1.CreateMultipartUploadCommand,
      DeleteBucketCommand: DeleteBucketCommand_1.DeleteBucketCommand,
      DeleteBucketAnalyticsConfigurationCommand: DeleteBucketAnalyticsConfigurationCommand_1.DeleteBucketAnalyticsConfigurationCommand,
      DeleteBucketCorsCommand: DeleteBucketCorsCommand_1.DeleteBucketCorsCommand,
      DeleteBucketEncryptionCommand: DeleteBucketEncryptionCommand_1.DeleteBucketEncryptionCommand,
      DeleteBucketIntelligentTieringConfigurationCommand: DeleteBucketIntelligentTieringConfigurationCommand_1.DeleteBucketIntelligentTieringConfigurationCommand,
      DeleteBucketInventoryConfigurationCommand: DeleteBucketInventoryConfigurationCommand_1.DeleteBucketInventoryConfigurationCommand,
      DeleteBucketLifecycleCommand: DeleteBucketLifecycleCommand_1.DeleteBucketLifecycleCommand,
      DeleteBucketMetricsConfigurationCommand: DeleteBucketMetricsConfigurationCommand_1.DeleteBucketMetricsConfigurationCommand,
      DeleteBucketOwnershipControlsCommand: DeleteBucketOwnershipControlsCommand_1.DeleteBucketOwnershipControlsCommand,
      DeleteBucketPolicyCommand: DeleteBucketPolicyCommand_1.DeleteBucketPolicyCommand,
      DeleteBucketReplicationCommand: DeleteBucketReplicationCommand_1.DeleteBucketReplicationCommand,
      DeleteBucketTaggingCommand: DeleteBucketTaggingCommand_1.DeleteBucketTaggingCommand,
      DeleteBucketWebsiteCommand: DeleteBucketWebsiteCommand_1.DeleteBucketWebsiteCommand,
      DeleteObjectCommand: DeleteObjectCommand_1.DeleteObjectCommand,
      DeleteObjectsCommand: DeleteObjectsCommand_1.DeleteObjectsCommand,
      DeleteObjectTaggingCommand: DeleteObjectTaggingCommand_1.DeleteObjectTaggingCommand,
      DeletePublicAccessBlockCommand: DeletePublicAccessBlockCommand_1.DeletePublicAccessBlockCommand,
      GetBucketAccelerateConfigurationCommand: GetBucketAccelerateConfigurationCommand_1.GetBucketAccelerateConfigurationCommand,
      GetBucketAclCommand: GetBucketAclCommand_1.GetBucketAclCommand,
      GetBucketAnalyticsConfigurationCommand: GetBucketAnalyticsConfigurationCommand_1.GetBucketAnalyticsConfigurationCommand,
      GetBucketCorsCommand: GetBucketCorsCommand_1.GetBucketCorsCommand,
      GetBucketEncryptionCommand: GetBucketEncryptionCommand_1.GetBucketEncryptionCommand,
      GetBucketIntelligentTieringConfigurationCommand: GetBucketIntelligentTieringConfigurationCommand_1.GetBucketIntelligentTieringConfigurationCommand,
      GetBucketInventoryConfigurationCommand: GetBucketInventoryConfigurationCommand_1.GetBucketInventoryConfigurationCommand,
      GetBucketLifecycleConfigurationCommand: GetBucketLifecycleConfigurationCommand_1.GetBucketLifecycleConfigurationCommand,
      GetBucketLocationCommand: GetBucketLocationCommand_1.GetBucketLocationCommand,
      GetBucketLoggingCommand: GetBucketLoggingCommand_1.GetBucketLoggingCommand,
      GetBucketMetricsConfigurationCommand: GetBucketMetricsConfigurationCommand_1.GetBucketMetricsConfigurationCommand,
      GetBucketNotificationConfigurationCommand: GetBucketNotificationConfigurationCommand_1.GetBucketNotificationConfigurationCommand,
      GetBucketOwnershipControlsCommand: GetBucketOwnershipControlsCommand_1.GetBucketOwnershipControlsCommand,
      GetBucketPolicyCommand: GetBucketPolicyCommand_1.GetBucketPolicyCommand,
      GetBucketPolicyStatusCommand: GetBucketPolicyStatusCommand_1.GetBucketPolicyStatusCommand,
      GetBucketReplicationCommand: GetBucketReplicationCommand_1.GetBucketReplicationCommand,
      GetBucketRequestPaymentCommand: GetBucketRequestPaymentCommand_1.GetBucketRequestPaymentCommand,
      GetBucketTaggingCommand: GetBucketTaggingCommand_1.GetBucketTaggingCommand,
      GetBucketVersioningCommand: GetBucketVersioningCommand_1.GetBucketVersioningCommand,
      GetBucketWebsiteCommand: GetBucketWebsiteCommand_1.GetBucketWebsiteCommand,
      GetObjectCommand: GetObjectCommand_1.GetObjectCommand,
      GetObjectAclCommand: GetObjectAclCommand_1.GetObjectAclCommand,
      GetObjectAttributesCommand: GetObjectAttributesCommand_1.GetObjectAttributesCommand,
      GetObjectLegalHoldCommand: GetObjectLegalHoldCommand_1.GetObjectLegalHoldCommand,
      GetObjectLockConfigurationCommand: GetObjectLockConfigurationCommand_1.GetObjectLockConfigurationCommand,
      GetObjectRetentionCommand: GetObjectRetentionCommand_1.GetObjectRetentionCommand,
      GetObjectTaggingCommand: GetObjectTaggingCommand_1.GetObjectTaggingCommand,
      GetObjectTorrentCommand: GetObjectTorrentCommand_1.GetObjectTorrentCommand,
      GetPublicAccessBlockCommand: GetPublicAccessBlockCommand_1.GetPublicAccessBlockCommand,
      HeadBucketCommand: HeadBucketCommand_1.HeadBucketCommand,
      HeadObjectCommand: HeadObjectCommand_1.HeadObjectCommand,
      ListBucketAnalyticsConfigurationsCommand: ListBucketAnalyticsConfigurationsCommand_1.ListBucketAnalyticsConfigurationsCommand,
      ListBucketIntelligentTieringConfigurationsCommand: ListBucketIntelligentTieringConfigurationsCommand_1.ListBucketIntelligentTieringConfigurationsCommand,
      ListBucketInventoryConfigurationsCommand: ListBucketInventoryConfigurationsCommand_1.ListBucketInventoryConfigurationsCommand,
      ListBucketMetricsConfigurationsCommand: ListBucketMetricsConfigurationsCommand_1.ListBucketMetricsConfigurationsCommand,
      ListBucketsCommand: ListBucketsCommand_1.ListBucketsCommand,
      ListMultipartUploadsCommand: ListMultipartUploadsCommand_1.ListMultipartUploadsCommand,
      ListObjectsCommand: ListObjectsCommand_1.ListObjectsCommand,
      ListObjectsV2Command: ListObjectsV2Command_1.ListObjectsV2Command,
      ListObjectVersionsCommand: ListObjectVersionsCommand_1.ListObjectVersionsCommand,
      ListPartsCommand: ListPartsCommand_1.ListPartsCommand,
      PutBucketAccelerateConfigurationCommand: PutBucketAccelerateConfigurationCommand_1.PutBucketAccelerateConfigurationCommand,
      PutBucketAclCommand: PutBucketAclCommand_1.PutBucketAclCommand,
      PutBucketAnalyticsConfigurationCommand: PutBucketAnalyticsConfigurationCommand_1.PutBucketAnalyticsConfigurationCommand,
      PutBucketCorsCommand: PutBucketCorsCommand_1.PutBucketCorsCommand,
      PutBucketEncryptionCommand: PutBucketEncryptionCommand_1.PutBucketEncryptionCommand,
      PutBucketIntelligentTieringConfigurationCommand: PutBucketIntelligentTieringConfigurationCommand_1.PutBucketIntelligentTieringConfigurationCommand,
      PutBucketInventoryConfigurationCommand: PutBucketInventoryConfigurationCommand_1.PutBucketInventoryConfigurationCommand,
      PutBucketLifecycleConfigurationCommand: PutBucketLifecycleConfigurationCommand_1.PutBucketLifecycleConfigurationCommand,
      PutBucketLoggingCommand: PutBucketLoggingCommand_1.PutBucketLoggingCommand,
      PutBucketMetricsConfigurationCommand: PutBucketMetricsConfigurationCommand_1.PutBucketMetricsConfigurationCommand,
      PutBucketNotificationConfigurationCommand: PutBucketNotificationConfigurationCommand_1.PutBucketNotificationConfigurationCommand,
      PutBucketOwnershipControlsCommand: PutBucketOwnershipControlsCommand_1.PutBucketOwnershipControlsCommand,
      PutBucketPolicyCommand: PutBucketPolicyCommand_1.PutBucketPolicyCommand,
      PutBucketReplicationCommand: PutBucketReplicationCommand_1.PutBucketReplicationCommand,
      PutBucketRequestPaymentCommand: PutBucketRequestPaymentCommand_1.PutBucketRequestPaymentCommand,
      PutBucketTaggingCommand: PutBucketTaggingCommand_1.PutBucketTaggingCommand,
      PutBucketVersioningCommand: PutBucketVersioningCommand_1.PutBucketVersioningCommand,
      PutBucketWebsiteCommand: PutBucketWebsiteCommand_1.PutBucketWebsiteCommand,
      PutObjectCommand: PutObjectCommand_1.PutObjectCommand,
      PutObjectAclCommand: PutObjectAclCommand_1.PutObjectAclCommand,
      PutObjectLegalHoldCommand: PutObjectLegalHoldCommand_1.PutObjectLegalHoldCommand,
      PutObjectLockConfigurationCommand: PutObjectLockConfigurationCommand_1.PutObjectLockConfigurationCommand,
      PutObjectRetentionCommand: PutObjectRetentionCommand_1.PutObjectRetentionCommand,
      PutObjectTaggingCommand: PutObjectTaggingCommand_1.PutObjectTaggingCommand,
      PutPublicAccessBlockCommand: PutPublicAccessBlockCommand_1.PutPublicAccessBlockCommand,
      RestoreObjectCommand: RestoreObjectCommand_1.RestoreObjectCommand,
      SelectObjectContentCommand: SelectObjectContentCommand_1.SelectObjectContentCommand,
      UploadPartCommand: UploadPartCommand_1.UploadPartCommand,
      UploadPartCopyCommand: UploadPartCopyCommand_1.UploadPartCopyCommand,
      WriteGetObjectResponseCommand: WriteGetObjectResponseCommand_1.WriteGetObjectResponseCommand
    };
    var S3 = class extends S3Client_1.S3Client {
    };
    exports2.S3 = S3;
    (0, smithy_client_1.createAggregatedClient)(commands, S3);
  }
});

var require_commands3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AbortMultipartUploadCommand(), exports2);
    tslib_1.__exportStar(require_CompleteMultipartUploadCommand(), exports2);
    tslib_1.__exportStar(require_CopyObjectCommand(), exports2);
    tslib_1.__exportStar(require_CreateBucketCommand(), exports2);
    tslib_1.__exportStar(require_CreateMultipartUploadCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketAnalyticsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketCorsCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketEncryptionCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketIntelligentTieringConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketInventoryConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketLifecycleCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketMetricsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketOwnershipControlsCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketPolicyCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketReplicationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketTaggingCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketWebsiteCommand(), exports2);
    tslib_1.__exportStar(require_DeleteObjectCommand(), exports2);
    tslib_1.__exportStar(require_DeleteObjectTaggingCommand(), exports2);
    tslib_1.__exportStar(require_DeleteObjectsCommand(), exports2);
    tslib_1.__exportStar(require_DeletePublicAccessBlockCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketAccelerateConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketAclCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketAnalyticsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketCorsCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketEncryptionCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketIntelligentTieringConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketInventoryConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketLifecycleConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketLocationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketLoggingCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketMetricsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketNotificationConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketOwnershipControlsCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketPolicyCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketPolicyStatusCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketReplicationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketRequestPaymentCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketTaggingCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketVersioningCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketWebsiteCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectAclCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectAttributesCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectLegalHoldCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectLockConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectRetentionCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectTaggingCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectTorrentCommand(), exports2);
    tslib_1.__exportStar(require_GetPublicAccessBlockCommand(), exports2);
    tslib_1.__exportStar(require_HeadBucketCommand(), exports2);
    tslib_1.__exportStar(require_HeadObjectCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketAnalyticsConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketIntelligentTieringConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketInventoryConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketMetricsConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketsCommand(), exports2);
    tslib_1.__exportStar(require_ListMultipartUploadsCommand(), exports2);
    tslib_1.__exportStar(require_ListObjectVersionsCommand(), exports2);
    tslib_1.__exportStar(require_ListObjectsCommand(), exports2);
    tslib_1.__exportStar(require_ListObjectsV2Command(), exports2);
    tslib_1.__exportStar(require_ListPartsCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketAccelerateConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketAclCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketAnalyticsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketCorsCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketEncryptionCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketIntelligentTieringConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketInventoryConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketLifecycleConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketLoggingCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketMetricsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketNotificationConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketOwnershipControlsCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketPolicyCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketReplicationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketRequestPaymentCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketTaggingCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketVersioningCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketWebsiteCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectAclCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectLegalHoldCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectLockConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectRetentionCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectTaggingCommand(), exports2);
    tslib_1.__exportStar(require_PutPublicAccessBlockCommand(), exports2);
    tslib_1.__exportStar(require_RestoreObjectCommand(), exports2);
    tslib_1.__exportStar(require_SelectObjectContentCommand(), exports2);
    tslib_1.__exportStar(require_UploadPartCommand(), exports2);
    tslib_1.__exportStar(require_UploadPartCopyCommand(), exports2);
    tslib_1.__exportStar(require_WriteGetObjectResponseCommand(), exports2);
  }
});

var require_Interfaces2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ListObjectsV2Paginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/ListObjectsV2Paginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListObjectsV2 = void 0;
    var ListObjectsV2Command_1 = require_ListObjectsV2Command();
    var S3Client_1 = require_S3Client();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListObjectsV2Command_1.ListObjectsV2Command(input), ...args);
    };
    async function* paginateListObjectsV2(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ContinuationToken = token;
        input["MaxKeys"] = config.pageSize;
        if (config.client instanceof S3Client_1.S3Client) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected S3 | S3Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextContinuationToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListObjectsV2 = paginateListObjectsV2;
  }
});

var require_ListPartsPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/ListPartsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListParts = void 0;
    var ListPartsCommand_1 = require_ListPartsCommand();
    var S3Client_1 = require_S3Client();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListPartsCommand_1.ListPartsCommand(input), ...args);
    };
    async function* paginateListParts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.PartNumberMarker = token;
        input["MaxParts"] = config.pageSize;
        if (config.client instanceof S3Client_1.S3Client) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected S3 | S3Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextPartNumberMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListParts = paginateListParts;
  }
});

var require_pagination4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports2);
    tslib_1.__exportStar(require_ListObjectsV2Paginator(), exports2);
    tslib_1.__exportStar(require_ListPartsPaginator(), exports2);
  }
});

var require_sleep = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/utils/sleep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports2.sleep = sleep;
  }
});

var require_waiter3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkExceptions = exports2.WaiterState = exports2.waiterServiceDefaults = void 0;
    exports2.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports2.WaiterState || (exports2.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports2.checkExceptions = checkExceptions;
  }
});

var require_poller = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/poller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter3();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports2.runPolling = runPolling;
  }
});

var require_validate = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/utils/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports2.validateWaiterOptions = validateWaiterOptions;
  }
});

var require_utils3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports2);
    tslib_1.__exportStar(require_validate(), exports2);
  }
});

var require_createWaiter = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/createWaiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils3();
    var waiter_1 = require_waiter3();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports2.createWaiter = createWaiter;
  }
});

var require_dist_cjs66 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports2);
    tslib_1.__exportStar(require_waiter3(), exports2);
  }
});

var require_waitForBucketExists = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForBucketExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilBucketExists = exports2.waitForBucketExists = void 0;
    var util_waiter_1 = require_dist_cjs66();
    var HeadBucketCommand_1 = require_HeadBucketCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadBucketCommand_1.HeadBucketCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForBucketExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForBucketExists = waitForBucketExists;
    var waitUntilBucketExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilBucketExists = waitUntilBucketExists;
  }
});

var require_waitForBucketNotExists = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForBucketNotExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilBucketNotExists = exports2.waitForBucketNotExists = void 0;
    var util_waiter_1 = require_dist_cjs66();
    var HeadBucketCommand_1 = require_HeadBucketCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadBucketCommand_1.HeadBucketCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForBucketNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForBucketNotExists = waitForBucketNotExists;
    var waitUntilBucketNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilBucketNotExists = waitUntilBucketNotExists;
  }
});

var require_waitForObjectExists = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForObjectExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilObjectExists = exports2.waitForObjectExists = void 0;
    var util_waiter_1 = require_dist_cjs66();
    var HeadObjectCommand_1 = require_HeadObjectCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadObjectCommand_1.HeadObjectCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForObjectExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForObjectExists = waitForObjectExists;
    var waitUntilObjectExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilObjectExists = waitUntilObjectExists;
  }
});

var require_waitForObjectNotExists = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForObjectNotExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilObjectNotExists = exports2.waitForObjectNotExists = void 0;
    var util_waiter_1 = require_dist_cjs66();
    var HeadObjectCommand_1 = require_HeadObjectCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadObjectCommand_1.HeadObjectCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForObjectNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForObjectNotExists = waitForObjectNotExists;
    var waitUntilObjectNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilObjectNotExists = waitUntilObjectNotExists;
  }
});

var require_waiters = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForBucketExists(), exports2);
    tslib_1.__exportStar(require_waitForBucketNotExists(), exports2);
    tslib_1.__exportStar(require_waitForObjectExists(), exports2);
    tslib_1.__exportStar(require_waitForObjectNotExists(), exports2);
  }
});

var require_models3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports2);
    tslib_1.__exportStar(require_models_1(), exports2);
  }
});

var require_dist_cjs67 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3ServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_S3Client(), exports2);
    tslib_1.__exportStar(require_S3(), exports2);
    tslib_1.__exportStar(require_commands3(), exports2);
    tslib_1.__exportStar(require_pagination4(), exports2);
    tslib_1.__exportStar(require_waiters(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    var S3ServiceException_1 = require_S3ServiceException();
    Object.defineProperty(exports2, "S3ServiceException", { enumerable: true, get: function() {
      return S3ServiceException_1.S3ServiceException;
    } });
  }
});

var require_bucket_inflight = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/bucket.inflight.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BucketClient = void 0;
    var consumers = __importStar2(require("stream/consumers"));
    var client_s3_1 = require_dist_cjs67();
    var BucketClient = class {
      constructor(bucketName, s3Client = new client_s3_1.S3Client({})) {
        this.bucketName = bucketName;
        this.s3Client = s3Client;
      }
      /**
       * Check if an object exists in the bucket
       *
       * @param key Key of the object
       */
      async exists(key) {
        const command = new client_s3_1.HeadObjectCommand({
          Bucket: this.bucketName,
          Key: key
        });
        try {
          await this.s3Client.send(command);
          return true;
        } catch (error) {
          if (error.name === "NotFound") {
            return false;
          }
          throw error;
        }
      }
      /**
       * Put object into bucket with given body contents
       *
       * @param key Key of the object
       * @param body string contents of the object
       */
      async put(key, body) {
        const command = new client_s3_1.PutObjectCommand({
          Bucket: this.bucketName,
          Key: key,
          Body: body
        });
        await this.s3Client.send(command);
      }
      /**
       * Put Json object into bucket with given body contents
       *
       * @param key Key of the object
       * @param body Json object
       */
      async putJson(key, body) {
        await this.put(key, JSON.stringify(body, null, 2));
      }
      /**
       * See https://github.com/aws/aws-sdk-js-v3/issues/1877
       */
      async getObjectContent(key) {
        const command = new client_s3_1.GetObjectCommand({
          Bucket: this.bucketName,
          Key: key
        });
        try {
          const resp = await this.s3Client.send(command);
          const objectContent = resp.Body;
          try {
            return await consumers.text(objectContent);
          } catch (e) {
            throw new Error(`Object content could not be read as text (key=${key}): ${e.stack})}`);
          }
        } catch (e) {
          if (e instanceof client_s3_1.NoSuchKey) {
            return void 0;
          }
          throw new Error(e.stack);
        }
      }
      /**
       * Get an object from the bucket
       *
       * @param key Key of the object
       * @returns content of the object
       */
      async get(key) {
        const objectContent = await this.getObjectContent(key);
        if (objectContent !== void 0) {
          return objectContent;
        }
        throw new Error(`Object does not exist (key=${key}).`);
      }
      /**
       * Get an object from the bucket if it exists
       *
       * @param key Key of the object
       * @returns content of the object
       */
      async tryGet(key) {
        return this.getObjectContent(key);
      }
      /**
       * Get a Json object from the bucket
       *
       * @param key Key of the object
       * @returns Json content of the object
       */
      async getJson(key) {
        return JSON.parse(await this.get(key));
      }
      /**
       * Get a Json object from the bucket if it exists
       *
       * @param key Key of the object
       * @returns Json content of the object
       */
      async tryGetJson(key) {
        const objectContent = await this.tryGet(key);
        if (objectContent !== void 0) {
          return JSON.parse(objectContent);
        } else {
          return void 0;
        }
      }
      /**
       * Delete an object from the bucket
       *
       * @param key Key of the object
       * @param opts Option object supporting additional strategies to delete item from a bucket
       */
      async delete(key, opts) {
        const mustExist = (opts == null ? void 0 : opts.mustExist) ?? false;
        if (mustExist && !await this.exists(key)) {
          throw new Error(`Object does not exist (key=${key}).`);
        }
        const command = new client_s3_1.DeleteObjectCommand({
          Key: key,
          Bucket: this.bucketName
        });
        try {
          await this.s3Client.send(command);
        } catch (e) {
          if (!mustExist && e instanceof client_s3_1.NoSuchKey) {
            return;
          }
          throw new Error(`Unable to delete "${key}": ${e.message}`);
        }
      }
      /**
       * Delete an object from the bucket if it exists
       *
       * @param key Key of the object
       * @param opts Option object supporting additional strategies to delete item from a bucket
       */
      async tryDelete(key) {
        if (await this.exists(key)) {
          await this.delete(key);
          return true;
        }
        return false;
      }
      /**
       * List all keys in the bucket.
       * @param prefix Limits the response to keys that begin with the specified prefix
       * TODO - add pagination support, currently returns all existing keys in the bucket
       * https://github.com/winglang/wing/issues/315
       */
      async list(prefix) {
        const list = [];
        let fetchMore = true;
        let marker = void 0;
        while (fetchMore) {
          const command = new client_s3_1.ListObjectsV2Command({
            Bucket: this.bucketName,
            Prefix: prefix,
            StartAfter: marker
          });
          const resp = await this.s3Client.send(command);
          for (const content of resp.Contents ?? []) {
            if (content.Key === void 0) {
              continue;
            }
            list.push(content.Key);
          }
          fetchMore = (resp == null ? void 0 : resp.IsTruncated) ?? false;
          marker = list.length > 0 ? list.at(-1) : void 0;
        }
        return list;
      }
      /**
       * Checks if the bucket is public
       * @returns true if the bucket is public and false otherwise
       */
      async checkIfPublic() {
        var _a, _b, _c, _d;
        const command = new client_s3_1.GetPublicAccessBlockCommand({
          Bucket: this.bucketName
        });
        const resp = await this.s3Client.send(command);
        return !((_a = resp.PublicAccessBlockConfiguration) == null ? void 0 : _a.BlockPublicAcls) && !((_b = resp.PublicAccessBlockConfiguration) == null ? void 0 : _b.BlockPublicPolicy) && !((_c = resp.PublicAccessBlockConfiguration) == null ? void 0 : _c.RestrictPublicBuckets) && !((_d = resp.PublicAccessBlockConfiguration) == null ? void 0 : _d.IgnorePublicAcls);
      }
      /**
       * Returns a url to the given file.
       * @Throws if the file is not public or if object does not exist.
       */
      async publicUrl(key) {
        if (!await this.checkIfPublic()) {
          throw new Error("Cannot provide public url for a non-public bucket");
        }
        if (!await this.exists(key)) {
          throw new Error(`Cannot provide public url for a non-existent key (key=${key})`);
        }
        const region = await this.getLocation();
        return encodeURI(`https://${this.bucketName}.s3.${region}.amazonaws.com/${key}`);
      }
      /**
       * Returns a signed url to the given file. This URL can be used by anyone to
       * access the file until the link expires (defaults to 24 hours).
       * @param key The key to reach
       * @param duration Time until expires
       */
      async signed_url(key, duration) {
        throw new Error(`signed_url is not implemented yet (key=${key}, duration=${duration})`);
      }
      async getLocation() {
        const command = new client_s3_1.GetBucketLocationCommand({
          Bucket: this.bucketName
        });
        const { LocationConstraint: region = "us-east-1" } = await this.s3Client.send(command);
        return region;
      }
    };
    exports2.BucketClient = BucketClient;
  }
});

var require_configurations4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
    var CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
    var isFalsy = (value) => ["false", "0"].indexOf(value) >= 0;
    exports2.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env) {
            const value = env[envKey];
            if (value === "") {
              throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
          }
          return !isFalsy(value);
        }
      },
      default: void 0
    };
  }
});

var require_getCacheKey = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...accessKeyId && { accessKeyId },
        ...identifiers && {
          commandName,
          identifiers: Object.entries(identifiers).sort().reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})
        }
      });
    };
    exports2.getCacheKey = getCacheKey;
  }
});

var require_updateDiscoveredEndpointInCache = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) => new Promise((resolve, reject) => {
      const { endpointCache } = config;
      const { cacheKey, commandName, identifiers } = options;
      const endpoints = endpointCache.get(cacheKey);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        if (options.isDiscoveredEndpointRequired) {
          if (!requestQueue[cacheKey])
            requestQueue[cacheKey] = [];
          requestQueue[cacheKey].push({ resolve, reject });
        } else {
          resolve();
        }
      } else if (endpoints && endpoints.length > 0) {
        resolve();
      } else {
        const placeholderEndpoints = [{ Address: "", CachePeriodInMinutes: 1 }];
        endpointCache.set(cacheKey, placeholderEndpoints);
        const command = new options.endpointDiscoveryCommandCtor({
          Operation: commandName.slice(0, -7),
          Identifiers: identifiers
        });
        const handler = command.resolveMiddleware(options.clientStack, config, options.options);
        handler(command).then((result) => {
          endpointCache.set(cacheKey, result.output.Endpoints);
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
              resolve2();
            });
            delete requestQueue[cacheKey];
          }
          resolve();
        }).catch((error) => {
          endpointCache.delete(cacheKey);
          const errorToThrow = Object.assign(new Error(`The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`), { reason: error });
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
              reject2(errorToThrow);
            });
            delete requestQueue[cacheKey];
          }
          if (options.isDiscoveredEndpointRequired) {
            reject(errorToThrow);
          } else {
            endpointCache.set(cacheKey, placeholderEndpoints);
            resolve();
          }
        });
      }
    });
    exports2.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  }
});

var require_endpointDiscoveryMiddleware = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 = require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {
      if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
          throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
        }
        return next(args);
      }
      const { endpointDiscoveryCommandCtor } = config;
      const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
      const { clientName, commandName } = context;
      const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
      const cacheKey = await (0, getCacheKey_1.getCacheKey)(commandName, config, { identifiers });
      if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
          throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`);
        }
        await (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      } else if (isEndpointDiscoveryEnabled) {
        (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      }
      const { request } = args;
      if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
          request.hostname = endpoint;
        }
      }
      return next(args);
    };
    exports2.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  }
});

var require_getEndpointDiscoveryPlugin = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointDiscoveryOptionalPlugin = exports2.getEndpointDiscoveryRequiredPlugin = exports2.getEndpointDiscoveryPlugin = exports2.endpointDiscoveryMiddlewareOptions = void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports2.endpointDiscoveryMiddlewareOptions = {
      name: "endpointDiscoveryMiddleware",
      step: "build",
      tags: ["ENDPOINT_DISCOVERY"],
      override: true
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, middlewareConfig), exports2.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports2.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: true }), exports2.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports2.getEndpointDiscoveryRequiredPlugin = getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: false }), exports2.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports2.getEndpointDiscoveryOptionalPlugin = getEndpointDiscoveryOptionalPlugin;
  }
});

var require_Endpoint2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_iterator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/obliterator/iterator.js"(exports2, module2) {
    function Iterator(next) {
      Object.defineProperty(this, "_next", {
        writable: false,
        enumerable: false,
        value: next
      });
      this.done = false;
    }
    Iterator.prototype.next = function() {
      if (this.done)
        return { done: true };
      var step = this._next();
      if (step.done)
        this.done = true;
      return step;
    };
    if (typeof Symbol !== "undefined")
      Iterator.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function() {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function(value) {
      if (value instanceof Iterator)
        return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module2.exports = Iterator;
  }
});

var require_foreach = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/obliterator/foreach.js"(exports2, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
    var SYMBOL_SUPPORT = typeof Symbol !== "undefined";
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEach: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEach: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function(value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach;
  }
});

var require_typed_arrays = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/mnemonist/utils/typed-arrays.js"(exports2) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports2.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      return Float64Array;
    };
    exports2.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports2.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports2.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports2.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports2.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports2.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports2.indices = function(length) {
      var PointerArray = exports2.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

var require_iterables = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/mnemonist/utils/iterables.js"(exports2) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === "number")
        return target.length;
      if (typeof target.size === "number")
        return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === "number" ? new Array(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
      var array = typeof l === "number" ? new Array(l) : [];
      var indices = typeof l === "number" ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports2.isArrayLike = isArrayLike;
    exports2.guessLength = guessLength;
    exports2.toArray = toArray;
    exports2.toArrayWithIndices = toArrayWithIndices;
  }
});

var require_lru_cache = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/mnemonist/lru-cache.js"(exports2, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-cache: capacity should be positive number.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache.prototype.values = function() {
      var i = 0, l = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache.prototype.entries = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer], value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, "constructor", {
        value: LRUCache,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache.prototype.inspect;
    LRUCache.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  }
});

var require_EndpointCache = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointCache = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(key, endpoints.map(({ Address, CachePeriodInMinutes }) => ({
          Address,
          Expires: now + CachePeriodInMinutes * 60 * 1e3
        })));
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports2.EndpointCache = EndpointCache;
  }
});

var require_dist_cjs68 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Endpoint2(), exports2);
    tslib_1.__exportStar(require_EndpointCache(), exports2);
  }
});

var require_resolveEndpointDiscoveryConfig = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs68();
    var resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor }) => {
      var _a;
      return {
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache((_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3),
        endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0 ? () => Promise.resolve(input.endpointDiscoveryEnabled) : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0
      };
    };
    exports2.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  }
});

var require_dist_cjs69 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations4(), exports2);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports2);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports2);
  }
});

var require_DynamoDBServiceException = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DynamoDBServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var DynamoDBServiceException = class _DynamoDBServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _DynamoDBServiceException.prototype);
      }
    };
    exports2.DynamoDBServiceException = DynamoDBServiceException;
  }
});

var require_models_04 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InputCompressionType = exports2.ImportStatus = exports2.GlobalTableNotFoundException = exports2.ExportNotFoundException = exports2.S3SseAlgorithm = exports2.ExportStatus = exports2.ExportFormat = exports2.TransactionConflictException = exports2.ReturnValue = exports2.ResourceInUseException = exports2.TableStatus = exports2.IndexStatus = exports2.GlobalTableAlreadyExistsException = exports2.TableClass = exports2.ReplicaStatus = exports2.GlobalTableStatus = exports2.TableNotFoundException = exports2.TableInUseException = exports2.LimitExceededException = exports2.ContributorInsightsStatus = exports2.ContributorInsightsAction = exports2.ContinuousBackupsUnavailableException = exports2.PointInTimeRecoveryStatus = exports2.ContinuousBackupsStatus = exports2.ConditionalOperator = exports2.ComparisonOperator = exports2.ItemCollectionSizeLimitExceededException = exports2.ReturnItemCollectionMetrics = exports2.ResourceNotFoundException = exports2.ProvisionedThroughputExceededException = exports2.InvalidEndpointException = exports2.RequestLimitExceeded = exports2.InternalServerError = exports2.BatchStatementErrorCodeEnum = exports2.ReturnValuesOnConditionCheckFailure = exports2.ReturnConsumedCapacity = exports2.BackupTypeFilter = exports2.BackupNotFoundException = exports2.BackupInUseException = exports2.TimeToLiveStatus = exports2.StreamViewType = exports2.SSEStatus = exports2.SSEType = exports2.ProjectionType = exports2.KeyType = exports2.BillingMode = exports2.BackupType = exports2.BackupStatus = exports2.ScalarAttributeType = exports2.AttributeAction = void 0;
    exports2.TransactionCanceledException = exports2.ConditionalCheckFailedException = exports2.AttributeValue = exports2.IndexNotFoundException = exports2.ReplicaNotFoundException = exports2.ReplicaAlreadyExistsException = exports2.InvalidRestoreTimeException = exports2.TableAlreadyExistsException = exports2.Select = exports2.ImportConflictException = exports2.PointInTimeRecoveryUnavailableException = exports2.InvalidExportTimeException = exports2.ExportConflictException = exports2.TransactionInProgressException = exports2.IdempotentParameterMismatchException = exports2.DuplicateItemException = exports2.DestinationStatus = exports2.ImportNotFoundException = exports2.InputFormat = void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    exports2.AttributeAction = {
      ADD: "ADD",
      DELETE: "DELETE",
      PUT: "PUT"
    };
    exports2.ScalarAttributeType = {
      B: "B",
      N: "N",
      S: "S"
    };
    exports2.BackupStatus = {
      AVAILABLE: "AVAILABLE",
      CREATING: "CREATING",
      DELETED: "DELETED"
    };
    exports2.BackupType = {
      AWS_BACKUP: "AWS_BACKUP",
      SYSTEM: "SYSTEM",
      USER: "USER"
    };
    exports2.BillingMode = {
      PAY_PER_REQUEST: "PAY_PER_REQUEST",
      PROVISIONED: "PROVISIONED"
    };
    exports2.KeyType = {
      HASH: "HASH",
      RANGE: "RANGE"
    };
    exports2.ProjectionType = {
      ALL: "ALL",
      INCLUDE: "INCLUDE",
      KEYS_ONLY: "KEYS_ONLY"
    };
    exports2.SSEType = {
      AES256: "AES256",
      KMS: "KMS"
    };
    exports2.SSEStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING",
      UPDATING: "UPDATING"
    };
    exports2.StreamViewType = {
      KEYS_ONLY: "KEYS_ONLY",
      NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
      NEW_IMAGE: "NEW_IMAGE",
      OLD_IMAGE: "OLD_IMAGE"
    };
    exports2.TimeToLiveStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING"
    };
    var BackupInUseException = class _BackupInUseException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "BackupInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "BackupInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BackupInUseException.prototype);
      }
    };
    exports2.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class _BackupNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "BackupNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "BackupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BackupNotFoundException.prototype);
      }
    };
    exports2.BackupNotFoundException = BackupNotFoundException;
    exports2.BackupTypeFilter = {
      ALL: "ALL",
      AWS_BACKUP: "AWS_BACKUP",
      SYSTEM: "SYSTEM",
      USER: "USER"
    };
    exports2.ReturnConsumedCapacity = {
      INDEXES: "INDEXES",
      NONE: "NONE",
      TOTAL: "TOTAL"
    };
    exports2.ReturnValuesOnConditionCheckFailure = {
      ALL_OLD: "ALL_OLD",
      NONE: "NONE"
    };
    exports2.BatchStatementErrorCodeEnum = {
      AccessDenied: "AccessDenied",
      ConditionalCheckFailed: "ConditionalCheckFailed",
      DuplicateItem: "DuplicateItem",
      InternalServerError: "InternalServerError",
      ItemCollectionSizeLimitExceeded: "ItemCollectionSizeLimitExceeded",
      ProvisionedThroughputExceeded: "ProvisionedThroughputExceeded",
      RequestLimitExceeded: "RequestLimitExceeded",
      ResourceNotFound: "ResourceNotFound",
      ThrottlingError: "ThrottlingError",
      TransactionConflict: "TransactionConflict",
      ValidationError: "ValidationError"
    };
    var InternalServerError = class _InternalServerError extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerError.prototype);
      }
    };
    exports2.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class _RequestLimitExceeded extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "RequestLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "RequestLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RequestLimitExceeded.prototype);
      }
    };
    exports2.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class _InvalidEndpointException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InvalidEndpointException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports2.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class _ProvisionedThroughputExceededException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ProvisionedThroughputExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ProvisionedThroughputExceededException.prototype);
      }
    };
    exports2.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    exports2.ReturnItemCollectionMetrics = {
      NONE: "NONE",
      SIZE: "SIZE"
    };
    var ItemCollectionSizeLimitExceededException = class _ItemCollectionSizeLimitExceededException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ItemCollectionSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemCollectionSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ItemCollectionSizeLimitExceededException.prototype);
      }
    };
    exports2.ItemCollectionSizeLimitExceededException = ItemCollectionSizeLimitExceededException;
    exports2.ComparisonOperator = {
      BEGINS_WITH: "BEGINS_WITH",
      BETWEEN: "BETWEEN",
      CONTAINS: "CONTAINS",
      EQ: "EQ",
      GE: "GE",
      GT: "GT",
      IN: "IN",
      LE: "LE",
      LT: "LT",
      NE: "NE",
      NOT_CONTAINS: "NOT_CONTAINS",
      NOT_NULL: "NOT_NULL",
      NULL: "NULL"
    };
    exports2.ConditionalOperator = {
      AND: "AND",
      OR: "OR"
    };
    exports2.ContinuousBackupsStatus = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    exports2.PointInTimeRecoveryStatus = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    var ContinuousBackupsUnavailableException = class _ContinuousBackupsUnavailableException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ContinuousBackupsUnavailableException",
          $fault: "client",
          ...opts
        });
        this.name = "ContinuousBackupsUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ContinuousBackupsUnavailableException.prototype);
      }
    };
    exports2.ContinuousBackupsUnavailableException = ContinuousBackupsUnavailableException;
    exports2.ContributorInsightsAction = {
      DISABLE: "DISABLE",
      ENABLE: "ENABLE"
    };
    exports2.ContributorInsightsStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING",
      FAILED: "FAILED"
    };
    var LimitExceededException = class _LimitExceededException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _LimitExceededException.prototype);
      }
    };
    exports2.LimitExceededException = LimitExceededException;
    var TableInUseException = class _TableInUseException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TableInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TableInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TableInUseException.prototype);
      }
    };
    exports2.TableInUseException = TableInUseException;
    var TableNotFoundException = class _TableNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TableNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TableNotFoundException.prototype);
      }
    };
    exports2.TableNotFoundException = TableNotFoundException;
    exports2.GlobalTableStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      DELETING: "DELETING",
      UPDATING: "UPDATING"
    };
    exports2.ReplicaStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      CREATION_FAILED: "CREATION_FAILED",
      DELETING: "DELETING",
      INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
      REGION_DISABLED: "REGION_DISABLED",
      UPDATING: "UPDATING"
    };
    exports2.TableClass = {
      STANDARD: "STANDARD",
      STANDARD_INFREQUENT_ACCESS: "STANDARD_INFREQUENT_ACCESS"
    };
    var GlobalTableAlreadyExistsException = class _GlobalTableAlreadyExistsException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "GlobalTableAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "GlobalTableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GlobalTableAlreadyExistsException.prototype);
      }
    };
    exports2.GlobalTableAlreadyExistsException = GlobalTableAlreadyExistsException;
    exports2.IndexStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      DELETING: "DELETING",
      UPDATING: "UPDATING"
    };
    exports2.TableStatus = {
      ACTIVE: "ACTIVE",
      ARCHIVED: "ARCHIVED",
      ARCHIVING: "ARCHIVING",
      CREATING: "CREATING",
      DELETING: "DELETING",
      INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
      UPDATING: "UPDATING"
    };
    var ResourceInUseException = class _ResourceInUseException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceInUseException.prototype);
      }
    };
    exports2.ResourceInUseException = ResourceInUseException;
    exports2.ReturnValue = {
      ALL_NEW: "ALL_NEW",
      ALL_OLD: "ALL_OLD",
      NONE: "NONE",
      UPDATED_NEW: "UPDATED_NEW",
      UPDATED_OLD: "UPDATED_OLD"
    };
    var TransactionConflictException = class _TransactionConflictException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TransactionConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionConflictException.prototype);
      }
    };
    exports2.TransactionConflictException = TransactionConflictException;
    exports2.ExportFormat = {
      DYNAMODB_JSON: "DYNAMODB_JSON",
      ION: "ION"
    };
    exports2.ExportStatus = {
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    exports2.S3SseAlgorithm = {
      AES256: "AES256",
      KMS: "KMS"
    };
    var ExportNotFoundException = class _ExportNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ExportNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ExportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExportNotFoundException.prototype);
      }
    };
    exports2.ExportNotFoundException = ExportNotFoundException;
    var GlobalTableNotFoundException = class _GlobalTableNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "GlobalTableNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "GlobalTableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GlobalTableNotFoundException.prototype);
      }
    };
    exports2.GlobalTableNotFoundException = GlobalTableNotFoundException;
    exports2.ImportStatus = {
      CANCELLED: "CANCELLED",
      CANCELLING: "CANCELLING",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    exports2.InputCompressionType = {
      GZIP: "GZIP",
      NONE: "NONE",
      ZSTD: "ZSTD"
    };
    exports2.InputFormat = {
      CSV: "CSV",
      DYNAMODB_JSON: "DYNAMODB_JSON",
      ION: "ION"
    };
    var ImportNotFoundException = class _ImportNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ImportNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ImportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ImportNotFoundException.prototype);
      }
    };
    exports2.ImportNotFoundException = ImportNotFoundException;
    exports2.DestinationStatus = {
      ACTIVE: "ACTIVE",
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLE_FAILED: "ENABLE_FAILED",
      ENABLING: "ENABLING"
    };
    var DuplicateItemException = class _DuplicateItemException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "DuplicateItemException",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateItemException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateItemException.prototype);
      }
    };
    exports2.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class _IdempotentParameterMismatchException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
      }
    };
    exports2.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
    var TransactionInProgressException = class _TransactionInProgressException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TransactionInProgressException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports2.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class _ExportConflictException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ExportConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ExportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExportConflictException.prototype);
      }
    };
    exports2.ExportConflictException = ExportConflictException;
    var InvalidExportTimeException = class _InvalidExportTimeException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InvalidExportTimeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidExportTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidExportTimeException.prototype);
      }
    };
    exports2.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class _PointInTimeRecoveryUnavailableException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "PointInTimeRecoveryUnavailableException",
          $fault: "client",
          ...opts
        });
        this.name = "PointInTimeRecoveryUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PointInTimeRecoveryUnavailableException.prototype);
      }
    };
    exports2.PointInTimeRecoveryUnavailableException = PointInTimeRecoveryUnavailableException;
    var ImportConflictException = class _ImportConflictException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ImportConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ImportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ImportConflictException.prototype);
      }
    };
    exports2.ImportConflictException = ImportConflictException;
    exports2.Select = {
      ALL_ATTRIBUTES: "ALL_ATTRIBUTES",
      ALL_PROJECTED_ATTRIBUTES: "ALL_PROJECTED_ATTRIBUTES",
      COUNT: "COUNT",
      SPECIFIC_ATTRIBUTES: "SPECIFIC_ATTRIBUTES"
    };
    var TableAlreadyExistsException = class _TableAlreadyExistsException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TableAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "TableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TableAlreadyExistsException.prototype);
      }
    };
    exports2.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class _InvalidRestoreTimeException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InvalidRestoreTimeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRestoreTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRestoreTimeException.prototype);
      }
    };
    exports2.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var ReplicaAlreadyExistsException = class _ReplicaAlreadyExistsException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ReplicaAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicaAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicaAlreadyExistsException.prototype);
      }
    };
    exports2.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class _ReplicaNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ReplicaNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicaNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicaNotFoundException.prototype);
      }
    };
    exports2.ReplicaNotFoundException = ReplicaNotFoundException;
    var IndexNotFoundException = class _IndexNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "IndexNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "IndexNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IndexNotFoundException.prototype);
      }
    };
    exports2.IndexNotFoundException = IndexNotFoundException;
    var AttributeValue;
    (function(AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0)
          return visitor.S(value.S);
        if (value.N !== void 0)
          return visitor.N(value.N);
        if (value.B !== void 0)
          return visitor.B(value.B);
        if (value.SS !== void 0)
          return visitor.SS(value.SS);
        if (value.NS !== void 0)
          return visitor.NS(value.NS);
        if (value.BS !== void 0)
          return visitor.BS(value.BS);
        if (value.M !== void 0)
          return visitor.M(value.M);
        if (value.L !== void 0)
          return visitor.L(value.L);
        if (value.NULL !== void 0)
          return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0)
          return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AttributeValue = exports2.AttributeValue || (exports2.AttributeValue = {}));
    var ConditionalCheckFailedException = class _ConditionalCheckFailedException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ConditionalCheckFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "ConditionalCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConditionalCheckFailedException.prototype);
        this.Item = opts.Item;
      }
    };
    exports2.ConditionalCheckFailedException = ConditionalCheckFailedException;
    var TransactionCanceledException = class _TransactionCanceledException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TransactionCanceledException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionCanceledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports2.TransactionCanceledException = TransactionCanceledException;
  }
});

var require_Aws_json1_0 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.se_UpdateItemCommand = exports2.se_UpdateGlobalTableSettingsCommand = exports2.se_UpdateGlobalTableCommand = exports2.se_UpdateContributorInsightsCommand = exports2.se_UpdateContinuousBackupsCommand = exports2.se_UntagResourceCommand = exports2.se_TransactWriteItemsCommand = exports2.se_TransactGetItemsCommand = exports2.se_TagResourceCommand = exports2.se_ScanCommand = exports2.se_RestoreTableToPointInTimeCommand = exports2.se_RestoreTableFromBackupCommand = exports2.se_QueryCommand = exports2.se_PutItemCommand = exports2.se_ListTagsOfResourceCommand = exports2.se_ListTablesCommand = exports2.se_ListImportsCommand = exports2.se_ListGlobalTablesCommand = exports2.se_ListExportsCommand = exports2.se_ListContributorInsightsCommand = exports2.se_ListBackupsCommand = exports2.se_ImportTableCommand = exports2.se_GetItemCommand = exports2.se_ExportTableToPointInTimeCommand = exports2.se_ExecuteTransactionCommand = exports2.se_ExecuteStatementCommand = exports2.se_EnableKinesisStreamingDestinationCommand = exports2.se_DisableKinesisStreamingDestinationCommand = exports2.se_DescribeTimeToLiveCommand = exports2.se_DescribeTableReplicaAutoScalingCommand = exports2.se_DescribeTableCommand = exports2.se_DescribeLimitsCommand = exports2.se_DescribeKinesisStreamingDestinationCommand = exports2.se_DescribeImportCommand = exports2.se_DescribeGlobalTableSettingsCommand = exports2.se_DescribeGlobalTableCommand = exports2.se_DescribeExportCommand = exports2.se_DescribeEndpointsCommand = exports2.se_DescribeContributorInsightsCommand = exports2.se_DescribeContinuousBackupsCommand = exports2.se_DescribeBackupCommand = exports2.se_DeleteTableCommand = exports2.se_DeleteItemCommand = exports2.se_DeleteBackupCommand = exports2.se_CreateTableCommand = exports2.se_CreateGlobalTableCommand = exports2.se_CreateBackupCommand = exports2.se_BatchWriteItemCommand = exports2.se_BatchGetItemCommand = exports2.se_BatchExecuteStatementCommand = void 0;
    exports2.de_UpdateContributorInsightsCommand = exports2.de_UpdateContinuousBackupsCommand = exports2.de_UntagResourceCommand = exports2.de_TransactWriteItemsCommand = exports2.de_TransactGetItemsCommand = exports2.de_TagResourceCommand = exports2.de_ScanCommand = exports2.de_RestoreTableToPointInTimeCommand = exports2.de_RestoreTableFromBackupCommand = exports2.de_QueryCommand = exports2.de_PutItemCommand = exports2.de_ListTagsOfResourceCommand = exports2.de_ListTablesCommand = exports2.de_ListImportsCommand = exports2.de_ListGlobalTablesCommand = exports2.de_ListExportsCommand = exports2.de_ListContributorInsightsCommand = exports2.de_ListBackupsCommand = exports2.de_ImportTableCommand = exports2.de_GetItemCommand = exports2.de_ExportTableToPointInTimeCommand = exports2.de_ExecuteTransactionCommand = exports2.de_ExecuteStatementCommand = exports2.de_EnableKinesisStreamingDestinationCommand = exports2.de_DisableKinesisStreamingDestinationCommand = exports2.de_DescribeTimeToLiveCommand = exports2.de_DescribeTableReplicaAutoScalingCommand = exports2.de_DescribeTableCommand = exports2.de_DescribeLimitsCommand = exports2.de_DescribeKinesisStreamingDestinationCommand = exports2.de_DescribeImportCommand = exports2.de_DescribeGlobalTableSettingsCommand = exports2.de_DescribeGlobalTableCommand = exports2.de_DescribeExportCommand = exports2.de_DescribeEndpointsCommand = exports2.de_DescribeContributorInsightsCommand = exports2.de_DescribeContinuousBackupsCommand = exports2.de_DescribeBackupCommand = exports2.de_DeleteTableCommand = exports2.de_DeleteItemCommand = exports2.de_DeleteBackupCommand = exports2.de_CreateTableCommand = exports2.de_CreateGlobalTableCommand = exports2.de_CreateBackupCommand = exports2.de_BatchWriteItemCommand = exports2.de_BatchGetItemCommand = exports2.de_BatchExecuteStatementCommand = exports2.se_UpdateTimeToLiveCommand = exports2.se_UpdateTableReplicaAutoScalingCommand = exports2.se_UpdateTableCommand = void 0;
    exports2.de_UpdateTimeToLiveCommand = exports2.de_UpdateTableReplicaAutoScalingCommand = exports2.de_UpdateTableCommand = exports2.de_UpdateItemCommand = exports2.de_UpdateGlobalTableSettingsCommand = exports2.de_UpdateGlobalTableCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs39();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_04();
    var se_BatchExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders("BatchExecuteStatement");
      let body;
      body = JSON.stringify(se_BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_BatchExecuteStatementCommand = se_BatchExecuteStatementCommand;
    var se_BatchGetItemCommand = async (input, context) => {
      const headers = sharedHeaders("BatchGetItem");
      let body;
      body = JSON.stringify(se_BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_BatchGetItemCommand = se_BatchGetItemCommand;
    var se_BatchWriteItemCommand = async (input, context) => {
      const headers = sharedHeaders("BatchWriteItem");
      let body;
      body = JSON.stringify(se_BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_BatchWriteItemCommand = se_BatchWriteItemCommand;
    var se_CreateBackupCommand = async (input, context) => {
      const headers = sharedHeaders("CreateBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateBackupCommand = se_CreateBackupCommand;
    var se_CreateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders("CreateGlobalTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateGlobalTableCommand = se_CreateGlobalTableCommand;
    var se_CreateTableCommand = async (input, context) => {
      const headers = sharedHeaders("CreateTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateTableCommand = se_CreateTableCommand;
    var se_DeleteBackupCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteBackupCommand = se_DeleteBackupCommand;
    var se_DeleteItemCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteItem");
      let body;
      body = JSON.stringify(se_DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteItemCommand = se_DeleteItemCommand;
    var se_DeleteTableCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteTableCommand = se_DeleteTableCommand;
    var se_DescribeBackupCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeBackupCommand = se_DescribeBackupCommand;
    var se_DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeContinuousBackups");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeContinuousBackupsCommand = se_DescribeContinuousBackupsCommand;
    var se_DescribeContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeContributorInsights");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeContributorInsightsCommand = se_DescribeContributorInsightsCommand;
    var se_DescribeEndpointsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeEndpoints");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeEndpointsCommand = se_DescribeEndpointsCommand;
    var se_DescribeExportCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeExport");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeExportCommand = se_DescribeExportCommand;
    var se_DescribeGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeGlobalTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeGlobalTableCommand = se_DescribeGlobalTableCommand;
    var se_DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeGlobalTableSettings");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeGlobalTableSettingsCommand = se_DescribeGlobalTableSettingsCommand;
    var se_DescribeImportCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeImport");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeImportCommand = se_DescribeImportCommand;
    var se_DescribeKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeKinesisStreamingDestinationCommand = se_DescribeKinesisStreamingDestinationCommand;
    var se_DescribeLimitsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeLimits");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeLimitsCommand = se_DescribeLimitsCommand;
    var se_DescribeTableCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeTableCommand = se_DescribeTableCommand;
    var se_DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeTableReplicaAutoScaling");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeTableReplicaAutoScalingCommand = se_DescribeTableReplicaAutoScalingCommand;
    var se_DescribeTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeTimeToLive");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeTimeToLiveCommand = se_DescribeTimeToLiveCommand;
    var se_DisableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = sharedHeaders("DisableKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DisableKinesisStreamingDestinationCommand = se_DisableKinesisStreamingDestinationCommand;
    var se_EnableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = sharedHeaders("EnableKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_EnableKinesisStreamingDestinationCommand = se_EnableKinesisStreamingDestinationCommand;
    var se_ExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders("ExecuteStatement");
      let body;
      body = JSON.stringify(se_ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ExecuteStatementCommand = se_ExecuteStatementCommand;
    var se_ExecuteTransactionCommand = async (input, context) => {
      const headers = sharedHeaders("ExecuteTransaction");
      let body;
      body = JSON.stringify(se_ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ExecuteTransactionCommand = se_ExecuteTransactionCommand;
    var se_ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders("ExportTableToPointInTime");
      let body;
      body = JSON.stringify(se_ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ExportTableToPointInTimeCommand = se_ExportTableToPointInTimeCommand;
    var se_GetItemCommand = async (input, context) => {
      const headers = sharedHeaders("GetItem");
      let body;
      body = JSON.stringify(se_GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetItemCommand = se_GetItemCommand;
    var se_ImportTableCommand = async (input, context) => {
      const headers = sharedHeaders("ImportTable");
      let body;
      body = JSON.stringify(se_ImportTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ImportTableCommand = se_ImportTableCommand;
    var se_ListBackupsCommand = async (input, context) => {
      const headers = sharedHeaders("ListBackups");
      let body;
      body = JSON.stringify(se_ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListBackupsCommand = se_ListBackupsCommand;
    var se_ListContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders("ListContributorInsights");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListContributorInsightsCommand = se_ListContributorInsightsCommand;
    var se_ListExportsCommand = async (input, context) => {
      const headers = sharedHeaders("ListExports");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListExportsCommand = se_ListExportsCommand;
    var se_ListGlobalTablesCommand = async (input, context) => {
      const headers = sharedHeaders("ListGlobalTables");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListGlobalTablesCommand = se_ListGlobalTablesCommand;
    var se_ListImportsCommand = async (input, context) => {
      const headers = sharedHeaders("ListImports");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListImportsCommand = se_ListImportsCommand;
    var se_ListTablesCommand = async (input, context) => {
      const headers = sharedHeaders("ListTables");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListTablesCommand = se_ListTablesCommand;
    var se_ListTagsOfResourceCommand = async (input, context) => {
      const headers = sharedHeaders("ListTagsOfResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListTagsOfResourceCommand = se_ListTagsOfResourceCommand;
    var se_PutItemCommand = async (input, context) => {
      const headers = sharedHeaders("PutItem");
      let body;
      body = JSON.stringify(se_PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_PutItemCommand = se_PutItemCommand;
    var se_QueryCommand = async (input, context) => {
      const headers = sharedHeaders("Query");
      let body;
      body = JSON.stringify(se_QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_QueryCommand = se_QueryCommand;
    var se_RestoreTableFromBackupCommand = async (input, context) => {
      const headers = sharedHeaders("RestoreTableFromBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_RestoreTableFromBackupCommand = se_RestoreTableFromBackupCommand;
    var se_RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders("RestoreTableToPointInTime");
      let body;
      body = JSON.stringify(se_RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_RestoreTableToPointInTimeCommand = se_RestoreTableToPointInTimeCommand;
    var se_ScanCommand = async (input, context) => {
      const headers = sharedHeaders("Scan");
      let body;
      body = JSON.stringify(se_ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ScanCommand = se_ScanCommand;
    var se_TagResourceCommand = async (input, context) => {
      const headers = sharedHeaders("TagResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_TagResourceCommand = se_TagResourceCommand;
    var se_TransactGetItemsCommand = async (input, context) => {
      const headers = sharedHeaders("TransactGetItems");
      let body;
      body = JSON.stringify(se_TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_TransactGetItemsCommand = se_TransactGetItemsCommand;
    var se_TransactWriteItemsCommand = async (input, context) => {
      const headers = sharedHeaders("TransactWriteItems");
      let body;
      body = JSON.stringify(se_TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_TransactWriteItemsCommand = se_TransactWriteItemsCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const headers = sharedHeaders("UntagResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateContinuousBackups");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateContinuousBackupsCommand = se_UpdateContinuousBackupsCommand;
    var se_UpdateContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateContributorInsights");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateContributorInsightsCommand = se_UpdateContributorInsightsCommand;
    var se_UpdateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateGlobalTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateGlobalTableCommand = se_UpdateGlobalTableCommand;
    var se_UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateGlobalTableSettings");
      let body;
      body = JSON.stringify(se_UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateGlobalTableSettingsCommand = se_UpdateGlobalTableSettingsCommand;
    var se_UpdateItemCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateItem");
      let body;
      body = JSON.stringify(se_UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateItemCommand = se_UpdateItemCommand;
    var se_UpdateTableCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateTableCommand = se_UpdateTableCommand;
    var se_UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateTableReplicaAutoScaling");
      let body;
      body = JSON.stringify(se_UpdateTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateTableReplicaAutoScalingCommand = se_UpdateTableReplicaAutoScalingCommand;
    var se_UpdateTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateTimeToLive");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_UpdateTimeToLiveCommand = se_UpdateTimeToLiveCommand;
    var de_BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_BatchExecuteStatementCommand = de_BatchExecuteStatementCommand;
    var de_BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_BatchGetItemCommand = de_BatchGetItemCommand;
    var de_BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_BatchWriteItemCommand = de_BatchWriteItemCommand;
    var de_BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateBackupCommand = de_CreateBackupCommand;
    var de_CreateBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await de_ContinuousBackupsUnavailableExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateGlobalTableCommand = de_CreateGlobalTableCommand;
    var de_CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableAlreadyExistsException":
        case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
          throw await de_GlobalTableAlreadyExistsExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateTableCommand = de_CreateTableCommand;
    var de_CreateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteBackupCommand = de_DeleteBackupCommand;
    var de_DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteItemCommand = de_DeleteItemCommand;
    var de_DeleteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteTableCommand = de_DeleteTableCommand;
    var de_DeleteTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeBackupCommand = de_DescribeBackupCommand;
    var de_DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeContinuousBackupsCommand = de_DescribeContinuousBackupsCommand;
    var de_DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeContributorInsightsCommand = de_DescribeContributorInsightsCommand;
    var de_DescribeContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeEndpointsCommand = de_DescribeEndpointsCommand;
    var de_DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeExportCommand = de_DescribeExportCommand;
    var de_DescribeExportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportNotFoundException":
        case "com.amazonaws.dynamodb#ExportNotFoundException":
          throw await de_ExportNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeGlobalTableCommand = de_DescribeGlobalTableCommand;
    var de_DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeGlobalTableSettingsCommand = de_DescribeGlobalTableSettingsCommand;
    var de_DescribeGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeImportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeImportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeImportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeImportCommand = de_DescribeImportCommand;
    var de_DescribeImportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ImportNotFoundException":
        case "com.amazonaws.dynamodb#ImportNotFoundException":
          throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeKinesisStreamingDestinationCommand = de_DescribeKinesisStreamingDestinationCommand;
    var de_DescribeKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeLimitsCommand = de_DescribeLimitsCommand;
    var de_DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeTableCommand = de_DescribeTableCommand;
    var de_DescribeTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeTableReplicaAutoScalingCommand = de_DescribeTableReplicaAutoScalingCommand;
    var de_DescribeTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeTimeToLiveCommand = de_DescribeTimeToLiveCommand;
    var de_DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DisableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DisableKinesisStreamingDestinationCommand = de_DisableKinesisStreamingDestinationCommand;
    var de_DisableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_EnableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_EnableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_EnableKinesisStreamingDestinationCommand = de_EnableKinesisStreamingDestinationCommand;
    var de_EnableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ExecuteStatementCommand = de_ExecuteStatementCommand;
    var de_ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "DuplicateItemException":
        case "com.amazonaws.dynamodb#DuplicateItemException":
          throw await de_DuplicateItemExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ExecuteTransactionCommand = de_ExecuteTransactionCommand;
    var de_ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ExportTableToPointInTimeCommand = de_ExportTableToPointInTimeCommand;
    var de_ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportConflictException":
        case "com.amazonaws.dynamodb#ExportConflictException":
          throw await de_ExportConflictExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidExportTimeException":
        case "com.amazonaws.dynamodb#InvalidExportTimeException":
          throw await de_InvalidExportTimeExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetItemCommand = de_GetItemCommand;
    var de_GetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ImportTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ImportTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ImportTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ImportTableCommand = de_ImportTableCommand;
    var de_ImportTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ImportConflictException":
        case "com.amazonaws.dynamodb#ImportConflictException":
          throw await de_ImportConflictExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListBackupsCommand = de_ListBackupsCommand;
    var de_ListBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListContributorInsightsCommand = de_ListContributorInsightsCommand;
    var de_ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListExportsCommand = de_ListExportsCommand;
    var de_ListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListGlobalTablesCommand = de_ListGlobalTablesCommand;
    var de_ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListImportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListImportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListImportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListImportsCommand = de_ListImportsCommand;
    var de_ListImportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListTablesCommand = de_ListTablesCommand;
    var de_ListTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListTagsOfResourceCommand = de_ListTagsOfResourceCommand;
    var de_ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_PutItemCommand = de_PutItemCommand;
    var de_PutItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_QueryCommand = de_QueryCommand;
    var de_QueryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_RestoreTableFromBackupCommand = de_RestoreTableFromBackupCommand;
    var de_RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_RestoreTableToPointInTimeCommand = de_RestoreTableToPointInTimeCommand;
    var de_RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "InvalidRestoreTimeException":
        case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
          throw await de_InvalidRestoreTimeExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ScanCommand = de_ScanCommand;
    var de_ScanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports2.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_TransactGetItemsCommand = de_TransactGetItemsCommand;
    var de_TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_TransactWriteItemsCommand = de_TransactWriteItemsCommand;
    var de_TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports2.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateContinuousBackupsCommand = de_UpdateContinuousBackupsCommand;
    var de_UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await de_ContinuousBackupsUnavailableExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateContributorInsightsCommand = de_UpdateContributorInsightsCommand;
    var de_UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateGlobalTableCommand = de_UpdateGlobalTableCommand;
    var de_UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ReplicaAlreadyExistsException":
        case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
          throw await de_ReplicaAlreadyExistsExceptionRes(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateGlobalTableSettingsCommand = de_UpdateGlobalTableSettingsCommand;
    var de_UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "IndexNotFoundException":
        case "com.amazonaws.dynamodb#IndexNotFoundException":
          throw await de_IndexNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateItemCommand = de_UpdateItemCommand;
    var de_UpdateItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateTableCommand = de_UpdateTableCommand;
    var de_UpdateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateTableReplicaAutoScalingCommand = de_UpdateTableReplicaAutoScalingCommand;
    var de_UpdateTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_UpdateTimeToLiveCommand = de_UpdateTimeToLiveCommand;
    var de_UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BackupInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_BackupNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ConditionalCheckFailedExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ConditionalCheckFailedException(body, context);
      const exception = new models_0_1.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ContinuousBackupsUnavailableExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateItemExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IndexNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InternalServerErrorRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidEndpointExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidExportTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidRestoreTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ItemCollectionSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PointInTimeRecoveryUnavailableExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ProvisionedThroughputExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RequestLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionCanceledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionInProgressExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValueUpdate(value, context);
        return acc;
      }, {});
    };
    var se_AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: se_BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: se_ListAttributeValue(value, context) }),
        M: (value) => ({ M: se_MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: (0, smithy_client_1._json)(value) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: (0, smithy_client_1._json)(value) }),
        _: (name, value) => ({ name: value })
      });
    };
    var se_AttributeValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    };
    var se_AttributeValueUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Action: [],
        Value: (_) => se_AttributeValue(_, context)
      });
    };
    var se_AutoScalingPolicyUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        PolicyName: [],
        TargetTrackingScalingPolicyConfiguration: (_) => se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(_, context)
      });
    };
    var se_AutoScalingSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AutoScalingDisabled: [],
        AutoScalingRoleArn: [],
        MaximumUnits: [],
        MinimumUnits: [],
        ScalingPolicyUpdate: (_) => se_AutoScalingPolicyUpdate(_, context)
      });
    };
    var se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DisableScaleIn: [],
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: smithy_client_1.serializeFloat
      });
    };
    var se_BatchExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        Statements: (_) => se_PartiQLBatchRequest(_, context)
      });
    };
    var se_BatchGetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_) => se_BatchGetRequestMap(_, context),
        ReturnConsumedCapacity: []
      });
    };
    var se_BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var se_BatchStatementRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    };
    var se_BatchWriteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_) => se_BatchWriteItemRequestMap(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: []
      });
    };
    var se_BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var se_BinarySetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return context.base64Encoder(entry);
      });
    };
    var se_Condition = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_) => se_AttributeValueList(_, context),
        ComparisonOperator: []
      });
    };
    var se_ConditionCheck = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_Delete = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_DeleteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_DeleteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Key: (_) => se_Key(_, context)
      });
    };
    var se_ExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Limit: [],
        NextToken: [],
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnConsumedCapacity: [],
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    };
    var se_ExecuteTransactionInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        TransactStatements: (_) => se_ParameterizedStatements(_, context)
      });
    };
    var se_ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_ExpectedAttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ExpectedAttributeValue = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_) => se_AttributeValueList(_, context),
        ComparisonOperator: [],
        Exists: [],
        Value: (_) => se_AttributeValue(_, context)
      });
    };
    var se_ExportTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ExportFormat: [],
        ExportTime: (_) => Math.round(_.getTime() / 1e3),
        S3Bucket: [],
        S3BucketOwner: [],
        S3Prefix: [],
        S3SseAlgorithm: [],
        S3SseKmsKeyId: [],
        TableArn: []
      });
    };
    var se_ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_Get = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_) => se_Key(_, context),
        ProjectionExpression: [],
        TableName: []
      });
    };
    var se_GetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_) => se_Key(_, context),
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        TableName: []
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context)
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_GlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ProvisionedWriteCapacityUnits: []
      });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var se_ImportTableInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        InputCompressionType: [],
        InputFormat: [],
        InputFormatOptions: smithy_client_1._json,
        S3BucketSource: smithy_client_1._json,
        TableCreationParameters: smithy_client_1._json
      });
    };
    var se_Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_KeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_Key(entry, context);
      });
    };
    var se_KeysAndAttributes = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_) => se_KeyList(_, context),
        ProjectionExpression: []
      });
    };
    var se_ListAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    };
    var se_ListBackupsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BackupType: [],
        ExclusiveStartBackupArn: [],
        Limit: [],
        TableName: [],
        TimeRangeLowerBound: (_) => Math.round(_.getTime() / 1e3),
        TimeRangeUpperBound: (_) => Math.round(_.getTime() / 1e3)
      });
    };
    var se_MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ParameterizedStatement = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    };
    var se_ParameterizedStatements = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ParameterizedStatement(entry, context);
      });
    };
    var se_PartiQLBatchRequest = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_BatchStatementRequest(entry, context);
      });
    };
    var se_PreparedStatementParameters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    };
    var se_Put = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Item: (_) => se_PutItemInputAttributeMap(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_PutItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Item: (_) => se_PutItemInputAttributeMap(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_PutRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Item: (_) => se_PutItemInputAttributeMap(_, context)
      });
    };
    var se_QueryInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_) => se_Key(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        FilterExpression: [],
        IndexName: [],
        KeyConditionExpression: [],
        KeyConditions: (_) => se_KeyConditions(_, context),
        Limit: [],
        ProjectionExpression: [],
        QueryFilter: (_) => se_FilterConditionMap(_, context),
        ReturnConsumedCapacity: [],
        ScanIndexForward: [],
        Select: [],
        TableName: []
      });
    };
    var se_ReplicaAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexUpdates: (_) => se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context)
      });
    };
    var se_ReplicaAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaAutoScalingUpdate(entry, context);
      });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context)
      });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ProvisionedReadCapacityUnits: []
      });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var se_ReplicaSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexSettingsUpdate: (_) => se_ReplicaGlobalSecondaryIndexSettingsUpdateList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ReplicaProvisionedReadCapacityUnits: [],
        ReplicaTableClass: []
      });
    };
    var se_ReplicaSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaSettingsUpdate(entry, context);
      });
    };
    var se_RestoreTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BillingModeOverride: [],
        GlobalSecondaryIndexOverride: smithy_client_1._json,
        LocalSecondaryIndexOverride: smithy_client_1._json,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RestoreDateTime: (_) => Math.round(_.getTime() / 1e3),
        SSESpecificationOverride: smithy_client_1._json,
        SourceTableArn: [],
        SourceTableName: [],
        TargetTableName: [],
        UseLatestRestorableTime: []
      });
    };
    var se_ScanInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_) => se_Key(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        FilterExpression: [],
        IndexName: [],
        Limit: [],
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        ScanFilter: (_) => se_FilterConditionMap(_, context),
        Segment: [],
        Select: [],
        TableName: [],
        TotalSegments: []
      });
    };
    var se_TransactGetItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Get: (_) => se_Get(_, context)
      });
    };
    var se_TransactGetItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_TransactGetItem(entry, context);
      });
    };
    var se_TransactGetItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        TransactItems: (_) => se_TransactGetItemList(_, context)
      });
    };
    var se_TransactWriteItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionCheck: (_) => se_ConditionCheck(_, context),
        Delete: (_) => se_Delete(_, context),
        Put: (_) => se_Put(_, context),
        Update: (_) => se_Update(_, context)
      });
    };
    var se_TransactWriteItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_TransactWriteItem(entry, context);
      });
    };
    var se_TransactWriteItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        TransactItems: (_) => se_TransactWriteItemList(_, context)
      });
    };
    var se_Update = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: []
      });
    };
    var se_UpdateGlobalTableSettingsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalTableBillingMode: [],
        GlobalTableGlobalSecondaryIndexSettingsUpdate: (_) => se_GlobalTableGlobalSecondaryIndexSettingsUpdateList(_, context),
        GlobalTableName: [],
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        GlobalTableProvisionedWriteCapacityUnits: [],
        ReplicaSettingsUpdate: (_) => se_ReplicaSettingsUpdateList(_, context)
      });
    };
    var se_UpdateItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeUpdates: (_) => se_AttributeUpdates(_, context),
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: []
      });
    };
    var se_UpdateTableReplicaAutoScalingInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalSecondaryIndexUpdates: (_) => se_GlobalSecondaryIndexAutoScalingUpdateList(_, context),
        ProvisionedWriteCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ReplicaUpdates: (_) => se_ReplicaAutoScalingUpdateList(_, context),
        TableName: []
      });
    };
    var se_WriteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DeleteRequest: (_) => se_DeleteRequest(_, context),
        PutRequest: (_) => se_PutRequest(_, context)
      });
    };
    var se_WriteRequests = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_WriteRequest(entry, context);
      });
    };
    var de_ArchivalSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalBackupArn: smithy_client_1.expectString,
        ArchivalDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ArchivalReason: smithy_client_1.expectString
      });
    };
    var de_AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_AttributeValue = (output, context) => {
      if (output.B != null) {
        return {
          B: context.base64Decoder(output.B)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS != null) {
        return {
          BS: de_BinarySetAttributeValue(output.BS, context)
        };
      }
      if (output.L != null) {
        return {
          L: de_ListAttributeValue(output.L, context)
        };
      }
      if (output.M != null) {
        return {
          M: de_MapAttributeValue(output.M, context)
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS != null) {
        return {
          NS: (0, smithy_client_1._json)(output.NS)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS != null) {
        return {
          SS: (0, smithy_client_1._json)(output.SS)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_AutoScalingPolicyDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        PolicyName: smithy_client_1.expectString,
        TargetTrackingScalingPolicyConfiguration: (_) => de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(_, context)
      });
    };
    var de_AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AutoScalingPolicyDescription(entry, context);
      });
      return retVal;
    };
    var de_AutoScalingSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AutoScalingDisabled: smithy_client_1.expectBoolean,
        AutoScalingRoleArn: smithy_client_1.expectString,
        MaximumUnits: smithy_client_1.expectLong,
        MinimumUnits: smithy_client_1.expectLong,
        ScalingPolicies: (_) => de_AutoScalingPolicyDescriptionList(_, context)
      });
    };
    var de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DisableScaleIn: smithy_client_1.expectBoolean,
        ScaleInCooldown: smithy_client_1.expectInt32,
        ScaleOutCooldown: smithy_client_1.expectInt32,
        TargetValue: smithy_client_1.limitedParseDouble
      });
    };
    var de_BackupDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_) => de_BackupDetails(_, context),
        SourceTableDetails: (_) => de_SourceTableDetails(_, context),
        SourceTableFeatureDetails: (_) => de_SourceTableFeatureDetails(_, context)
      });
    };
    var de_BackupDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupExpiryDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString
      });
    };
    var de_BackupSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_BackupSummary(entry, context);
      });
      return retVal;
    };
    var de_BackupSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupExpiryDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString,
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString
      });
    };
    var de_BatchExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_PartiQLBatchResponse(_, context)
      });
    };
    var de_BatchGetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_BatchGetResponseMap(_, context),
        UnprocessedKeys: (_) => de_BatchGetRequestMap(_, context)
      });
    };
    var de_BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var de_BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemList(value, context);
        return acc;
      }, {});
    };
    var de_BatchStatementError = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        Item: (_) => de_AttributeMap(_, context),
        Message: smithy_client_1.expectString
      });
    };
    var de_BatchStatementResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Error: (_) => de_BatchStatementError(_, context),
        Item: (_) => de_AttributeMap(_, context),
        TableName: smithy_client_1.expectString
      });
    };
    var de_BatchWriteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetricsPerTable(_, context),
        UnprocessedItems: (_) => de_BatchWriteItemRequestMap(_, context)
      });
    };
    var de_BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var de_BillingModeSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        LastUpdateToPayPerRequestDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
    };
    var de_BinarySetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return context.base64Decoder(entry);
      });
      return retVal;
    };
    var de_CancellationReason = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        Item: (_) => de_AttributeMap(_, context),
        Message: smithy_client_1.expectString
      });
    };
    var de_CancellationReasonList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CancellationReason(entry, context);
      });
      return retVal;
    };
    var de_Capacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble
      });
    };
    var de_ConditionalCheckFailedException = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_) => de_AttributeMap(_, context),
        message: smithy_client_1.expectString
      });
    };
    var de_ConsumedCapacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        GlobalSecondaryIndexes: (_) => de_SecondaryIndexesCapacityMap(_, context),
        LocalSecondaryIndexes: (_) => de_SecondaryIndexesCapacityMap(_, context),
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        Table: (_) => de_Capacity(_, context),
        TableName: smithy_client_1.expectString,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble
      });
    };
    var de_ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ConsumedCapacity(entry, context);
      });
      return retVal;
    };
    var de_ContinuousBackupsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsStatus: smithy_client_1.expectString,
        PointInTimeRecoveryDescription: (_) => de_PointInTimeRecoveryDescription(_, context)
      });
    };
    var de_CreateBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_) => de_BackupDetails(_, context)
      });
    };
    var de_CreateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context)
      });
    };
    var de_CreateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_DeleteBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_) => de_BackupDescription(_, context)
      });
    };
    var de_DeleteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context)
      });
    };
    var de_DeleteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Key: (_) => de_Key(_, context)
      });
    };
    var de_DeleteTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_DescribeBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_) => de_BackupDescription(_, context)
      });
    };
    var de_DescribeContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_) => de_ContinuousBackupsDescription(_, context)
      });
    };
    var de_DescribeContributorInsightsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContributorInsightsRuleList: smithy_client_1._json,
        ContributorInsightsStatus: smithy_client_1.expectString,
        FailureException: smithy_client_1._json,
        IndexName: smithy_client_1.expectString,
        LastUpdateDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableName: smithy_client_1.expectString
      });
    };
    var de_DescribeExportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_) => de_ExportDescription(_, context)
      });
    };
    var de_DescribeGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context)
      });
    };
    var de_DescribeGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_) => de_ReplicaSettingsDescriptionList(_, context)
      });
    };
    var de_DescribeImportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_) => de_ImportTableDescription(_, context)
      });
    };
    var de_DescribeTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Table: (_) => de_TableDescription(_, context)
      });
    };
    var de_DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_) => de_TableAutoScalingDescription(_, context)
      });
    };
    var de_ExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ExecuteTransactionOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_ItemResponseList(_, context)
      });
    };
    var de_ExportDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BilledSizeBytes: smithy_client_1.expectLong,
        ClientToken: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExportArn: smithy_client_1.expectString,
        ExportFormat: smithy_client_1.expectString,
        ExportManifest: smithy_client_1.expectString,
        ExportStatus: smithy_client_1.expectString,
        ExportTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        S3Bucket: smithy_client_1.expectString,
        S3BucketOwner: smithy_client_1.expectString,
        S3Prefix: smithy_client_1.expectString,
        S3SseAlgorithm: smithy_client_1.expectString,
        S3SseKmsKeyId: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString
      });
    };
    var de_ExportTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_) => de_ExportDescription(_, context)
      });
    };
    var de_GetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Item: (_) => de_AttributeMap(_, context)
      });
    };
    var de_GlobalSecondaryIndexDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Backfilling: smithy_client_1.expectBoolean,
        IndexArn: smithy_client_1.expectString,
        IndexName: smithy_client_1.expectString,
        IndexSizeBytes: smithy_client_1.expectLong,
        IndexStatus: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        Projection: smithy_client_1._json,
        ProvisionedThroughput: (_) => de_ProvisionedThroughputDescription(_, context)
      });
    };
    var de_GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_GlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var de_GlobalTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        GlobalTableArn: smithy_client_1.expectString,
        GlobalTableName: smithy_client_1.expectString,
        GlobalTableStatus: smithy_client_1.expectString,
        ReplicationGroup: (_) => de_ReplicaDescriptionList(_, context)
      });
    };
    var de_ImportSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableArn: smithy_client_1.expectString
      });
    };
    var de_ImportSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ImportSummary(entry, context);
      });
      return retVal;
    };
    var de_ImportTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ClientToken: smithy_client_1.expectString,
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorCount: smithy_client_1.expectLong,
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        ImportedItemCount: smithy_client_1.expectLong,
        InputCompressionType: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        InputFormatOptions: smithy_client_1._json,
        ProcessedItemCount: smithy_client_1.expectLong,
        ProcessedSizeBytes: smithy_client_1.expectLong,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableArn: smithy_client_1.expectString,
        TableCreationParameters: smithy_client_1._json,
        TableId: smithy_client_1.expectString
      });
    };
    var de_ImportTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_) => de_ImportTableDescription(_, context)
      });
    };
    var de_ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_ItemCollectionMetrics = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ItemCollectionKey: (_) => de_ItemCollectionKeyAttributeMap(_, context),
        SizeEstimateRangeGB: (_) => de_ItemCollectionSizeEstimateRange(_, context)
      });
    };
    var de_ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ItemCollectionMetrics(entry, context);
      });
      return retVal;
    };
    var de_ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemCollectionMetricsMultiple(value, context);
        return acc;
      }, {});
    };
    var de_ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.limitedParseDouble)(entry);
      });
      return retVal;
    };
    var de_ItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AttributeMap(entry, context);
      });
      return retVal;
    };
    var de_ItemResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_) => de_AttributeMap(_, context)
      });
    };
    var de_ItemResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ItemResponse(entry, context);
      });
      return retVal;
    };
    var de_Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_KeyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Key(entry, context);
      });
      return retVal;
    };
    var de_KeysAndAttributes = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: smithy_client_1.expectBoolean,
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_) => de_KeyList(_, context),
        ProjectionExpression: smithy_client_1.expectString
      });
    };
    var de_ListAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AttributeValue((0, smithy_client_1.expectUnion)(entry), context);
      });
      return retVal;
    };
    var de_ListBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupSummaries: (_) => de_BackupSummaries(_, context),
        LastEvaluatedBackupArn: smithy_client_1.expectString
      });
    };
    var de_ListImportsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportSummaryList: (_) => de_ImportSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_PartiQLBatchResponse = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_BatchStatementResponse(entry, context);
      });
      return retVal;
    };
    var de_PointInTimeRecoveryDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EarliestRestorableDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LatestRestorableDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PointInTimeRecoveryStatus: smithy_client_1.expectString
      });
    };
    var de_ProvisionedThroughputDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastDecreaseDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastIncreaseDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NumberOfDecreasesToday: smithy_client_1.expectLong,
        ReadCapacityUnits: smithy_client_1.expectLong,
        WriteCapacityUnits: smithy_client_1.expectLong
      });
    };
    var de_PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_PutItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context)
      });
    };
    var de_PutRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_) => de_PutItemInputAttributeMap(_, context)
      });
    };
    var de_QueryOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Count: smithy_client_1.expectInt32,
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        ScannedCount: smithy_client_1.expectInt32
      });
    };
    var de_ReplicaAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: (_) => de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(_, context),
        RegionName: smithy_client_1.expectString,
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaStatus: smithy_client_1.expectString
      });
    };
    var de_ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        KMSMasterKeyId: smithy_client_1.expectString,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RegionName: smithy_client_1.expectString,
        ReplicaInaccessibleDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaStatusDescription: smithy_client_1.expectString,
        ReplicaStatusPercentProgress: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_) => de_TableClassSummary(_, context)
      });
    };
    var de_ReplicaDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context)
      });
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedWriteCapacityUnits: smithy_client_1.expectLong
      });
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RegionName: smithy_client_1.expectString,
        ReplicaBillingModeSummary: (_) => de_BillingModeSummary(_, context),
        ReplicaGlobalSecondaryIndexSettings: (_) => de_ReplicaGlobalSecondaryIndexSettingsDescriptionList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedWriteCapacityUnits: smithy_client_1.expectLong,
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_) => de_TableClassSummary(_, context)
      });
    };
    var de_ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaSettingsDescription(entry, context);
      });
      return retVal;
    };
    var de_RestoreSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RestoreDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        RestoreInProgress: smithy_client_1.expectBoolean,
        SourceBackupArn: smithy_client_1.expectString,
        SourceTableArn: smithy_client_1.expectString
      });
    };
    var de_RestoreTableFromBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_RestoreTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_ScanOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Count: smithy_client_1.expectInt32,
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        ScannedCount: smithy_client_1.expectInt32
      });
    };
    var de_SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_Capacity(value, context);
        return acc;
      }, {});
    };
    var de_SourceTableDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        ProvisionedThroughput: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong
      });
    };
    var de_SourceTableFeatureDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        LocalSecondaryIndexes: smithy_client_1._json,
        SSEDescription: (_) => de_SSEDescription(_, context),
        StreamDescription: smithy_client_1._json,
        TimeToLiveDescription: smithy_client_1._json
      });
    };
    var de_SSEDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InaccessibleEncryptionDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        KMSMasterKeyArn: smithy_client_1.expectString,
        SSEType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
      });
    };
    var de_TableAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Replicas: (_) => de_ReplicaAutoScalingDescriptionList(_, context),
        TableName: smithy_client_1.expectString,
        TableStatus: smithy_client_1.expectString
      });
    };
    var de_TableClassSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastUpdateDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableClass: smithy_client_1.expectString
      });
    };
    var de_TableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalSummary: (_) => de_ArchivalSummary(_, context),
        AttributeDefinitions: smithy_client_1._json,
        BillingModeSummary: (_) => de_BillingModeSummary(_, context),
        CreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DeletionProtectionEnabled: smithy_client_1.expectBoolean,
        GlobalSecondaryIndexes: (_) => de_GlobalSecondaryIndexDescriptionList(_, context),
        GlobalTableVersion: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        LatestStreamArn: smithy_client_1.expectString,
        LatestStreamLabel: smithy_client_1.expectString,
        LocalSecondaryIndexes: smithy_client_1._json,
        ProvisionedThroughput: (_) => de_ProvisionedThroughputDescription(_, context),
        Replicas: (_) => de_ReplicaDescriptionList(_, context),
        RestoreSummary: (_) => de_RestoreSummary(_, context),
        SSEDescription: (_) => de_SSEDescription(_, context),
        StreamSpecification: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableClassSummary: (_) => de_TableClassSummary(_, context),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong,
        TableStatus: smithy_client_1.expectString
      });
    };
    var de_TransactGetItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_ItemResponseList(_, context)
      });
    };
    var de_TransactionCanceledException = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CancellationReasons: (_) => de_CancellationReasonList(_, context),
        Message: smithy_client_1.expectString
      });
    };
    var de_TransactWriteItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetricsPerTable(_, context)
      });
    };
    var de_UpdateContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_) => de_ContinuousBackupsDescription(_, context)
      });
    };
    var de_UpdateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context)
      });
    };
    var de_UpdateGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_) => de_ReplicaSettingsDescriptionList(_, context)
      });
    };
    var de_UpdateItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context)
      });
    };
    var de_UpdateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_) => de_TableAutoScalingDescription(_, context)
      });
    };
    var de_WriteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DeleteRequest: (_) => de_DeleteRequest(_, context),
        PutRequest: (_) => de_PutRequest(_, context)
      });
    };
    var de_WriteRequests = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_WriteRequest(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(DynamoDBServiceException_1.DynamoDBServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    function sharedHeaders(operation) {
      return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `DynamoDB_20120810.${operation}`
      };
    }
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

var require_DescribeEndpointsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeEndpointsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class _DescribeEndpointsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeEndpointsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeEndpointsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeEndpointsCommand)(output, context);
      }
    };
    exports2.DescribeEndpointsCommand = DescribeEndpointsCommand;
  }
});

var require_EndpointParameters4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "dynamodb"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-dynamodb",
      description: "AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo dynamodb"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.405.0",
        "@aws-sdk/credential-provider-node": "3.405.0",
        "@aws-sdk/middleware-endpoint-discovery": "3.405.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-signing": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        "@smithy/util-waiter": "^2.0.5",
        tslib: "^2.5.0",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-dynamodb"
      }
    };
  }
});

var require_ruleset4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = "getAttr";
    var g = "stringEquals";
    var h = { [u]: false, "type": "String" };
    var i = { [u]: true, "default": false, "type": "Boolean" };
    var j = { [x]: "Endpoint" };
    var k = { [v]: "booleanEquals", [w]: [{ [x]: "UseFIPS" }, true] };
    var l = { [v]: "booleanEquals", [w]: [{ [x]: "UseDualStack" }, true] };
    var m = {};
    var n = { [x]: "Region" };
    var o = { [v]: "booleanEquals", [w]: [true, { [v]: f, [w]: [{ [x]: e }, "supportsFIPS"] }] };
    var p = { [x]: e };
    var q = { [v]: "booleanEquals", [w]: [true, { [v]: f, [w]: [p, "supportsDualStack"] }] };
    var r = [k];
    var s = [l];
    var t = [n];
    var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [v]: a, [w]: [j] }], type: b, rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: j, properties: m, headers: m }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [v]: a, [w]: t }], type: b, rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: e }], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ conditions: [o, q], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: r, type: b, rules: [{ conditions: [o], type: b, rules: [{ type: b, rules: [{ conditions: [{ [v]: g, [w]: ["aws-us-gov", { [v]: f, [w]: [p, "name"] }] }], endpoint: { url: "https://dynamodb.{Region}.amazonaws.com", properties: m, headers: m }, type: d }, { endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: s, type: b, rules: [{ conditions: [q], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ conditions: [{ [v]: g, [w]: [n, "local"] }], endpoint: { url: "http://localhost:8000", properties: { authSchemes: [{ name: "sigv4", signingName: "dynamodb", signingRegion: "us-east-1" }] }, headers: m }, type: d }, { endpoint: { url: "https://dynamodb.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs28();
    var util_base64_1 = require_dist_cjs35();
    var util_utf8_1 = require_dist_cjs16();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2012-08-10",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      extensions: (config == null ? void 0 : config.extensions) ?? [],
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "DynamoDB",
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var client_sts_1 = require_dist_cjs56();
    var credential_provider_node_1 = require_dist_cjs55();
    var middleware_endpoint_discovery_1 = require_dist_cjs69();
    var util_user_agent_node_1 = require_dist_cjs46();
    var config_resolver_1 = require_dist_cjs24();
    var hash_node_1 = require_dist_cjs47();
    var middleware_retry_1 = require_dist_cjs33();
    var node_config_provider_1 = require_dist_cjs43();
    var node_http_handler_1 = require_dist_cjs37();
    var util_body_length_node_1 = require_dist_cjs48();
    var util_retry_1 = require_dist_cjs32();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs39();
    var util_defaults_mode_node_1 = require_dist_cjs49();
    var smithy_client_2 = require_dist_cjs39();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        endpointDiscoveryEnabledProvider: (config == null ? void 0 : config.endpointDiscoveryEnabledProvider) ?? (0, node_config_provider_1.loadConfig)(middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS),
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_DynamoDBClient = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DynamoDBClient = exports2.__Client = void 0;
    var middleware_endpoint_discovery_1 = require_dist_cjs69();
    var middleware_host_header_1 = require_dist_cjs4();
    var middleware_logger_1 = require_dist_cjs5();
    var middleware_recursion_detection_1 = require_dist_cjs6();
    var middleware_signing_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs22();
    var config_resolver_1 = require_dist_cjs24();
    var middleware_content_length_1 = require_dist_cjs26();
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs33();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig4();
    var runtimeExtensions_1 = require_runtimeExtensions4();
    var DynamoDBClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(_config_7, {
          endpointDiscoveryCommandCtor: DescribeEndpointsCommand_1.DescribeEndpointsCommand
        });
        const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_9);
        this.config = _config_9;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.DynamoDBClient = DynamoDBClient;
  }
});

var require_BatchExecuteStatementCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchExecuteStatementCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class _BatchExecuteStatementCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchExecuteStatementCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchExecuteStatementCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchExecuteStatementCommand)(output, context);
      }
    };
    exports2.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  }
});

var require_BatchGetItemCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetItemCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class _BatchGetItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchGetItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchGetItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchGetItemCommand)(output, context);
      }
    };
    exports2.BatchGetItemCommand = BatchGetItemCommand;
  }
});

var require_BatchWriteItemCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchWriteItemCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class _BatchWriteItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchWriteItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchWriteItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchWriteItemCommand)(output, context);
      }
    };
    exports2.BatchWriteItemCommand = BatchWriteItemCommand;
  }
});

var require_CreateBackupCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateBackupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class _CreateBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateBackupCommand)(output, context);
      }
    };
    exports2.CreateBackupCommand = CreateBackupCommand;
  }
});

var require_CreateGlobalTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateGlobalTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class _CreateGlobalTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateGlobalTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateGlobalTableCommand)(output, context);
      }
    };
    exports2.CreateGlobalTableCommand = CreateGlobalTableCommand;
  }
});

var require_CreateTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class _CreateTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateTableCommand)(output, context);
      }
    };
    exports2.CreateTableCommand = CreateTableCommand;
  }
});

var require_DeleteBackupCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBackupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class _DeleteBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteBackupCommand)(output, context);
      }
    };
    exports2.DeleteBackupCommand = DeleteBackupCommand;
  }
});

var require_DeleteItemCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteItemCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class _DeleteItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteItemCommand)(output, context);
      }
    };
    exports2.DeleteItemCommand = DeleteItemCommand;
  }
});

var require_DeleteTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class _DeleteTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteTableCommand)(output, context);
      }
    };
    exports2.DeleteTableCommand = DeleteTableCommand;
  }
});

var require_DescribeBackupCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeBackupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class _DescribeBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeBackupCommand)(output, context);
      }
    };
    exports2.DescribeBackupCommand = DescribeBackupCommand;
  }
});

var require_DescribeContinuousBackupsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeContinuousBackupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class _DescribeContinuousBackupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeContinuousBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContinuousBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContinuousBackupsCommand)(output, context);
      }
    };
    exports2.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  }
});

var require_DescribeContributorInsightsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeContributorInsightsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class _DescribeContributorInsightsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContributorInsightsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContributorInsightsCommand)(output, context);
      }
    };
    exports2.DescribeContributorInsightsCommand = DescribeContributorInsightsCommand;
  }
});

var require_DescribeExportCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeExportCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class _DescribeExportCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeExportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeExportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeExportCommand)(output, context);
      }
    };
    exports2.DescribeExportCommand = DescribeExportCommand;
  }
});

var require_DescribeGlobalTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeGlobalTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class _DescribeGlobalTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableCommand)(output, context);
      }
    };
    exports2.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  }
});

var require_DescribeGlobalTableSettingsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeGlobalTableSettingsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class _DescribeGlobalTableSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeGlobalTableSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableSettingsCommand)(output, context);
      }
    };
    exports2.DescribeGlobalTableSettingsCommand = DescribeGlobalTableSettingsCommand;
  }
});

var require_DescribeImportCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeImportCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeImportCommand = class _DescribeImportCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeImportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeImportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeImportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeImportCommand)(output, context);
      }
    };
    exports2.DescribeImportCommand = DescribeImportCommand;
  }
});

var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeKinesisStreamingDestinationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class _DescribeKinesisStreamingDestinationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports2.DescribeKinesisStreamingDestinationCommand = DescribeKinesisStreamingDestinationCommand;
  }
});

var require_DescribeLimitsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeLimitsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class _DescribeLimitsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeLimitsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeLimitsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeLimitsCommand)(output, context);
      }
    };
    exports2.DescribeLimitsCommand = DescribeLimitsCommand;
  }
});

var require_DescribeTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class _DescribeTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableCommand)(output, context);
      }
    };
    exports2.DescribeTableCommand = DescribeTableCommand;
  }
});

var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeTableReplicaAutoScalingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class _DescribeTableReplicaAutoScalingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTableReplicaAutoScalingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports2.DescribeTableReplicaAutoScalingCommand = DescribeTableReplicaAutoScalingCommand;
  }
});

var require_DescribeTimeToLiveCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeTimeToLiveCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class _DescribeTimeToLiveCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTimeToLiveCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTimeToLiveCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports2.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  }
});

var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DisableKinesisStreamingDestinationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class _DisableKinesisStreamingDestinationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DisableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DisableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DisableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports2.DisableKinesisStreamingDestinationCommand = DisableKinesisStreamingDestinationCommand;
  }
});

var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnableKinesisStreamingDestinationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class _EnableKinesisStreamingDestinationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _EnableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "EnableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_EnableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_EnableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports2.EnableKinesisStreamingDestinationCommand = EnableKinesisStreamingDestinationCommand;
  }
});

var require_ExecuteStatementCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExecuteStatementCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class _ExecuteStatementCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExecuteStatementCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteStatementCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteStatementCommand)(output, context);
      }
    };
    exports2.ExecuteStatementCommand = ExecuteStatementCommand;
  }
});

var require_ExecuteTransactionCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExecuteTransactionCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class _ExecuteTransactionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExecuteTransactionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteTransactionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteTransactionCommand)(output, context);
      }
    };
    exports2.ExecuteTransactionCommand = ExecuteTransactionCommand;
  }
});

var require_ExportTableToPointInTimeCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExportTableToPointInTimeCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class _ExportTableToPointInTimeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExportTableToPointInTimeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExportTableToPointInTimeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExportTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExportTableToPointInTimeCommand)(output, context);
      }
    };
    exports2.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  }
});

var require_GetItemCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetItemCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class _GetItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "GetItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_GetItemCommand)(output, context);
      }
    };
    exports2.GetItemCommand = GetItemCommand;
  }
});

var require_ImportTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ImportTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ImportTableCommand = class _ImportTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ImportTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ImportTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ImportTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ImportTableCommand)(output, context);
      }
    };
    exports2.ImportTableCommand = ImportTableCommand;
  }
});

var require_ListBackupsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBackupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class _ListBackupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListBackupsCommand)(output, context);
      }
    };
    exports2.ListBackupsCommand = ListBackupsCommand;
  }
});

var require_ListContributorInsightsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListContributorInsightsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class _ListContributorInsightsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListContributorInsightsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListContributorInsightsCommand)(output, context);
      }
    };
    exports2.ListContributorInsightsCommand = ListContributorInsightsCommand;
  }
});

var require_ListExportsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListExportsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class _ListExportsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListExportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListExportsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListExportsCommand)(output, context);
      }
    };
    exports2.ListExportsCommand = ListExportsCommand;
  }
});

var require_ListGlobalTablesCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListGlobalTablesCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class _ListGlobalTablesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListGlobalTablesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListGlobalTablesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListGlobalTablesCommand)(output, context);
      }
    };
    exports2.ListGlobalTablesCommand = ListGlobalTablesCommand;
  }
});

var require_ListImportsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListImportsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListImportsCommand = class _ListImportsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListImportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListImportsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListImportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListImportsCommand)(output, context);
      }
    };
    exports2.ListImportsCommand = ListImportsCommand;
  }
});

var require_ListTablesCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTablesCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class _ListTablesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTablesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTablesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTablesCommand)(output, context);
      }
    };
    exports2.ListTablesCommand = ListTablesCommand;
  }
});

var require_ListTagsOfResourceCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTagsOfResourceCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class _ListTagsOfResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsOfResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTagsOfResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTagsOfResourceCommand)(output, context);
      }
    };
    exports2.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  }
});

var require_PutItemCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutItemCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand = class _PutItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "PutItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_PutItemCommand)(output, context);
      }
    };
    exports2.PutItemCommand = PutItemCommand;
  }
});

var require_QueryCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueryCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand = class _QueryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _QueryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "QueryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_QueryCommand)(output, context);
      }
    };
    exports2.QueryCommand = QueryCommand;
  }
});

var require_RestoreTableFromBackupCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RestoreTableFromBackupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class _RestoreTableFromBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RestoreTableFromBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableFromBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableFromBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableFromBackupCommand)(output, context);
      }
    };
    exports2.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  }
});

var require_RestoreTableToPointInTimeCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RestoreTableToPointInTimeCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class _RestoreTableToPointInTimeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RestoreTableToPointInTimeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableToPointInTimeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableToPointInTimeCommand)(output, context);
      }
    };
    exports2.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  }
});

var require_ScanCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScanCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand = class _ScanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ScanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ScanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ScanCommand)(output, context);
      }
    };
    exports2.ScanCommand = ScanCommand;
  }
});

var require_TagResourceCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagResourceCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class _TagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TagResourceCommand)(output, context);
      }
    };
    exports2.TagResourceCommand = TagResourceCommand;
  }
});

var require_TransactGetItemsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransactGetItemsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class _TransactGetItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TransactGetItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactGetItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactGetItemsCommand)(output, context);
      }
    };
    exports2.TransactGetItemsCommand = TransactGetItemsCommand;
  }
});

var require_TransactWriteItemsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransactWriteItemsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class _TransactWriteItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TransactWriteItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactWriteItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactWriteItemsCommand)(output, context);
      }
    };
    exports2.TransactWriteItemsCommand = TransactWriteItemsCommand;
  }
});

var require_UntagResourceCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UntagResourceCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class _UntagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports2.UntagResourceCommand = UntagResourceCommand;
  }
});

var require_UpdateContinuousBackupsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateContinuousBackupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class _UpdateContinuousBackupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateContinuousBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContinuousBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContinuousBackupsCommand)(output, context);
      }
    };
    exports2.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  }
});

var require_UpdateContributorInsightsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateContributorInsightsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class _UpdateContributorInsightsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContributorInsightsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContributorInsightsCommand)(output, context);
      }
    };
    exports2.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  }
});

var require_UpdateGlobalTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateGlobalTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class _UpdateGlobalTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableCommand)(output, context);
      }
    };
    exports2.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  }
});

var require_UpdateGlobalTableSettingsCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateGlobalTableSettingsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class _UpdateGlobalTableSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateGlobalTableSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableSettingsCommand)(output, context);
      }
    };
    exports2.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  }
});

var require_UpdateItemCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateItemCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class _UpdateItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateItemCommand)(output, context);
      }
    };
    exports2.UpdateItemCommand = UpdateItemCommand;
  }
});

var require_UpdateTableCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateTableCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class _UpdateTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableCommand)(output, context);
      }
    };
    exports2.UpdateTableCommand = UpdateTableCommand;
  }
});

var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateTableReplicaAutoScalingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class _UpdateTableReplicaAutoScalingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTableReplicaAutoScalingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports2.UpdateTableReplicaAutoScalingCommand = UpdateTableReplicaAutoScalingCommand;
  }
});

var require_UpdateTimeToLiveCommand = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateTimeToLiveCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs30();
    var middleware_serde_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs39();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class _UpdateTimeToLiveCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTimeToLiveCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTimeToLiveCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports2.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  }
});

var require_DynamoDB = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DynamoDB = void 0;
    var smithy_client_1 = require_dist_cjs39();
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 = require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 = require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 = require_DescribeGlobalTableSettingsCommand();
    var DescribeImportCommand_1 = require_DescribeImportCommand();
    var DescribeKinesisStreamingDestinationCommand_1 = require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 = require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 = require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 = require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 = require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ImportTableCommand_1 = require_ImportTableCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListImportsCommand_1 = require_ListImportsCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 = require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 = require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 = require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 = require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 = require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 = require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var commands = {
      BatchExecuteStatementCommand: BatchExecuteStatementCommand_1.BatchExecuteStatementCommand,
      BatchGetItemCommand: BatchGetItemCommand_1.BatchGetItemCommand,
      BatchWriteItemCommand: BatchWriteItemCommand_1.BatchWriteItemCommand,
      CreateBackupCommand: CreateBackupCommand_1.CreateBackupCommand,
      CreateGlobalTableCommand: CreateGlobalTableCommand_1.CreateGlobalTableCommand,
      CreateTableCommand: CreateTableCommand_1.CreateTableCommand,
      DeleteBackupCommand: DeleteBackupCommand_1.DeleteBackupCommand,
      DeleteItemCommand: DeleteItemCommand_1.DeleteItemCommand,
      DeleteTableCommand: DeleteTableCommand_1.DeleteTableCommand,
      DescribeBackupCommand: DescribeBackupCommand_1.DescribeBackupCommand,
      DescribeContinuousBackupsCommand: DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand,
      DescribeContributorInsightsCommand: DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand,
      DescribeEndpointsCommand: DescribeEndpointsCommand_1.DescribeEndpointsCommand,
      DescribeExportCommand: DescribeExportCommand_1.DescribeExportCommand,
      DescribeGlobalTableCommand: DescribeGlobalTableCommand_1.DescribeGlobalTableCommand,
      DescribeGlobalTableSettingsCommand: DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand,
      DescribeImportCommand: DescribeImportCommand_1.DescribeImportCommand,
      DescribeKinesisStreamingDestinationCommand: DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand,
      DescribeLimitsCommand: DescribeLimitsCommand_1.DescribeLimitsCommand,
      DescribeTableCommand: DescribeTableCommand_1.DescribeTableCommand,
      DescribeTableReplicaAutoScalingCommand: DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand,
      DescribeTimeToLiveCommand: DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand,
      DisableKinesisStreamingDestinationCommand: DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand,
      EnableKinesisStreamingDestinationCommand: EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand,
      ExecuteStatementCommand: ExecuteStatementCommand_1.ExecuteStatementCommand,
      ExecuteTransactionCommand: ExecuteTransactionCommand_1.ExecuteTransactionCommand,
      ExportTableToPointInTimeCommand: ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand,
      GetItemCommand: GetItemCommand_1.GetItemCommand,
      ImportTableCommand: ImportTableCommand_1.ImportTableCommand,
      ListBackupsCommand: ListBackupsCommand_1.ListBackupsCommand,
      ListContributorInsightsCommand: ListContributorInsightsCommand_1.ListContributorInsightsCommand,
      ListExportsCommand: ListExportsCommand_1.ListExportsCommand,
      ListGlobalTablesCommand: ListGlobalTablesCommand_1.ListGlobalTablesCommand,
      ListImportsCommand: ListImportsCommand_1.ListImportsCommand,
      ListTablesCommand: ListTablesCommand_1.ListTablesCommand,
      ListTagsOfResourceCommand: ListTagsOfResourceCommand_1.ListTagsOfResourceCommand,
      PutItemCommand: PutItemCommand_1.PutItemCommand,
      QueryCommand: QueryCommand_1.QueryCommand,
      RestoreTableFromBackupCommand: RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand,
      RestoreTableToPointInTimeCommand: RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand,
      ScanCommand: ScanCommand_1.ScanCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      TransactGetItemsCommand: TransactGetItemsCommand_1.TransactGetItemsCommand,
      TransactWriteItemsCommand: TransactWriteItemsCommand_1.TransactWriteItemsCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateContinuousBackupsCommand: UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand,
      UpdateContributorInsightsCommand: UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand,
      UpdateGlobalTableCommand: UpdateGlobalTableCommand_1.UpdateGlobalTableCommand,
      UpdateGlobalTableSettingsCommand: UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand,
      UpdateItemCommand: UpdateItemCommand_1.UpdateItemCommand,
      UpdateTableCommand: UpdateTableCommand_1.UpdateTableCommand,
      UpdateTableReplicaAutoScalingCommand: UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand,
      UpdateTimeToLiveCommand: UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand
    };
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {
    };
    exports2.DynamoDB = DynamoDB;
    (0, smithy_client_1.createAggregatedClient)(commands, DynamoDB);
  }
});

var require_commands4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports2);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports2);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports2);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports2);
    tslib_1.__exportStar(require_CreateTableCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports2);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports2);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports2);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports2);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports2);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeImportCommand(), exports2);
    tslib_1.__exportStar(require_DescribeKinesisStreamingDestinationCommand(), exports2);
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports2);
    tslib_1.__exportStar(require_DescribeTableReplicaAutoScalingCommand(), exports2);
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports2);
    tslib_1.__exportStar(require_DisableKinesisStreamingDestinationCommand(), exports2);
    tslib_1.__exportStar(require_EnableKinesisStreamingDestinationCommand(), exports2);
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports2);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports2);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports2);
    tslib_1.__exportStar(require_GetItemCommand(), exports2);
    tslib_1.__exportStar(require_ImportTableCommand(), exports2);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports2);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports2);
    tslib_1.__exportStar(require_ListExportsCommand(), exports2);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports2);
    tslib_1.__exportStar(require_ListImportsCommand(), exports2);
    tslib_1.__exportStar(require_ListTablesCommand(), exports2);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports2);
    tslib_1.__exportStar(require_PutItemCommand(), exports2);
    tslib_1.__exportStar(require_QueryCommand(), exports2);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports2);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports2);
    tslib_1.__exportStar(require_ScanCommand(), exports2);
    tslib_1.__exportStar(require_TagResourceCommand(), exports2);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports2);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports2);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports2);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports2);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTableReplicaAutoScalingCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports2);
  }
});

var require_Interfaces3 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ListContributorInsightsPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListContributorInsightsCommand_1.ListContributorInsightsCommand(input), ...args);
    };
    async function* paginateListContributorInsights(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListContributorInsights = paginateListContributorInsights;
  }
});

var require_ListExportsPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListExportsCommand_1.ListExportsCommand(input), ...args);
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListExports = paginateListExports;
  }
});

var require_ListImportsPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListImports = void 0;
    var ListImportsCommand_1 = require_ListImportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListImportsCommand_1.ListImportsCommand(input), ...args);
    };
    async function* paginateListImports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["PageSize"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListImports = paginateListImports;
  }
});

var require_ListTablesPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTablesCommand_1.ListTablesCommand(input), ...args);
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListTables = paginateListTables;
  }
});

var require_QueryPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateQuery = paginateQuery;
  }
});

var require_ScanPaginator = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateScan = paginateScan;
  }
});

var require_pagination5 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces3(), exports2);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports2);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports2);
    tslib_1.__exportStar(require_ListImportsPaginator(), exports2);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports2);
    tslib_1.__exportStar(require_QueryPaginator(), exports2);
    tslib_1.__exportStar(require_ScanPaginator(), exports2);
  }
});

var require_waitForTableExists = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilTableExists = exports2.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs66();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === "ACTIVE") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilTableExists = waitUntilTableExists;
  }
});

var require_waitForTableNotExists = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilTableNotExists = exports2.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs66();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilTableNotExists = waitUntilTableNotExists;
  }
});

var require_waiters2 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForTableExists(), exports2);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports2);
  }
});

var require_models4 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports2);
  }
});

var require_dist_cjs70 = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DynamoDBServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDBClient(), exports2);
    tslib_1.__exportStar(require_DynamoDB(), exports2);
    tslib_1.__exportStar(require_commands4(), exports2);
    tslib_1.__exportStar(require_pagination5(), exports2);
    tslib_1.__exportStar(require_waiters2(), exports2);
    tslib_1.__exportStar(require_models4(), exports2);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports2, "DynamoDBServiceException", { enumerable: true, get: function() {
      return DynamoDBServiceException_1.DynamoDBServiceException;
    } });
  }
});

var require_commons = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/commons.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.COUNTER_HASH_KEY = void 0;
    exports2.COUNTER_HASH_KEY = "id";
  }
});

var require_counter_inflight = __commonJS({
  "../../../AppData/Roaming/npm/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/counter.inflight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CounterClient = void 0;
    var client_dynamodb_1 = require_dist_cjs70();
    var commons_1 = require_commons();
    var AMOUNT_TOKEN = "amount";
    var INITIAL_VALUE_TOKEN = "initial";
    var COUNTER_ID = "counter";
    var VALUE_ATTRIBUTE = "counter_value";
    var SET_VALUE = "set_value";
    var CounterClient = class {
      constructor(tableName, initial = 0, client = new client_dynamodb_1.DynamoDBClient({})) {
        this.tableName = tableName;
        this.initial = initial;
        this.client = client;
      }
      async inc(amount = 1, key = COUNTER_ID) {
        var _a;
        const command = new client_dynamodb_1.UpdateItemCommand({
          TableName: this.tableName,
          Key: { [commons_1.COUNTER_HASH_KEY]: { S: key } },
          UpdateExpression: `SET ${VALUE_ATTRIBUTE} = if_not_exists(${VALUE_ATTRIBUTE}, :${INITIAL_VALUE_TOKEN}) + :${AMOUNT_TOKEN}`,
          ExpressionAttributeValues: {
            [`:${AMOUNT_TOKEN}`]: { N: `${amount}` },
            [`:${INITIAL_VALUE_TOKEN}`]: { N: `${this.initial}` }
          },
          ReturnValues: "UPDATED_NEW"
        });
        const result = await this.client.send(command);
        let newValue = (_a = result.Attributes) == null ? void 0 : _a[VALUE_ATTRIBUTE].N;
        if (!newValue) {
          throw new Error(`${VALUE_ATTRIBUTE} attribute not found on table.`);
        }
        return parseInt(newValue) - amount;
      }
      async dec(amount = 1, key = COUNTER_ID) {
        return this.inc(-1 * amount, key);
      }
      async peek(key = COUNTER_ID) {
        var _a;
        const command = new client_dynamodb_1.GetItemCommand({
          TableName: this.tableName,
          Key: { [commons_1.COUNTER_HASH_KEY]: { S: key } }
        });
        const result = await this.client.send(command);
        let currentValue = (_a = result.Item) == null ? void 0 : _a[VALUE_ATTRIBUTE].N;
        if (currentValue === void 0) {
          return this.initial;
        }
        return parseInt(currentValue);
      }
      async set(value, key = COUNTER_ID) {
        const command = new client_dynamodb_1.UpdateItemCommand({
          TableName: this.tableName,
          Key: { [commons_1.COUNTER_HASH_KEY]: { S: key } },
          UpdateExpression: `SET ${VALUE_ATTRIBUTE} = :${SET_VALUE}`,
          ExpressionAttributeValues: {
            [`:${SET_VALUE}`]: { N: `${value}` }
          },
          ReturnValues: "UPDATED_NEW"
        });
        await this.client.send(command);
        return;
      }
    };
    exports2.CounterClient = CounterClient;
  }
});

exports.handler = async function(event) {
  return await new (require_queue_setconsumer_inflight()).QueueSetConsumerHandlerClient({
    handler: await (async () => {
      const $Closure1Client = require_inflight_Closure1_1()({
        $bucket: new (require_bucket_inflight()).BucketClient(process.env["BUCKET_NAME_d755b447"]),
        $counter: new (require_counter_inflight()).CounterClient(process.env["DYNAMODB_TABLE_NAME_49baa65c"], 2)
      });
      const client = new $Closure1Client({});
      if (client.$inflight_init) {
        await client.$inflight_init();
      }
      return client;
    })(),
    args: {}
  }).handle(event);
};
